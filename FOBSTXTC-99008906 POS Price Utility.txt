OBJECT Codeunit 99008906 POS Price Utility										
{										
OBJECT-PROPERTIES										
{										
Date=07/05/14;										
Time=12:00:00 p.m.;										
Version List=LSW17.1;										
}										
PROPERTIES										
{										
TableNo=99008981;										
OnRun=BEGIN										
END;										
										
}										
CODE										
{										
VAR										
Text001@1021 : TextConst 'ENU=Total Discount;ESP=Descuento Total';										
Item@1000 : Record 27;										
PosTrans@1001 : Record 99008980;										
PosSetup@1002 : Record 99008900;										
Store@1020 : Record 99001470;										
PosFuncProfile@1003 : Record 99001515;										
Currency@1100409005 : Record 4;										
CurrencyExchRate@1100409004 : Record 330;										
rboPriceUtil@1004 : Codeunit 99001462;										
BOUtil@1005 : Codeunit 99001452;										
mmMembList@1006 : Codeunit 99008907;										
mmMembTmp@1007 : Codeunit 99008907;										
mmTmp@1008 : Codeunit 99008907;										
mmOfferList@1009 : Codeunit 99008907;										
PosFunctions@1022 : Codeunit 99008900;										
SalesPriceCalcMgt@1100409006 : Codeunit 7000;										
Global@1012 : Codeunit 99008919;										
initialized@1014 : Boolean;										
lastItemUpd@1015 : Code[20];										
diffList@1016 : ARRAY [250] OF Integer;										
diffCount@1017 : Integer;										
lineList@1018 : ARRAY [250] OF Integer;										
OldLine@1019 : Boolean;										
OfferPosCalc@1200070000 : Record 99001561;										
TmpPeriodicDiscount@1200070001 : TEMPORARY Record 99001453;										
tmpTransLineToUpd@1200070002 : TEMPORARY Record 99008981;										
tmpMMPosTrLine@1100409000 : TEMPORARY Record 99008981;										
mmSmallestList@1100409001 : Codeunit 99008907;										
RetailSetup@1100409002 : Record 10000700;										
POSOfferExtUtility@1100409003 : Codeunit 99009509;										
PosCtrl@1100409007 : Codeunit 10012720;										
ItemPointOfferLineNo@1100409008 : Integer;										
gItemPointOfferSelected@1100409009 : Boolean;										
										
PROCEDURE InitGlobals@5(VAR PosTrLn@1000 : Record 99008981;GetItem@1200070000 : Boolean);										
BEGIN										
//InitGlobals										
IF GetItem THEN BEGIN										
"IF Item.""No."" <> PosTrLn.Number THEN"										
Item.GET(PosTrLn.Number);										
END ELSE										
CLEAR(Item);										
IF NOT initialized THEN BEGIN										
RetailSetup.GET;										
"PosTrans.GET(PosTrLn.""Receipt No."");"										
"IF NOT Currency.GET(PosTrans.""Trans. Currency Code"") THEN"										
CLEAR(Currency);										
"Store.GET(PosTrLn.""Store No."");"										
PosFuncProfile.GET(Global.FunctionalityProfileID);										
initialized := TRUE;										
END;										
END;										
										
PROCEDURE GetPrice@1(VAR Line@1000 : Record 99008981;UOM@1200070000 : Code[10];NewLine@10012000 : Boolean);										
VAR										
PosTransLine2@1001 : Record 99008981;										
POSTransaction@1200070001 : Record 99008980;										
BEGIN										
//GetPrice										
IF NewLine THEN BEGIN										
CLEAR(PosTransLine2);										
"PosTransLine2.SETRANGE(""Receipt No."",PosTrans.""Receipt No."");"										
"PosTransLine2.SETRANGE(Number,Line.Number);"										
"PosTransLine2.SETRANGE(""Price Change"",FALSE);"										
"PosTransLine2.SETRANGE(""Entry Status"",PosTransLine2.""Entry Status""::"" "");"										
"PosTransLine2.SETRANGE(""Unit of Measure"",Line.""Unit of Measure"");"										
"PosTransLine2.SETRANGE(""Variant Code"",Line.""Variant Code"");"										
"PosTransLine2.SETRANGE(""Deal Line"",FALSE);"										
"PosTransLine2.SETRANGE(""Price Group Code"",Line.""Price Group Code"");"										
"PosTransLine2.SETRANGE(""Vat Bus. Posting Group"",Line.""Vat Bus. Posting Group"");"										
"PosTransLine2.SETRANGE(""Sales Type"",Line.""Sales Type"");"										
IF PosTransLine2.FIND('-') THEN										
IF PosTransLine2.Price <> 0 THEN BEGIN										
Line.Price := PosTransLine2.Price;										
"Line.""Promotion No."" := PosTransLine2.""Promotion No."";"										
DeletePromotionDealEntry(Line);										
"CopyPromationEntry(PosTransLine2,Line);"										
EXIT;										
END;										
END;										
"POSTransaction.GET(Line.""Receipt No."");"										
										
rboPriceUtil.ClearCouponAndMemberInfo;										
"IF POSTransaction.""Member Card No."" <> '' THEN"										
"IF ValidateOfferMemberInfo(POSTransaction,0) THEN"										
SetMemberInfo;										
SetCouponInfo(POSTransaction);										
										
Line.Price :=										
rboPriceUtil.GetValidRetailPrice2Trans(										
"Line.""Store No."",Line.Number,PosTrans.""Trans. Date"",PosTrans.""Trans Time"",UOM,Line.""Variant Code"","										
"Line.""Vat Bus. Posting Group"",POSTransaction.""Trans. Currency Code"",Line.""Price Group Code"",Line.""Sales Type"","										
"POSTransaction.""Customer Disc. Group"",Line);"										
										
"rboPriceUtil.GetAdditionalPriceInfo(Line.""Promotion No."",Line.""InfoCode Disc. Disable"");"										
										
DeletePromotionDealEntry(Line);										
InsertPromotionDealEntry(Line);										
END;										
										
PROCEDURE CalcPrice@9(VAR currLine@1000 : Record 99008981;NewLine@1100409000 : Boolean);										
VAR										
found@1003 : Boolean;										
calcprice@1004 : Decimal;										
UnitOfMeasureMgt@1005 : Codeunit 5402;										
UOM@1006 : Code[10];										
UnitCost@1007 : Decimal;										
BEGIN										
//CalcPrice										
"InitGlobals(currLine,TRUE);"										
"IF currLine.""Unit of Measure"" <> '' THEN"										
"UOM := currLine.""Unit of Measure"""										
ELSE										
"UOM := Item.""Sales Unit of Measure"";"										
										
"GetPrice(currLine,UOM,NewLine);"										
										
"currLine.""Net Price"" := currLine.Price / (1 + currLine.""VAT %"" / 100);"										
										
"UnitCost := rboPriceUtil.GetValidCostPrice(currLine.Number,currLine.""Variant Code"",Store.""Location Code"")"										
"* UnitOfMeasureMgt.GetQtyPerUnitOfMeasure(Item,UOM);"										
"currLine.""Cost Price"" := ROUND(CurrencyExchRate.ExchangeAmtLCYToFCY(PosTrans.""Trans. Date"",PosTrans.""Trans. Currency Code"","										
"UnitCost,PosTrans.""Currency Factor""),Currency.""Unit-Amount Rounding Precision"");"										
"currLine.""Cost Amount"" := currLine.""Cost Price"" * currLine.Quantity;"										
"currLine.""Org. Price Inc. VAT"" := currLine.Price;"										
"currLine.""Org. Price Exc. VAT"" := currLine.""Net Price"";"										
END;										
										
PROCEDURE UpdatePrice@10012001(VAR currLine@1000 : Record 99008981);										
VAR										
found@1003 : Boolean;										
calcprice@1004 : Decimal;										
UnitOfMeasureMgt@1005 : Codeunit 5402;										
UOM@1006 : Code[10];										
UnitCost@1007 : Decimal;										
BEGIN										
//ChangePrice										
"InitGlobals(currLine,TRUE);"										
"IF currLine.""Unit of Measure"" <> '' THEN"										
"UOM := currLine.""Unit of Measure"""										
ELSE										
"UOM := Item.""Sales Unit of Measure"";"										
										
"GetPrice(currLine,UOM,FALSE);"										
"currLine.""Net Price"" := currLine.Price / (1 + currLine.""VAT %"" / 100);"										
										
UnitCost :=										
"rboPriceUtil.GetValidCostPrice(currLine.Number,currLine.""Variant Code"",Store.""Location Code"")"										
"* UnitOfMeasureMgt.GetQtyPerUnitOfMeasure(Item,UOM);"										
"currLine.""Cost Price"" :="										
ROUND(										
"CurrencyExchRate.ExchangeAmtLCYToFCY(PosTrans.""Trans. Date"",PosTrans.""Trans. Currency Code"","										
"UnitCost,PosTrans.""Currency Factor""),Currency.""Unit-Amount Rounding Precision"");"										
										
										
"currLine.""Cost Amount"" := currLine.""Cost Price"" * currLine.Quantity;"										
"currLine.""Org. Price Inc. VAT"" := currLine.Price;"										
"currLine.""Org. Price Exc. VAT"" := currLine.""Net Price"";"										
END;										
										
PROCEDURE CalcLineDisc@7(VAR currLine@1000 : Record 99008981) : Boolean;										
BEGIN										
//CalcPriceDisc										
END;										
										
PROCEDURE CalcPeriodicDisc@2(VAR currline@1000 : Record 99008981;CalcOnTotal@1200070000 : Boolean);										
VAR										
OfferCalcBuffer@1100409000 : TEMPORARY Record 99001561;										
BEGIN										
//CalcPeriodicDisc										
"InitGlobals(currline, TRUE);"										
										
TmpPeriodicDiscount.DELETEALL;										
CLEAR(TmpPeriodicDiscount);										
TmpPeriodicDiscount.SETCURRENTKEY(Priority);										
										
//LS7.1-04 FindPeriodicOffers(currline);										
//LS7.1-04 -										
"IF PosFunctions.GetPosTransLineOffers(currline,OfferCalcBuffer) THEN BEGIN"										
OfferCalcBuffer.RESET;										
IF OfferCalcBuffer.FIND('-') THEN										
REPEAT										
OfferPosCalc.INIT;										
OfferPosCalc := OfferCalcBuffer;										
IF OfferPosCalc.INSERT THEN;										
"InsertTmpOffer(OfferPosCalc.""Group No."");"										
UNTIL OfferCalcBuffer.NEXT = 0;										
END ELSE BEGIN										
FindPeriodicOffers(currline);										
PosFunctions.AddPosTransLineOffers(currline);										
END;										
PreProcessItemPointOffer(currline);										
//LS7.1-04 -										
										
"IF currline.""Entry Status"" = currline.""Entry Status""::Voided THEN BEGIN"										
OfferPosCalc.RESET;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Trans. Line No."",currline.""Line No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::""Mix&Match"");"										
IF NOT OfferPosCalc.ISEMPTY THEN BEGIN										
"OfferPosCalc.SETRANGE(""Trans. Line No."");"										
IF OfferPosCalc.FIND('-') THEN REPEAT										
"InsertTmpOffer(OfferPosCalc.""Group No."");"										
UNTIL OfferPosCalc.NEXT = 0;										
END;										
END;										
IF NOT CalcOnTotal THEN										
RegisterPeriodicDisc(currline)										
ELSE BEGIN										
"POSOfferExtUtility.ProcessLinePreTotal(PosTrans,currline,'');"										
"currline.GET(currline.""Receipt No."",currline.""Line No."");"										
END;										
END;										
										
PROCEDURE CalcPeriodicOnTotalPressed@1200070005(Transaction@1000 : Record 99008980);										
VAR										
locTransLine@1200070000 : Record 99008981;										
currline@1200070001 : Record 99008981;										
BEGIN										
//CalcPeriodicOnTotalPressed										
										
"currline.SETCURRENTKEY(""Receipt No."",""Entry Type"",Number,""Variant Code"");"										
"currline.SETRANGE(""Receipt No."",Transaction.""Receipt No."");"										
"currline.SETRANGE(""Entry Type"",currline.""Entry Type""::Item);"										
										
IF currline.FIND('-') THEN BEGIN										
										
"InitGlobals(currline,TRUE);"										
										
TmpPeriodicDiscount.DELETEALL;										
CLEAR(TmpPeriodicDiscount);										
TmpPeriodicDiscount.SETCURRENTKEY(Priority);										
										
										
OfferPosCalc.RESET;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
										
IF OfferPosCalc.FIND('-') THEN REPEAT										
"InsertTmpOffer(OfferPosCalc.""Group No."");"										
UNTIL OfferPosCalc.NEXT = 0;										
										
RegisterPeriodicDisc(currline);										
END;										
END;										
										
PROCEDURE RegisterPeriodicDisc@1200070006(VAR currline@1200070000 : Record 99008981);										
VAR										
locTransLine@1200070001 : Record 99008981;										
ManualTransDiscTemp@1100409001 : TEMPORARY Record 99008943;										
PosTransLineTemp@1100409002 : TEMPORARY Record 99008981;										
"OfferType@1100409000 : 'Periodic Disc.,Customer,InfoCode,Total,Line,Promotion,Deal,Total Discount,Tender Type,Item Point,Line Disc"	oun	t';								
PerDiscTypeTemp@1100409004 : TEMPORARY Record 99008943;										
UpdatedOfferInfoLineTemp@1100409003 : TEMPORARY Record 99001453;										
BEGIN										
//RegisterPeriodicDisc										
tmpTransLineToUpd.DELETEALL;										
ManualTransDiscTemp.RESET;										
ManualTransDiscTemp.DELETEALL;										
PosTransLineTemp.RESET;										
PosTransLineTemp.DELETEALL;										
										
IF TmpPeriodicDiscount.FIND('-') THEN REPEAT										
OfferPosCalc.RESET;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Group No."",TmpPeriodicDiscount.""No."");"										
IF OfferPosCalc.FIND('-') THEN										
REPEAT										
"IF locTransLine.GET(currline.""Receipt No."",OfferPosCalc.""Trans. Line No."") THEN BEGIN"										
"POSOfferExtUtility.CollectManualTransLineDisc(locTransLine,TRUE,ManualTransDiscTemp);"										
"IF POSOfferExtUtility.ClearTransLineDisc(locTransLine,FALSE) THEN BEGIN"										
"IF locTransLine.""Line No."" <> currline.""Line No."" THEN BEGIN"										
PosTransLineTemp.INIT;										
PosTransLineTemp := locTransLine;										
PosTransLineTemp.INSERT;										
END;										
END;										
END;										
UNTIL OfferPosCalc.NEXT = 0;										
										
CASE TmpPeriodicDiscount.Type OF										
"TmpPeriodicDiscount.Type::""Disc. Offer"" : CalcDiscountOffer(currline);"										
TmpPeriodicDiscount.Type::Multibuy : CalcMultiBuy(currline);										
"TmpPeriodicDiscount.Type::""Mix&Match"" : CalcMixMatchNew(currline,TRUE);"										
"TmpPeriodicDiscount.Type::""Item Point"": CalcItemPointOffer(currline);"										
END;										
										
UNTIL TmpPeriodicDiscount.NEXT = 0;										
										
UpdatedOfferInfoLineTemp.RESET;										
UpdatedOfferInfoLineTemp.DELETEALL;										
IF tmpTransLineToUpd.FIND('-') THEN REPEAT										
"locTransLine.GET(tmpTransLineToUpd.""Receipt No."",tmpTransLineToUpd.""Line No."");"										
"GetPerDiscLine(PerDiscTypeTemp,locTransLine);"										
"IF PerDiscTypeTemp.""Periodic Disc. Group"" <> '' THEN BEGIN"										
{//LS7.1-03										
"IF PerDiscTypeTemp.""Periodic Disc. Type"" = PerDiscTypeTemp.""Periodic Disc. Type""::""Mix&Match"" THEN"										
locTransLine.UpdatePerDiscInfoLine										
ELSE										
}//LS7.1-03										
"IF NOT UpdatedOfferInfoLineTemp.GET(PerDiscTypeTemp.""Periodic Disc. Group"") THEN BEGIN"										
locTransLine.UpdatePerDiscInfoLine;										
UpdatedOfferInfoLineTemp.INIT;										
"UpdatedOfferInfoLineTemp.""No."" := PerDiscTypeTemp.""Periodic Disc. Group"";"										
UpdatedOfferInfoLineTemp.INSERT;										
END										
END ELSE										
locTransLine.UpdatePerDiscInfoLine;										
UNTIL  tmpTransLineToUpd.NEXT = 0;										
										
"currline.GET(currline.""Receipt No."",currline.""Line No."");"										
POSOfferExtUtility.RestoreTransDiscBuffer(ManualTransDiscTemp);										
"currline.VALIDATE(""Item Disc. Group"");"										
"POSOfferExtUtility.ProcessLinePreTotal(PosTrans,currline,'');"										
PosTransLineTemp.RESET;										
IF PosTransLineTemp.FIND('-') THEN										
REPEAT										
"IF locTransLine.GET(currline.""Receipt No."",PosTransLineTemp.""Line No."") THEN BEGIN"										
"locTransLine.VALIDATE(""Item Disc. Group"");"										
"POSOfferExtUtility.ProcessLinePreTotal(PosTrans,locTransLine,'');"										
END;										
UNTIL PosTransLineTemp.NEXT = 0;										
IF PosFunctions.IsInPaymentState THEN										
"POSOfferExtUtility.ReCalcOfferSeq(PosTrans,OfferType::""Total Discount"");"										
"currline.GET(currline.""Receipt No."",currline.""Line No."");"										
END;										
										
PROCEDURE SelectMultibuy@6(VAR MultiLine@1000 : Record 99001505;quantity@1001 : Decimal) : Boolean;										
VAR										
lastQuant@1002 : Decimal;										
numLines@1003 : Integer;										
multibuyValid@1004 : Boolean;										
done@1005 : Boolean;										
BEGIN										
//SelectMultibuy										
lastQuant := -1;										
multibuyValid := FALSE;										
done := FALSE;										
"MultiLine.SETRANGE(Group,MultiLine.Group);"										
"//MultiLine.SETRANGE(""Currency Code"",Store.""Currency Code""); LS6.3-06"										
numLines := MultiLine.COUNT;										
IF NOT MultiLine.FIND('-') THEN										
EXIT(FALSE);										
										
IF numLines = 1 THEN BEGIN										
"IF MultiLine.""Min. Quantity"" <= quantity THEN"										
multibuyValid := TRUE;										
END ELSE REPEAT										
"IF (MultiLine.""Min. Quantity"" > quantity) AND (lastQuant > -1) THEN BEGIN"										
MultiLine.NEXT(-1);										
done := TRUE;										
"END ELSE IF MultiLine.""Min. Quantity"" > quantity THEN"										
done := TRUE										
ELSE										
"lastQuant := MultiLine.""Min. Quantity"";"										
IF (NOT multibuyValid) AND (NOT done) THEN										
done := (MultiLine.NEXT = 0);										
UNTIL done OR multibuyValid;										
										
IF (NOT multibuyValid) AND (lastQuant > -1) THEN										
multibuyValid := TRUE;										
										
EXIT(multibuyValid);										
END;										
										
PROCEDURE RegisterMixMatch@12(VAR mmGrp@1000 : Record 99001453;VAR mmLine@1001 : Record 99001454;VAR currLine@1002 : Record 99008981	;mm	Cou	nt	@10	03 : Integer;RegisterOk@1100409001 : Boolean;VAR pCurrAmountLimit@1100409007 : Decimal) : Boolean;					
VAR										
posTransLine2@1004 : Record 99008981;										
posMixMatchEntry@1005 : Record 99008983;										
tmpDiscountValues@1200070002 : TEMPORARY Record 18;										
nItems@1006 : Integer;										
i@1007 : Integer;										
totPrice@1008 : Decimal;										
tmpLineNo@1009 : Integer;										
tmpPrice@1010 : Decimal;										
discPr@1011 : Decimal;										
maxLineNo@1012 : Integer;										
discAmount@1013 : Decimal;										
nFree@1014 : Integer;										
totDiscAmt@1015 : Decimal;										
discPrAdd@1016 : Decimal;										
qty@1017 : Decimal;										
discAmtPrev@1018 : Decimal;										
itemNo@1019 : Code[20];										
dummyDec@1020 : Decimal;										
discDiff@1021 : Decimal;										
discDiffPr@1022 : Decimal;										
DiscountValue@1200070000 : Decimal;										
nDiscItems@1100409000 : Decimal;										
tmpInfoCodeDiscPr@1200070001 : Decimal;										
totVATDisc@1200070003 : Decimal;										
prevLineDisc@1200070004 : Decimal;										
prevInfoDisc@1200070005 : Decimal;										
PerDiscPer@1100409004 : Decimal;										
PerDiscAmo@1100409003 : Decimal;										
PerDiscType@1100409002 : Record 99008943;										
DiscAmValue@1100409005 : Decimal;										
discDenom@1100409006 : Decimal;										
BEGIN										
//RegisterMixMatch										
nItems := mmOfferList.CountList;										
IF nItems = 0 THEN										
EXIT(FALSE);										
										
IF NOT RegisterOk THEN										
EXIT(TRUE);										
										
PosFunctions.IncTrackingInstanceID;										
										
totPrice := 0;										
maxLineNo := 0;										
tmpDiscountValues.DELETEALL;										
FOR i := 1 TO nItems DO BEGIN										
"mmOfferList.GetIndexList(i,tmpLineNo,tmpPrice,qty,itemNo);"										
"posTransLine2.GET(currLine.""Receipt No."",tmpLineNo);"										
"IF posTransLine2.""Scale Item"" THEN"										
qty := posTransLine2.Quantity;										
totPrice := totPrice + (posTransLine2.Price * qty);										
IF (tmpLineNo > maxLineNo) AND ((posTransLine2.Price * qty) <>0) THEN										
maxLineNo := tmpLineNo;										
"IF tmpDiscountValues.GET(posTransLine2.""VAT Code"") THEN BEGIN"										
"tmpDiscountValues.""Budgeted Amount"" += posTransLine2.Price * qty;"										
tmpDiscountValues.MODIFY;										
END ELSE BEGIN										
"tmpDiscountValues.""No."" := posTransLine2.""VAT Code"";"										
"tmpDiscountValues.""Budgeted Amount"" := posTransLine2.Price * qty;"										
"tmpDiscountValues.""Last Statement No."" := posTransLine2.""Line No."";"										
tmpDiscountValues.INSERT;										
END;										
END;										
										
discAmount := -1;										
"IF mmGrp.""Discount Type"" <> mmGrp.""Discount Type""::""Line spec."" THEN"										
"CASE mmGrp.""Discount Type"" OF"										
"mmGrp.""Discount Type""::""Deal Price"" : BEGIN"										
"IF Store.""Currency Code"" <> mmGrp.""Currency Code"" THEN"										
"mmGrp.""Deal Price Value"" := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"","										
"mmGrp.""Currency Code"",Store.""Currency Code"",mmGrp.""Deal Price Value"");"										
"discAmount := ROUND(totPrice - mmGrp.""Deal Price Value"",PosFuncProfile.""Amount Rounding to"");"										
"discPr := (totPrice - mmGrp.""Deal Price Value"") * 100 / totPrice;"										
"DiscountValue := mmGrp.""Deal Price Value"";"										
END;										
"mmGrp.""Discount Type""::""Discount %"" : BEGIN"										
"discPr := mmGrp.""Discount % Value"";"										
"discAmount := ROUND(totPrice * mmGrp.""Discount % Value"" / 100,PosFuncProfile.""Amount Rounding to"");"										
"DiscountValue := mmGrp.""Discount % Value"";"										
END;										
"mmGrp.""Discount Type""::""Discount Amount"" : BEGIN"										
"IF Store.""Currency Code"" <> mmGrp.""Currency Code"" THEN"										
"mmGrp.""Discount Amount Value"" := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"","										
"mmGrp.""Currency Code"",Store.""Currency Code"",mmGrp.""Discount Amount Value"");"										
										
"DiscAmValue := mmGrp.""Discount Amount Value"";"										
IF (DiscAmValue > totPrice) THEN										
DiscAmValue := totPrice;										
										
"discAmount := ROUND(DiscAmValue,PosFuncProfile.""Amount Rounding to"");"										
discPr := DiscAmValue * 100 / totPrice;										
DiscountValue := DiscAmValue;										
										
										
END;										
"mmGrp.""Discount Type""::""Least Expensive"" : BEGIN"										
"nFree := mmGrp.""No. of Least Expensive Items"";"										
discAmount := 0;										
i := nItems;										
WHILE nDiscItems < nFree DO BEGIN										
"mmOfferList.GetIndexList(i,tmpLineNo,tmpPrice,qty,itemNo);"										
i -= 1;										
"posTransLine2.GET(currLine.""Receipt No."",tmpLineNo);"										
"IF posTransLine2.""Scale Item"" THEN"										
qty := posTransLine2.Quantity;										
IF (qty + nDiscItems) <= nFree THEN BEGIN										
"discAmount := discAmount + qty * posTransLine2.Price * mmGrp.""Disc. % of Least Expensive"" / 100;"										
nDiscItems += qty;										
END ELSE BEGIN										
"discAmount := discAmount + (nFree - nDiscItems) * posTransLine2.Price * mmGrp.""Disc. % of Least Expensive"" / 100;"										
nDiscItems := nFree;										
END;										
END;										
discPr := discAmount * 100 / totPrice;										
"DiscountValue := mmGrp.""No. of Least Expensive Items"";"										
END;										
END;										
										
totVATDisc := 0;										
tmpDiscountValues.FIND('-');										
REPEAT										
"tmpDiscountValues.Amount := ROUND(discPr / 100 * tmpDiscountValues.""Budgeted Amount"",PosFuncProfile.""Amount Rounding to"");"										
"tmpDiscountValues.""Budgeted Amount"" := 0;"										
tmpDiscountValues.MODIFY;										
totVATDisc += tmpDiscountValues.Amount;										
UNTIL tmpDiscountValues.NEXT = 0;										
tmpDiscountValues.Amount += discAmount - totVATDisc;										
tmpDiscountValues.MODIFY;										
										
totDiscAmt := 0;										
FOR i := 1 TO nItems DO BEGIN										
"mmOfferList.GetIndexList(i,tmpLineNo,tmpPrice,qty,itemNo);"										
"posTransLine2.GET(currLine.""Receipt No."",tmpLineNo);"										
"IF posTransLine2.""Scale Item"" THEN"										
qty := posTransLine2.Quantity;										
discPrAdd := 0;										
"IF mmGrp.""Discount Type"" = mmGrp.""Discount Type""::""Line spec."" THEN BEGIN"										
"mmLine.GET(mmGrp.""No."",posTransLine2.""Mix & Match Line No."");"										
"IF mmLine.""Deal Price/Disc. %"" <> 0 THEN"										
"IF mmLine.""Disc. Type"" = mmLine.""Disc. Type""::""Deal Price"" THEN BEGIN"										
"IF Store.""Currency Code"" <> mmGrp.""Currency Code"" THEN"										
"mmLine.""Deal Price/Disc. %"" := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"","										
"mmGrp.""Currency Code"",Store.""Currency Code"",mmLine.""Deal Price/Disc. %"");"										
IF posTransLine2.Price = 0 THEN										
discPrAdd := 0										
ELSE										
"discPrAdd := (posTransLine2.Price - mmLine.""Deal Price/Disc. %"") * 100 / posTransLine2.Price;"										
"discAmount := discAmount + (posTransLine2.Price - mmLine.""Deal Price/Disc. %"") * qty;"										
"END ELSE IF mmLine.""Disc. Type"" = mmLine.""Disc. Type""::""Disc. %"" THEN BEGIN"										
"discPrAdd := mmLine.""Deal Price/Disc. %"";"										
"discAmount := discAmount + (posTransLine2.Price * qty * mmLine.""Deal Price/Disc. %"" / 100);"										
END;										
END;										
										
"GetTransDisc(posTransLine2,TRUE,0);"										
										
"prevLineDisc := posTransLine2.""Line Disc. %"";"										
"prevInfoDisc := posTransLine2.""InfoCode Disc. %"";"										
										
"InsertTransDiscPercent(posTransLine2,0,PerDiscType.DiscType::Line,'');"										
										
"InsertTransDiscPercent(posTransLine2,0,PerDiscType.DiscType::InfoCode,'');"										
										
"posTransLine2.""InfoCode Disc. Disable"" := TRUE;"										
posTransLine2.CalcPrices;										
"discAmtPrev := posTransLine2.""Discount Amount"";"										
										
IF posTransLine2.Price <> 0 THEN										
"posTransLine2.AddQtyDisc(qty,discPr + discPrAdd,mmGrp.""No."")"										
ELSE										
"posTransLine2.AddQtyDisc(qty,0,mmGrp.""No."");"										
										
posTransLine2.CalcPrices;										
										
"IF NOT TrackingAmountLimitOk(TmpPeriodicDiscount,pCurrAmountLimit,posTransLine2.""Periodic Discount Amount"") THEN BEGIN"										
PerDiscPer := pCurrAmountLimit / (posTransLine2.Price * posTransLine2.Quantity) * 100;										
"InsertTransDiscPercent(posTransLine2,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",mmGrp.""No."");"										
posTransLine2.CalcPrices;										
DiscountValue := 0;										
END;										
"InsertTransDiscAmount(posTransLine2,posTransLine2.""Discount Amount"",PerDiscType.DiscType::""Periodic Disc."",mmGrp.""No."");"										
										
"tmpDiscountValues.GET(posTransLine2.""VAT Code"");"										
"tmpDiscountValues.""Budgeted Amount"" += posTransLine2.""Discount Amount"" - discAmtPrev;"										
tmpDiscountValues.MODIFY;										
										
"InsertTransDiscPerType(posTransLine2,TRUE,PerDiscType.""Periodic Disc. Type""::""Mix&Match"",TRUE,mmGrp.""No."");"										
"posTransLine2.""InfoCode Disc. Disable"" := mmGrp.""Block Infocode Discount"";"										
"posTransLine2.""Discount Triggered"" := TRUE;"										
										
"IF (prevLineDisc <> 0) OR ((NOT posTransLine2.""InfoCode Disc. Disable"") AND (prevInfoDisc <> 0)) THEN BEGIN"										
"InsertTransDiscPercent(posTransLine2,prevLineDisc,PerDiscType.DiscType::Line,'');"										
"posTransLine2.VALIDATE(""Item Disc. Group"");"										
END;										
										
posTransLine2.MODIFY(TRUE);										
"tmpTransLineToUpd.""Receipt No."" := posTransLine2.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine2.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
IF MemberTrackingAmountLimit(TmpPeriodicDiscount) THEN										
"pCurrAmountLimit := pCurrAmountLimit - posTransLine2.""Periodic Discount Amount"";"										
										
posMixMatchEntry.INIT;										
"posMixMatchEntry.""Receipt No."" := posTransLine2.""Receipt No."";"										
"posMixMatchEntry.""Line No."" := posTransLine2.""Line No."";"										
posMixMatchEntry.Counter := mmCount;										
"posMixMatchEntry.""Mix && Match Group"" := mmGrp.""No."";"										
"posMixMatchEntry.""Store No."" := PosTrans.""Store No."";"										
"posMixMatchEntry.Date := PosTrans.""Trans. Date"";"										
"posMixMatchEntry.Time := PosTrans.""Trans Time"";"										
"posMixMatchEntry.""Discount Amount"" := (posTransLine2.Price * posTransLine2.Quantity) *"										
"(posTransLine2.""Periodic Disc. %"" / 100);"										
posMixMatchEntry.Quantity := qty;										
posMixMatchEntry.INSERT;										
END;										
										
//check how this works along with other discounts										
"IF (mmGrp.""Discount Type"" <> mmGrp.""Discount Type""::""Line spec."") AND"										
(DiscountValue <> 0) THEN BEGIN										
IF discAmount <> -1 THEN BEGIN										
										
tmpDiscountValues.FIND('-');										
REPEAT										
"discDiff := tmpDiscountValues.Amount - tmpDiscountValues.""Budgeted Amount"";"										
IF discDiff <> 0 THEN BEGIN										
"posTransLine2.GET(currLine.""Receipt No."",tmpDiscountValues.""Last Statement No."");"										
										
discDiffPr := 0;										
discDenom := posTransLine2.Price * posTransLine2.Quantity - discDiff;										
IF (discDenom <> 0) THEN										
discDiffPr := (discDiff / discDenom) * 100;										
										
"GetTransDisc(posTransLine2,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscPer := posTransLine2.""Periodic Disc. %"" + discDiffPr;"										
"InsertTransDiscPercent(posTransLine2,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",mmGrp.""No."");"										
										
"posTransLine2.""Customer Qty Used"" := 0;"										
										
"InsertTransDiscPercent(posTransLine2,0,PerDiscType.DiscType::Customer,'');"										
										
posTransLine2.CalcPrices;										
										
"GetTransDisc(posTransLine2,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscAmo := posTransLine2.""Periodic Discount Amount"" + discDiff;"										
"InsertTransDiscAmount(posTransLine2,PerDiscAmo,PerDiscType.DiscType::""Periodic Disc."",mmGrp.""No."");"										
										
posTransLine2.MODIFY(TRUE);										
END;										
UNTIL tmpDiscountValues.NEXT = 0;										
"posTransLine2.GET(currLine.""Receipt No."",maxLineNo);"										
END;										
END;										
EXIT(TRUE);										
END;										
										
PROCEDURE CalcTotalDiscPct@8(VAR currLine@1000 : Record 99008981;pPaymentState@1100409005 : Boolean) : Boolean;										
VAR										
posTransLine2@1001 : Record 99008981;										
DiscTrans@1002 : Record 99008981;										
Item@1003 : Record 27;										
currDiscPrice@1004 : Decimal;										
OldPct@1005 : Decimal;										
TotalAmount@1006 : Decimal;										
TotalDiscPctAmount@1007 : Decimal;										
TotDiscAmount@1008 : Decimal;										
tmpDec@1009 : Decimal;										
MaxLineNo@1010 : Integer;										
MaxAmount@1011 : Decimal;										
TotalRounded@1012 : Decimal;										
TotalToBe@1200070000 : Decimal;										
TotDiscAmo@1100409001 : Decimal;										
PerDiscType@1100409000 : Record 99008943;										
AmountToDisc@1100409002 : Decimal;										
DiscInPct@1100409003 : Decimal;										
AmountPerLine@1100409004 : Decimal;										
BEGIN										
//CalcTotalDiscPct										
										
"GetTransDisc(currLine,FALSE,PerDiscType.DiscType::Total);"										
										
"IF (currLine.""Tot. Disc Info Line No."" = 0) AND (currLine.""Total Disc. %"" = 0) THEN"										
EXIT;										
										
"InitGlobals(currLine,FALSE);"										
TotalAmount := 0;										
										
TotalDiscPctAmount := 0;										
"posTransLine2.SETCURRENTKEY(""Receipt No."",""Entry Type"");"										
"posTransLine2.SETRANGE(""Receipt No."",currLine.""Receipt No."");"										
"posTransLine2.SETRANGE(""Entry Type"",posTransLine2.""Entry Type""::Item);"										
"posTransLine2.SETRANGE(""Entry Status"",posTransLine2.""Entry Status""::"" "");"										
"posTransLine2.SETRANGE(""Tot. Disc Info Line No."",currLine.""Tot. Disc Info Line No."");"										
"posTransLine2.SETRANGE(""System-Block Manual Discount"",FALSE);"										
IF posTransLine2.FIND('-') THEN BEGIN										
"IF (currLine.""Tot. Disc Info Line No."" = 0) THEN BEGIN"										
"DiscTrans.""Receipt No."" := currLine.""Receipt No."";"										
"DiscTrans.""Entry Type"" := DiscTrans.""Entry Type""::TotalDiscount;"										
DiscTrans.Description := Text001;										
"DiscTrans.""Discount %"" := currLine.""Total Disc. %"";"										
"DiscTrans.""Store No."" := currLine.""Store No."";"										
"DiscTrans.""POS Terminal No."" := currLine.""POS Terminal No."";"										
DiscTrans.InsertLine;										
END ELSE										
"DiscTrans.GET(posTransLine2.""Receipt No."",posTransLine2.""Tot. Disc Info Line No."");"										
REPEAT										
										
"GetTransDisc(posTransLine2,TRUE,0);"										
										
"AmountPerLine := (posTransLine2.Amount + posTransLine2.""Total Disc. Amount"");"										
TotalAmount := TotalAmount + AmountPerLine;										
"MaxLineNo := posTransLine2.""Line No."";"										
										
"InsertTransDiscAmount(posTransLine2,0,PerDiscType.DiscType::Total,'');"										
"InsertTransDiscPercent(posTransLine2,currLine.""Total Disc. %"",PerDiscType.DiscType::Total,'');"										
"TotDiscAmo := ROUND(AmountPerLine * (currLine.""Total Disc. %"" / 100),PosFuncProfile.""Amount Rounding to"");"										
"InsertTransDiscAmount(posTransLine2,TotDiscAmo,PerDiscType.DiscType::Total,'');"										
posTransLine2.CalcPrices;										
										
"GetTransDisc(posTransLine2,FALSE,PerDiscType.DiscType::Total);"										
										
"TotalDiscPctAmount := TotalDiscPctAmount + posTransLine2.""Total Disc. Amount"";"										
										
"posTransLine2.""Tot. Disc Info Line No."" := DiscTrans.""Line No."";"										
posTransLine2.MODIFY(TRUE);										
UNTIL posTransLine2.NEXT = 0;										
"TotalToBe := ROUND(TotalAmount * currLine.""Total Disc. %"" / 100,PosFuncProfile.""Amount Rounding to"");"										
IF TotalToBe <> TotalDiscPctAmount THEN BEGIN										
"posTransLine2.GET(currLine.""Receipt No."",MaxLineNo);"										
										
"GetTransDisc(posTransLine2,TRUE,0);"										
"AmountToDisc := ROUND(posTransLine2.Price * posTransLine2.Quantity,PosFuncProfile.""Amount Rounding to"") -"										
"(posTransLine2.""Discount Amount"" - posTransLine2.""Total Disc. Amount"");"										
"TotDiscAmo := posTransLine2.""Total Disc. Amount"";"										
TotDiscAmo += (TotalToBe - TotalDiscPctAmount);										
"InsertTransDiscAmount(posTransLine2,TotDiscAmo,PerDiscType.DiscType::Total,'');"										
IF AmountToDisc <> 0 THEN BEGIN										
DiscInPct := (TotDiscAmo / AmountToDisc) * 100;										
"InsertTransDiscPercent(posTransLine2,DiscInPct,PerDiscType.DiscType::Total,'');"										
END;										
posTransLine2.Amount -= (TotalToBe - TotalDiscPctAmount);										
posTransLine2.CalcPrices;										
posTransLine2.MODIFY(TRUE);										
END;										
TotalDiscPctAmount := TotalToBe;										
DiscTrans.Amount := -TotalDiscPctAmount;										
"DiscTrans.""Discount %"" := ABS(DiscTrans.Amount / TotalAmount * 100);"										
"DiscTrans.""Entry Status"" := DiscTrans.""Entry Status""::"" "";"										
DiscTrans.MODIFY(TRUE);										
IF TotalDiscPctAmount = 0 THEN										
DiscTrans.VoidLine;										
END ELSE										
EXIT(FALSE);										
										
IF pPaymentState THEN										
"POSOfferExtUtility.ReCalcOfferSeq(PosTrans,PerDiscType.DiscType::Total)"										
ELSE										
POSOfferExtUtility.ReCalcLinePreTotal(PosTrans);										
										
"currLine.GET(currLine.""Receipt No."",currLine.""Line No."");"										
										
"EXIT(POSOfferExtUtility.TransLineDiscOfferTypeExists(currLine,PerDiscType.DiscType::Total));"										
END;										
										
PROCEDURE CalcTotalDiscAmt@15(VAR currLine@1000 : Record 99008981;PosFunc@10012001 : Boolean;DiscAmount@10012000 : Decimal;pPaymentS	tat	e@1	10	40	9002 : Boolean) : Boolean;					
VAR										
posTransLine2@1001 : Record 99008981;										
DiscTrans@1002 : Record 99008981;										
Item@1003 : Record 27;										
currDiscPrice@1004 : Decimal;										
OldPct@1005 : Decimal;										
TotalAmount@1006 : Decimal;										
TotalDiscPctAmount@1007 : Decimal;										
TotDiscAmount@1008 : Decimal;										
tmpDec@1009 : Decimal;										
MaxLineNo@1010 : Integer;										
MaxAmount@1011 : Decimal;										
TotalRounded@1012 : Decimal;										
DiscTransTmp@10012002 : Record 99008981;										
pTotDiscAmo@1100409000 : Decimal;										
PerDiscType@1100409001 : Record 99008943;										
BEGIN										
//CalcTotalDiscAmt										
										
"IF (currLine.""Tot. Disc Info Line No."" = 0) AND (DiscAmount = 0) THEN"										
EXIT;										
										
"posTransLine2.SETCURRENTKEY(""Receipt No."",""Entry Type"");"										
"posTransLine2.SETRANGE(""Receipt No."",currLine.""Receipt No."");"										
"posTransLine2.SETRANGE(""Entry Type"",posTransLine2.""Entry Type""::Item);"										
"posTransLine2.SETRANGE(""Entry Status"",posTransLine2.""Entry Status""::"" "");"										
"posTransLine2.SETRANGE(""Tot. Disc Info Line No."",currLine.""Tot. Disc Info Line No."");"										
"posTransLine2.SETRANGE(""System-Block Manual Discount"",FALSE);"										
IF posTransLine2.FIND('-') THEN BEGIN										
"IF (currLine.""Tot. Disc Info Line No."" = 0) THEN BEGIN"										
"DiscTrans.""Receipt No."" := currLine.""Receipt No."";"										
"DiscTrans.""Entry Type"" := DiscTrans.""Entry Type""::TotalDiscount;"										
DiscTrans.Description := Text001;										
"DiscTrans.""Discount %"" := currLine.""Total Disc. %"";"										
"DiscTrans.""Store No."" := currLine.""Store No."";"										
"DiscTrans.""POS Terminal No."" := currLine.""POS Terminal No."";"										
DiscTrans.InsertLine;										
										
TotDiscAmount := DiscAmount;										
										
END										
ELSE BEGIN										
"DiscTrans.GET(posTransLine2.""Receipt No."",posTransLine2.""Tot. Disc Info Line No."");"										
										
IF PosFunc THEN										
TotDiscAmount := DiscAmount										
ELSE										
//TotDiscAmount := DiscTrans.Amount;										
TotDiscAmount := -DiscTrans.Amount;										
										
END;										
REPEAT										
										
"GetTransDisc(posTransLine2,TRUE,0);"										
										
"TotalAmount := TotalAmount + (posTransLine2.Amount + posTransLine2.""Total Disc. Amount"");"										
"IF posTransLine2.""Tot. Disc Info Line No."" <> DiscTrans.""Line No."" THEN BEGIN"										
"posTransLine2.""Tot. Disc Info Line No."" := DiscTrans.""Line No."";"										
posTransLine2.MODIFY(TRUE);										
END;										
UNTIL posTransLine2.NEXT = 0;										
										
DiscTransTmp := DiscTrans;										
										
DiscTrans.Amount := -TotDiscAmount;										
"DiscTrans.""Discount %"" := ABS(DiscTrans.Amount / TotalAmount * 100);"										
"DiscTrans.""Entry Status"" := DiscTrans.""Entry Status""::"" "";"										
										
DiscTrans.MODIFY(TRUE);										
"posTransLine2.SETRANGE(""Tot. Disc Info Line No."",DiscTrans.""Line No."");"										
IF posTransLine2.FIND('-') THEN REPEAT										
tmpDec := posTransLine2.Amount;										
										
"GetTransDisc(posTransLine2,TRUE,0);"										
										
"posTransLine2.Amount += posTransLine2.""Total Disc. Amount"";"										
										
pTotDiscAmo := PosFunctions.RoundAmount(TotDiscAmount * posTransLine2.Amount/TotalAmount);										
"InsertTransDiscAmount(posTransLine2,pTotDiscAmo,PerDiscType.DiscType::Total,'');"										
"UpdateTotalAmtDiscPercent(posTransLine2,DiscTrans.""Discount %"");"										
										
"posTransLine2.Amount -= posTransLine2.""Total Disc. Amount"";"										
"IF MaxAmount < posTransLine2.""Total Disc. Amount"" THEN BEGIN"										
"MaxAmount := posTransLine2.""Total Disc. Amount"";"										
"MaxLineNo := posTransLine2.""Line No."";"										
END;										
IF tmpDec <> posTransLine2.Amount THEN BEGIN										
posTransLine2.CalcPrices;										
posTransLine2.MODIFY(TRUE);										
										
"GetTransDisc(posTransLine2,FALSE,PerDiscType.DiscType::Total);"										
										
END;										
"TotalRounded += posTransLine2.""Total Disc. Amount"";"										
UNTIL posTransLine2.NEXT = 0;										
										
IF TotalRounded <> TotDiscAmount THEN BEGIN										
"posTransLine2.GET(currLine.""Receipt No."",MaxLineNo);"										
										
"GetTransDisc(posTransLine2,TRUE,0);"										
"pTotDiscAmo := posTransLine2.""Total Disc. Amount"";"										
pTotDiscAmo += (TotDiscAmount - TotalRounded);										
"InsertTransDiscAmount(posTransLine2,pTotDiscAmo,PerDiscType.DiscType::Total,'');"										
										
posTransLine2.Amount -= (TotDiscAmount - TotalRounded);										
										
posTransLine2.CalcPrices;										
posTransLine2.MODIFY(TRUE);										
END;										
IF DiscTrans.Amount = 0 THEN BEGIN										
"DiscTrans.GET(DiscTrans.""Receipt No."",DiscTrans.""Line No."");"										
"DiscTrans.TRANSFERFIELDS(DiscTransTmp,FALSE);"										
DiscTrans.MODIFY;										
DiscTrans.VoidLine;										
END;										
END ELSE										
EXIT(FALSE);										
										
IF pPaymentState THEN										
"POSOfferExtUtility.ReCalcOfferSeq(PosTrans,PerDiscType.DiscType::Total)"										
ELSE										
POSOfferExtUtility.ReCalcLinePreTotal(PosTrans);										
										
"currLine.GET(currLine.""Receipt No."",currLine.""Line No."");"										
										
"EXIT(POSOfferExtUtility.TransLineDiscOfferTypeExists(currLine,PerDiscType.DiscType::Total));"										
END;										
										
PROCEDURE UpdOffer@13(VAR mmHdr@1000 : Record 99001453;VAR mmLine@1001 : Record 99001454;itemNo@1002 : Code[20];qty@1003 : Decimal;V	AR	tmp	Mi	xMa	tchNeededLine@1200070002 : TEMPORARY Record 99001504;VAR lines@1006 : Integer;VAR usedCurrLineQty@1200070000 : Decimal) : Decimal;					
VAR										
rest@1007 : Decimal;										
useQty@1008 : Decimal;										
n@1009 : Integer;										
lnTmp@1010 : Integer;										
prTmp@1011 : Decimal;										
qtyTmp@1012 : Decimal;										
itmTmp@1013 : Code[20];										
i@1014 : Integer;										
lineCount@1015 : Integer;										
done@1016 : Boolean;										
oldQty@1200070001 : Decimal;										
BEGIN										
//UpdOffer										
lines := 0;										
usedCurrLineQty := 0;										
										
"IF NOT tmpMixMatchNeededLine.GET(mmLine.""Offer No."",mmLine.""Line Group"") THEN"										
EXIT(0);										
										
"IF (tmpMixMatchNeededLine.""Line Group Type"" = tmpMixMatchNeededLine.""Line Group Type""::Range) THEN BEGIN"										
"IF (tmpMixMatchNeededLine.""Value 1"" = 0) AND (tmpMixMatchNeededLine.""Value 2"" = 0) AND (qty > 0) THEN"										
EXIT(0);										
END										
ELSE BEGIN										
"IF (tmpMixMatchNeededLine.""Value 1"" = 0) AND (qty > 0) THEN"										
EXIT(0);										
END;										
										
										
lineCount := 0;										
mmTmp.ResetList;										
n := mmMembTmp.CountList;										
WHILE n > 0 DO BEGIN										
"mmMembTmp.GetIndexList(n,lnTmp,prTmp,qtyTmp,itmTmp);"										
IF itmTmp = itemNo THEN BEGIN										
oldQty := oldQty + qtyTmp;										
"mmTmp.AddToList(lnTmp,prTmp,qtyTmp,itmTmp);"										
lineCount := lineCount + 1;										
lineList[lineCount] := n;										
END;										
n := n - 1;										
END;										
useQty := qty + oldQty;										
lastItemUpd := itemNo;										
										
"IF useQty < mmLine.""No. of Items Needed"" THEN"										
EXIT(0);										
										
"IF tmpMixMatchNeededLine.GET(mmLine.""Offer No."",mmLine.""Line Group"") AND (tmpMixMatchNeededLine.""Value 1"" <> -1) THEN BEGIN"										
rest := useQty;										
done := FALSE;										
										
"IF tmpMixMatchNeededLine.""Line Group Type"" = tmpMixMatchNeededLine.""Line Group Type""::Range THEN BEGIN"										
"IF (tmpMixMatchNeededLine.""Value 1"" <= 0) AND (tmpMixMatchNeededLine.""Value 2"" <= 0) THEN"										
done := TRUE;										
END										
ELSE BEGIN										
"IF tmpMixMatchNeededLine.""Value 1"" <= 0 THEN"										
done := TRUE;										
END;										
										
WHILE (rest > 0) AND (NOT done) DO BEGIN										
										
"IF DiffListOK(mmHdr,mmLine.""Line No."") AND ((rest - mmLine.""No. of Items Needed"") >= 0) THEN BEGIN"										
										
"rest := rest - mmLine.""No. of Items Needed"";"										
										
"IF tmpMixMatchNeededLine.""Line Group Type"" = tmpMixMatchNeededLine.""Line Group Type""::Range THEN BEGIN"										
										
"tmpMixMatchNeededLine.""Value 3"" := tmpMixMatchNeededLine.""Value 3"" - 1;"										
										
"IF (tmpMixMatchNeededLine.""Value 1"" <= 0) THEN BEGIN"										
										
IF (rest <= 0) THEN										
done := TRUE;										
										
"tmpMixMatchNeededLine.""Value 2"" := tmpMixMatchNeededLine.""Value 2"" - 1;"										
										
										
"IF (tmpMixMatchNeededLine.""Value 2"" <= 0) THEN"										
done := TRUE;										
END										
ELSE BEGIN										
"tmpMixMatchNeededLine.""Value 1"" := tmpMixMatchNeededLine.""Value 1"" - 1;"										
"tmpMixMatchNeededLine.""Value 2"" := tmpMixMatchNeededLine.""Value 2"" - 1;"										
"IF (tmpMixMatchNeededLine.""Value 1"" <= 0) AND (tmpMixMatchNeededLine.""Value 2"" <= 0) THEN"										
done := TRUE;										
END;										
END										
ELSE BEGIN										
"tmpMixMatchNeededLine.""Value 1"" := tmpMixMatchNeededLine.""Value 1"" - 1;"										
"IF (tmpMixMatchNeededLine.""Value 1"" <= 0) THEN"										
done := TRUE;										
END;										
										
tmpMixMatchNeededLine.MODIFY;										
										
lines := lines + 1;										
										
END ELSE										
done := TRUE;										
END;										
"END ELSE IF NOT DiffListOK(mmHdr,mmLine.""Line No."") THEN"										
EXIT(0)										
ELSE										
EXIT(0);										
										
IF lines > 0 THEN BEGIN										
n := mmTmp.CountList;										
FOR i := 1 TO n DO BEGIN										
"mmTmp.GetIndexList(i,lnTmp,prTmp,qtyTmp,itmTmp);"										
"mmOfferList.AddToList(lnTmp,prTmp,qtyTmp,itmTmp);"										
END;										
FOR i := 1 TO lineCount DO										
mmMembTmp.DeleteIndexList(lineList[i]);										
END;										
										
IF (rest = 0) OR (rest = useQty) THEN										
lastItemUpd := '';										
useQty := useQty - rest;										
usedCurrLineQty := useQty - oldQty;										
EXIT(useQty);										
END;										
										
PROCEDURE DiffListOK@14(VAR mmHdr@1000 : Record 99001453;lineNo@1001 : Integer) : Boolean;										
VAR										
i@1002 : Integer;										
BEGIN										
//DiffListOK										
"IF mmHdr.""Same/Diff. M&M Lines"" = mmHdr.""Same/Diff. M&M Lines""::""Different M&M Lines"" THEN BEGIN"										
FOR i := 1 TO diffCount DO										
IF diffList[i] = lineNo THEN										
EXIT(FALSE);										
diffCount := diffCount + 1;										
diffList[diffCount] := lineNo;										
lastItemUpd := '';										
END;										
										
EXIT(TRUE);										
END;										
										
PROCEDURE FindDiscountOffer@1200070004(VAR currline@1200070000 : Record 99008981);										
BEGIN										
//FindDiscountOffer										
END;										
										
PROCEDURE FindMultiBuy@1200070001(VAR currline@1200070000 : Record 99008981);										
BEGIN										
//FindMultiBuy										
END;										
										
PROCEDURE FindMixAndMatch@1200070002(VAR currline@1200070000 : Record 99008981);										
BEGIN										
//FindMixAndMatch										
END;										
										
PROCEDURE CalcDiscountOffer@1200070009(VAR currline@1200070000 : Record 99008981);										
VAR										
PeriodicDiscount@1200070002 : Record 99001453;										
PeriodicDiscountLines@1200070001 : Record 99001454;										
posTransLine@1200070003 : Record 99008981;										
tmpPeriodicDiscountLines@1200070010 : TEMPORARY Record 99001454;										
InfoUpd@1200070005 : Boolean;										
discDiff@1200070008 : Decimal;										
discDiffPr@1200070009 : Decimal;										
prevLineDisc@1200070006 : Decimal;										
prevInfoDisc@1200070007 : Decimal;										
CheckMM@10012001 : Boolean;										
MMGRoup@10012000 : Code[20];										
PerDiscPer@1100409002 : Decimal;										
PerDiscAmo@1100409001 : Decimal;										
PerDiscType@1100409000 : Record 99008943;										
DiscOfferOk@1100409003 : Boolean;										
TotAmount@1100409004 : Decimal;										
DealPriceDisc@1100409005 : Decimal;										
lokOfferPosCalc@1100409006 : Record 99001561;										
lQty@1100409008 : Decimal;										
lDiscQty@1100409007 : Decimal;										
DiscAmount@1100409009 : Decimal;										
ItemUnitofMeasure@1100409010 : Record 5404;										
CurrCountLimit@1100409011 : Integer;										
CurrAmountLimit@1100409012 : Decimal;										
MaxDiscAmount@1100409013 : Decimal;										
SkipOffer@1100409014 : Boolean;										
BEGIN										
//CalcDiscountOffer										
"PeriodicDiscount.GET(TmpPeriodicDiscount.""No."");"										
tmpPeriodicDiscountLines.DELETEALL;										
										
"IF TmpPeriodicDiscount.""Discount Tracking No."" <> '' THEN BEGIN"										
"IF TmpPeriodicDiscount.""Block Total Discount Offer"" THEN"										
"CurrAmountLimit := TmpPeriodicDiscount.""Amount to Trigger"" -"										
"PosTransMemberTrackingAmount(currline.""Receipt No."",TmpPeriodicDiscount.""Discount Tracking No."",TmpPeriodicDiscount.""No."")"										
ELSE										
"CurrCountLimit := TmpPeriodicDiscount.""No. of Times Applicable"" -"										
"PosTransMemberTrackingCount(currline.""Receipt No."",TmpPeriodicDiscount.""Discount Tracking No."", TmpPeriodicDiscount.""No."");"										
END;										
"MaxDiscAmount := PeriodicDiscount.""Maximum Discount Amount"";"										
SkipOffer := FALSE;										
"IF (PeriodicDiscount.""Amount to Trigger"" <> 0) THEN BEGIN"										
"PosTrans.CALCFIELDS(""Gross Amount"",""Line Discount"",""Income/Exp. Amount"");"										
"TotAmount := PosTrans.""Gross Amount"" + PosTrans.""Line Discount"" + PosTrans.""Income/Exp. Amount"";"										
"IF TotAmount < PeriodicDiscount.""Amount to Trigger"" THEN"										
SkipOffer := TRUE;										
END;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::""Disc. Offer"");"										
"OfferPosCalc.SETRANGE(""Group No."",TmpPeriodicDiscount.""No."");"										
IF OfferPosCalc.FIND('-') THEN REPEAT										
"posTransLine.GET(currline.""Receipt No."",OfferPosCalc.""Trans. Line No."");"										
"GetPerDiscLine(PerDiscType,posTransLine);"										
"//LS7.1-05 IF posTransLine.""System-Exclude from Offers"" THEN BEGIN"										
"IF posTransLine.""System-Exclude from Offers"" OR posTransLine.""System-Block Periodic Discount"" THEN BEGIN //LS7.1-05"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",'');"										
posTransLine.CalcPrices;										
END;										
"IF posTransLine.""Entry Status"" = posTransLine.""Entry Status""::"" "" THEN BEGIN"										
PosFunctions.IncTrackingInstanceID;										
"IF PerDiscType.""Periodic Disc. Group"" <> '' THEN BEGIN"										
InfoUpd := TRUE;										
"CheckMM := PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Mix&Match"";"										
"MMGRoup := PerDiscType.""Periodic Disc. Group"";"										
"IF (PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Disc. Offer"") AND"										
"(PerDiscType.""Periodic Disc. Group"" = PeriodicDiscount.""No."")"										
THEN BEGIN										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END										
ELSE BEGIN										
IF Priority(posTransLine) > TmpPeriodicDiscount.Priority THEN BEGIN										
InsertTmpOfferFromSpecLine(posTransLine);										
"TmpPeriodicDiscount.GET(PeriodicDiscount.""No."");"										
										
"IF (PerDiscType.""Periodic Disc. Type"" <> PerDiscType.""Periodic Disc. Type""::"" "") OR"										
"(PerDiscType.""Periodic Disc. Group"" <> '') THEN BEGIN"										
"PerDiscType.""Periodic Disc. Type"" := PerDiscType.""Periodic Disc. Type""::"" "";"										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END;										
END										
ELSE BEGIN										
"lQty := ROUND(posTransLine.Quantity,0.001);"										
"lDiscQty := ROUND(posTransLine.""Quantity Discounted"",0.001);"										
IF lQty > lDiscQty THEN										
SplitLine(posTransLine)										
ELSE										
InfoUpd := FALSE;										
END;										
END;										
IF InfoUpd THEN BEGIN										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
"IF CheckMM AND (PerDiscType.""Periodic Disc. Group"" = '') THEN"										
"AddOtherOffersFromMMRelease(posTransLine.""Receipt No."",posTransLine.""Line No."",MMGRoup);"										
END;										
										
"IF (PerDiscType.""Periodic Disc. Group"" = '') AND"										
"(TrackingCountLimitOk(TmpPeriodicDiscount,CurrCountLimit,0)) AND"										
"(TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,0))"										
THEN BEGIN										
IF SkipOffer THEN BEGIN										
"InsertTransDiscPerType(posTransLine,FALSE,0,TRUE,'');"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",'');"										
"posTransLine.""Quantity Discounted"" := 0;"										
"posTransLine.""Discount Triggered"" := FALSE;"										
"posTransLine.""InfoCode Disc. Disable"" := FALSE;"										
posTransLine.CalcPrices;										
posTransLine.MODIFY(TRUE);										
END ELSE BEGIN										
"PeriodicDiscountLines.GET(PeriodicDiscount.""No."",OfferPosCalc.""Offer Line No."");"										
"IF PeriodicDiscountLines.""Deal Price/Disc. %"" <> 0 THEN"										
"DealPriceDisc := PeriodicDiscountLines.""Deal Price/Disc. %"""										
"ELSE IF PeriodicDiscountLines.""Discount Amount Including VAT"" <> 0 THEN BEGIN"										
"DiscAmount := PeriodicDiscountLines.""Discount Amount Including VAT"";"										
"IF Store.""Currency Code"" <> PeriodicDiscount.""Currency Code"" THEN"										
"DiscAmount := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"",PeriodicDiscount.""Currency Code"","										
"Store.""Currency Code"",DiscAmount);"										
										
"IF (posTransLine.""Unit of Measure"" <> '') AND"										
"(ItemUnitofMeasure.GET(posTransLine.Number,posTransLine.""Unit of Measure""))"										
THEN										
"DiscAmount :=  DiscAmount * ItemUnitofMeasure.""Qty. per Unit of Measure"";"										
										
IF posTransLine.Price = 0 THEN										
DealPriceDisc := 0										
ELSE										
DealPriceDisc := DiscAmount * 100 / posTransLine.Price;										
END ELSE										
DealPriceDisc := 0;										
"IF NOT tmpPeriodicDiscountLines.GET(posTransLine.Number,ROUND(DealPriceDisc * 1000,1)) THEN BEGIN"										
tmpPeriodicDiscountLines.INIT;										
"tmpPeriodicDiscountLines.""Offer No."" := posTransLine.Number;"										
"tmpPeriodicDiscountLines.""Line No."" := ROUND(DealPriceDisc * 1000,1);"										
"tmpPeriodicDiscountLines.""Deal Price/Disc. %"" := DealPriceDisc;"										
"tmpPeriodicDiscountLines.""No. of Items Needed"" := posTransLine.""Line No."";"										
tmpPeriodicDiscountLines.INSERT;										
END;										
										
"InsertTransDiscPerType(posTransLine,TRUE,PerDiscType.""Periodic Disc. Type""::""Disc. Offer"",TRUE,PeriodicDiscount.""No."");"										
"posTransLine.""Discount Triggered"" := TRUE;"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
"posTransLine.""Quantity Discounted"" := 0;"										
"GetTransDisc(posTransLine,TRUE,0);"										
"prevLineDisc := posTransLine.""Line Disc. %"";"										
"prevInfoDisc := posTransLine.""InfoCode Disc. %"";"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Line,'');"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::InfoCode,'');"										
"posTransLine.""InfoCode Disc. Disable"" := TRUE;"										
"posTransLine.""Customer Qty Used"" := 0;"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Customer,'');"										
										
lQty := posTransLine.Quantity;										
"IF NOT TrackingCountLimitOk(TmpPeriodicDiscount,CurrCountLimit,ROUND(lQty,1.0,'>')) THEN"										
lQty := CurrCountLimit;										
"posTransLine.AddQtyDisc(lQty,DealPriceDisc,PeriodicDiscount.""No."");"										
IF MemberTrackingCountLimit(TmpPeriodicDiscount) THEN										
"CurrCountLimit := CurrCountLimit - ROUND(lQty,1.0,'>');"										
										
posTransLine.CalcPrices;										
										
IF (MaxDiscAmount <> 0) AND										
"((tmpPeriodicDiscountLines.""Discount Amount"" + posTransLine.""Discount Amount"") > MaxDiscAmount)"										
THEN BEGIN										
"PerDiscPer := (MaxDiscAmount - tmpPeriodicDiscountLines.""Discount Amount"")  /"										
(posTransLine.Price * posTransLine.Quantity) * 100;										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
END;										
"IF NOT TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,posTransLine.""Discount Amount"") THEN BEGIN"										
PerDiscPer := CurrAmountLimit / (posTransLine.Price * posTransLine.Quantity) * 100;										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
END;										
										
"InsertTransDiscAmount(posTransLine,posTransLine.""Discount Amount"","										
"PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
										
"tmpPeriodicDiscountLines.""Standard Price Including VAT"" += posTransLine.Price * lQty;"										
"tmpPeriodicDiscountLines.""Discount Amount"" += posTransLine.""Discount Amount"";"										
tmpPeriodicDiscountLines.MODIFY;										
"posTransLine.""InfoCode Disc. Disable"" := PeriodicDiscount.""Block Infocode Discount"";"										
"IF (prevLineDisc <> 0) OR ((NOT posTransLine.""InfoCode Disc. Disable"") AND (prevInfoDisc <> 0)) THEN BEGIN"										
"InsertTransDiscPercent(posTransLine,prevLineDisc,PerDiscType.DiscType::Line,'');"										
"posTransLine.VALIDATE(""Item Disc. Group"");"										
END;										
										
posTransLine.MODIFY(TRUE);										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
IF MemberTrackingAmountLimit(TmpPeriodicDiscount) THEN										
"CurrAmountLimit := CurrAmountLimit - posTransLine.""Periodic Discount Amount"";"										
END;										
END;										
END;										
UNTIL OfferPosCalc.NEXT = 0;										
										
IF tmpPeriodicDiscountLines.FIND('-') THEN REPEAT										
"discDiff := ROUND(tmpPeriodicDiscountLines.""Standard Price Including VAT"" * tmpPeriodicDiscountLines.""Deal Price/Disc. %"""										
"/ 100,PosFuncProfile.""Amount Rounding to"") - tmpPeriodicDiscountLines.""Discount Amount"";"										
"IF (discDiff <> 0) AND (TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,0)) AND"										
((MaxDiscAmount = 0) OR										
"((MaxDiscAmount <> 0) AND ((tmpPeriodicDiscountLines.""Discount Amount"" + discDiff) < MaxDiscAmount)))"										
THEN BEGIN										
"IF NOT TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,discDiff) THEN"										
discDiff := CurrAmountLimit;										
"posTransLine.GET(currline.""Receipt No."",tmpPeriodicDiscountLines.""No. of Items Needed"");"										
discDiffPr := (discDiff / (posTransLine.Price * posTransLine.Quantity - discDiff)) * 100;										
"GetTransDisc(posTransLine,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscPer := posTransLine.""Periodic Disc. %"" + discDiffPr;"										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
"GetTransDisc(posTransLine,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscAmo := posTransLine.""Periodic Discount Amount"" + discDiff;"										
"InsertTransDiscAmount(posTransLine,PerDiscAmo,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.MODIFY(TRUE);										
IF MemberTrackingAmountLimit(TmpPeriodicDiscount) THEN										
CurrAmountLimit := CurrAmountLimit - discDiff;										
END;										
UNTIL tmpPeriodicDiscountLines.NEXT = 0;										
										
"currline.GET(currline.""Receipt No."",currline.""Line No."");"										
END;										
										
PROCEDURE CalcMultiBuy@1200070026(VAR currline@1200070000 : Record 99008981);										
VAR										
PeriodicDiscount@1200070005 : Record 99001453;										
MultibuyLine@1200070006 : Record 99001505;										
posTransLine@1200070001 : Record 99008981;										
ItemUnitofMeasure@1200070007 : Record 5404;										
tmpDiscountValues@1200070002 : TEMPORARY Record 18;										
totQtyDisc@1200070003 : Decimal;										
TotQtyForMultibuyline@1200070004 : Decimal;										
tmpDec@1200070009 : Decimal;										
prevLineDisc@1200070010 : Decimal;										
prevInfoDisc@1200070011 : Decimal;										
discDiffPr@1200070013 : Decimal;										
InfoUpd@1200070008 : Boolean;										
CheckMM@10012000 : Boolean;										
MMGRoup@10012001 : Code[20];										
PerDiscPer@1100409002 : Decimal;										
PerDiscAmo@1100409001 : Decimal;										
PerDiscType@1100409000 : Record 99008943;										
lQty@1100409004 : Decimal;										
lDiscQty@1100409003 : Decimal;										
Amount@1100409005 : Decimal;										
OfferPosCalcTemp@1100409006 : TEMPORARY Record 99001561;										
OfferPosCalcTemp2@1100409007 : TEMPORARY Record 99001561;										
BasePosTransLine@1100409008 : Record 99008981;										
CurrCountLimit@1100409009 : Integer;										
CurrAmountLimit@1100409010 : Decimal;										
MaxDiscAmount@1100409011 : Decimal;										
DiscAmountPerSet@1100409012 : Decimal;										
BEGIN										
//CalcMultiBuy										
"PeriodicDiscount.GET(TmpPeriodicDiscount.""No."");"										
"IF TmpPeriodicDiscount.""Discount Tracking No."" <> '' THEN BEGIN"										
"IF TmpPeriodicDiscount.""Block Total Discount Offer"" THEN"										
"CurrAmountLimit := TmpPeriodicDiscount.""Amount to Trigger"" -"										
"PosTransMemberTrackingAmount(currline.""Receipt No."",TmpPeriodicDiscount.""Discount Tracking No."",TmpPeriodicDiscount.""No."")"										
ELSE										
"CurrCountLimit := TmpPeriodicDiscount.""No. of Times Applicable"" -"										
"PosTransMemberTrackingCount(currline.""Receipt No."",TmpPeriodicDiscount.""Discount Tracking No."", TmpPeriodicDiscount.""No."");"										
END;										
"MaxDiscAmount := PeriodicDiscount.""Maximum Discount Amount"";"										
										
"OfferPosCalc.SETCURRENTKEY(""Receipt No."",""Periodic Disc. Type"",""Group No."",""Offer Line No."");"										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::Multibuy);"										
"OfferPosCalc.SETRANGE(""Group No."",TmpPeriodicDiscount.""No."");"										
IF OfferPosCalc.FIND('-') THEN REPEAT										
"OfferPosCalc.SETRANGE(""Offer Line No."",OfferPosCalc.""Offer Line No."");"										
OfferPosCalcTemp.RESET;										
OfferPosCalcTemp.DELETEALL;										
REPEAT										
OfferPosCalcTemp.INIT;										
OfferPosCalcTemp := OfferPosCalc;										
OfferPosCalcTemp.INSERT;										
UNTIL  OfferPosCalc.NEXT = 0;										
										
OfferPosCalcTemp.RESET;										
WHILE OfferPosCalcTemp.FIND('-') DO BEGIN										
totQtyDisc := 0;										
TotQtyForMultibuyline := 0;										
										
CLEAR(tmpDiscountValues);										
OfferPosCalcTemp2.RESET;										
OfferPosCalcTemp2.DELETEALL;										
"BasePosTransLine.GET(currline.""Receipt No."",OfferPosCalcTemp.""Trans. Line No."");"										
PosFunctions.IncTrackingInstanceID;										
REPEAT										
"posTransLine.GET(currline.""Receipt No."",OfferPosCalcTemp.""Trans. Line No."");"										
"IF (posTransLine.""Entry Type"" = BasePosTransLine.""Entry Type"") AND (posTransLine.Number = BasePosTransLine.Number) THEN BEGI"	N									
OfferPosCalcTemp2.INIT;										
OfferPosCalcTemp2 := OfferPosCalcTemp;										
OfferPosCalcTemp2.INSERT;										
OfferPosCalcTemp.DELETE;										
"GetPerDiscLine(PerDiscType,posTransLine);"										
										
"IF posTransLine.""Entry Status"" = posTransLine.""Entry Status""::"" "" THEN BEGIN"										
"IF PerDiscType.""Periodic Disc. Group"" <> '' THEN BEGIN"										
InfoUpd := TRUE;										
"CheckMM := PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Mix&Match"";"										
"MMGRoup := PerDiscType.""Periodic Disc. Group"";"										
"IF (PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::Multibuy) AND"										
"(PerDiscType.""Periodic Disc. Group"" = PeriodicDiscount.""No."") THEN BEGIN"										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END										
ELSE BEGIN										
IF Priority(posTransLine) > TmpPeriodicDiscount.Priority THEN BEGIN										
InsertTmpOfferFromSpecLine(posTransLine);										
"TmpPeriodicDiscount.GET(PeriodicDiscount.""No."");"										
"IF (PerDiscType.""Periodic Disc. Type"" <> PerDiscType.""Periodic Disc. Type""::"" "") OR"										
"(PerDiscType.""Periodic Disc. Group"" <> '') THEN BEGIN"										
"PerDiscType.""Periodic Disc. Type"" := PerDiscType.""Periodic Disc. Type""::"" "";"										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END;										
END										
ELSE BEGIN										
"lQty := ROUND(posTransLine.Quantity,0.001);"										
"lDiscQty := ROUND(posTransLine.""Quantity Discounted"",0.001);"										
IF lQty > lDiscQty THEN										
SplitLine(posTransLine)										
ELSE										
InfoUpd := FALSE;										
END;										
END;										
IF InfoUpd THEN BEGIN										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
										
"IF CheckMM AND (PerDiscType.""Periodic Disc. Group"" = '') THEN"										
"AddOtherOffersFromMMRelease(posTransLine.""Receipt No."",posTransLine.""Line No."",MMGRoup);"										
END;										
										
"IF PerDiscType.""Periodic Disc. Group"" = '' THEN BEGIN"										
"IF (posTransLine.""Unit of Measure"" <> '') AND"										
"(ItemUnitofMeasure.GET(posTransLine.Number,posTransLine.""Unit of Measure"")) THEN"										
"TotQtyForMultibuyline += posTransLine.Quantity * ItemUnitofMeasure.""Qty. per Unit of Measure"""										
ELSE										
TotQtyForMultibuyline += posTransLine.Quantity;										
"totQtyDisc := totQtyDisc + posTransLine.""Quantity Discounted"";"										
"tmpDiscountValues.""Budgeted Amount"" += posTransLine.Price * posTransLine.Quantity;"										
"IF tmpDiscountValues.""Last Statement No."" = 0 THEN"										
"tmpDiscountValues.""Last Statement No."" := posTransLine.""Line No."";"										
END;										
END ELSE BEGIN										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
END;										
UNTIL OfferPosCalcTemp.NEXT = 0;										
										
MultibuyLine.INIT;										
"MultibuyLine.Group := PeriodicDiscount.""No."";"										
"IF SelectMultibuy(MultibuyLine,TotQtyForMultibuyline) AND"										
"(TrackingCountLimitOk(TmpPeriodicDiscount,CurrCountLimit,0)) AND"										
"(TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,0))"										
THEN BEGIN										
IF MemberTrackingCountLimit(TmpPeriodicDiscount) THEN										
CurrCountLimit := CurrCountLimit - 1;										
"IF PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Discount %"" THEN"										
"tmpDiscountValues.""Budgeted Amount"" :="										
"ROUND(tmpDiscountValues.""Budgeted Amount"" * MultibuyLine.""Unit Price/Disc. %/Disc.Amount"" / 100,"										
"PosFuncProfile.""Amount Rounding to"");"										
										
DiscAmountPerSet := 0;										
IF OfferPosCalcTemp2.FIND('-') THEN REPEAT										
"posTransLine.GET(currline.""Receipt No."",OfferPosCalcTemp2.""Trans. Line No."");"										
"GetPerDiscLine(PerDiscType,posTransLine);"										
"IF (PerDiscType.""Periodic Disc. Group"" = '') AND"										
"(posTransLine.""Entry Status"" = posTransLine.""Entry Status""::"" "") THEN BEGIN"										
"IF (PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Deal Price"") OR"										
"(PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Discount Amount"")"										
THEN BEGIN										
"Amount := MultibuyLine.""Unit Price/Disc. %/Disc.Amount"";"										
"IF Store.""Currency Code"" <> PeriodicDiscount.""Currency Code"" THEN"										
"Amount := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"",PeriodicDiscount.""Currency Code"","										
"Store.""Currency Code"",Amount);"										
										
"IF (posTransLine.""Unit of Measure"" <> '') AND"										
"(ItemUnitofMeasure.GET(posTransLine.Number,posTransLine.""Unit of Measure""))"										
THEN										
"Amount := Amount *  ItemUnitofMeasure.""Qty. per Unit of Measure"";"										
										
"IF PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Deal Price"" THEN"										
Amount := posTransLine.Price - Amount;										
										
IF posTransLine.Price = 0 THEN										
tmpDec := 0										
ELSE										
tmpDec := Amount * 100 / posTransLine.Price;										
END ELSE										
"tmpDec := MultibuyLine.""Unit Price/Disc. %/Disc.Amount"";"										
										
"posTransLine.""Customer Qty Used"" := 0;"										
"GetTransDisc(posTransLine,TRUE,0);"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Customer,'');"										
"posTransLine.""Quantity Discounted"" := 0;"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",'');"										
"prevLineDisc := posTransLine.""Line Disc. %"";"										
"prevInfoDisc := posTransLine.""InfoCode Disc. %"";"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Line,'');"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::InfoCode,'');"										
										
"IF PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Discount %"" THEN"										
"posTransLine.""InfoCode Disc. Disable"" := TRUE"										
ELSE										
"posTransLine.""InfoCode Disc. Disable"" := PeriodicDiscount.""Block Infocode Discount"";"										
										
"posTransLine.AddQtyDisc(posTransLine.Quantity,tmpDec,PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
IF (MaxDiscAmount <> 0) AND										
"((DiscAmountPerSet + posTransLine.""Discount Amount"") > MaxDiscAmount)"										
THEN BEGIN										
"IF PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Discount %"" THEN"										
"tmpDiscountValues.""Budgeted Amount"" := tmpDiscountValues.""Budgeted Amount"" -"										
"(posTransLine.""Discount Amount"" - (MaxDiscAmount - DiscAmountPerSet));"										
PerDiscPer := (MaxDiscAmount - DiscAmountPerSet) / (posTransLine.Price * posTransLine.Quantity) * 100;										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
END;										
"IF NOT TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,posTransLine.""Discount Amount"") THEN BEGIN"										
"IF PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Discount %"" THEN"										
"tmpDiscountValues.""Budgeted Amount"" := tmpDiscountValues.""Budgeted Amount"" -"										
"(posTransLine.""Discount Amount"" - CurrAmountLimit);"										
PerDiscPer := CurrAmountLimit / (posTransLine.Price * posTransLine.Quantity) * 100;										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
END;										
"InsertTransDiscAmount(posTransLine,posTransLine.""Discount Amount"","										
"PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
										
"IF PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Discount %"" THEN BEGIN"										
"tmpDiscountValues.""Budgeted Amount"" -= posTransLine.""Discount Amount"";"										
"posTransLine.""InfoCode Disc. Disable"" := PeriodicDiscount.""Block Infocode Discount"";"										
"IF (prevLineDisc <> 0) OR ((NOT posTransLine.""InfoCode Disc. Disable"") AND (prevInfoDisc <> 0)) THEN BEGIN"										
"InsertTransDiscPercent(posTransLine,prevLineDisc,PerDiscType.DiscType::Line,'');"										
"posTransLine.VALIDATE(""Item Disc. Group"");"										
END;										
END;										
										
"InsertTransDiscPerType(posTransLine,TRUE,PerDiscType.""Periodic Disc. Type""::Multibuy,TRUE,PeriodicDiscount.""No."");"										
										
"posTransLine.""Discount Triggered"" := TRUE;"										
posTransLine.MODIFY(TRUE);										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
"DiscAmountPerSet := DiscAmountPerSet + posTransLine.""Periodic Discount Amount"";"										
IF MemberTrackingAmountLimit(TmpPeriodicDiscount) THEN										
"CurrAmountLimit := CurrAmountLimit - posTransLine.""Periodic Discount Amount"";"										
END;										
UNTIL OfferPosCalcTemp2.NEXT = 0;										
										
"IF (PeriodicDiscount.""Discount Type"" = PeriodicDiscount.""Discount Type""::""Discount %"") AND"										
"(tmpDiscountValues.""Budgeted Amount"" <> 0) AND (TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,0)) AND"										
((MaxDiscAmount = 0) OR ((MaxDiscAmount <> 0) AND ((DiscAmountPerSet) < MaxDiscAmount)))										
THEN BEGIN										
"IF NOT TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,tmpDiscountValues.""Budgeted Amount"") THEN"										
"tmpDiscountValues.""Budgeted Amount"" := CurrAmountLimit;"										
"posTransLine.GET(currline.""Receipt No."",tmpDiscountValues.""Last Statement No."");"										
"discDiffPr := (tmpDiscountValues.""Budgeted Amount"" /"										
"(posTransLine.Price * posTransLine.Quantity - tmpDiscountValues.""Budgeted Amount"")) * 100;"										
										
"GetTransDisc(posTransLine,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscPer := posTransLine.""Periodic Disc. %"" + discDiffPr;"										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
"GetTransDisc(posTransLine,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscAmo := posTransLine.""Periodic Discount Amount"" + tmpDiscountValues.""Budgeted Amount"";"										
"InsertTransDiscAmount(posTransLine,PerDiscAmo,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.MODIFY(TRUE);										
IF MemberTrackingAmountLimit(TmpPeriodicDiscount) THEN										
"CurrAmountLimit := CurrAmountLimit - tmpDiscountValues.""Budgeted Amount"";"										
END;										
END ELSE IF totQtyDisc <> 0 THEN BEGIN										
										
IF OfferPosCalcTemp2.FIND('-') THEN REPEAT										
"posTransLine.GET(currline.""Receipt No."",OfferPosCalcTemp2.""Trans. Line No."");"										
"GetPerDiscLine(PerDiscType,posTransLine);"										
"IF (PerDiscType.""Periodic Disc. Group"" = '') OR"										
"(PerDiscType.""Periodic Disc. Group"" = PeriodicDiscount.""No."") THEN BEGIN"										
"InsertTransDiscPerType(posTransLine,FALSE,0,TRUE,'');"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",'');"										
"posTransLine.""Quantity Discounted"" := 0;"										
"posTransLine.""Discount Triggered"" := FALSE;"										
"posTransLine.""InfoCode Disc. Disable"" := FALSE;"										
posTransLine.CalcPrices;										
posTransLine.MODIFY(TRUE);										
END;										
UNTIL OfferPosCalcTemp2.NEXT = 0;										
END;										
END;										
OfferPosCalc.FIND('+');										
"OfferPosCalc.SETRANGE(""Offer Line No."");"										
UNTIL OfferPosCalc.NEXT = 0;										
"currline.GET(currline.""Receipt No."",currline.""Line No."");"										
END;										
										
PROCEDURE CalcMixMatch@1200070031(VAR currLine@1000 : Record 99008981);										
VAR										
PeriodicDiscount@1001 : Record 99001453;										
PeriodicDiscountLines@1002 : Record 99001454;										
PeriodicDiscountLines2@1003 : Record 99001454;										
posTransLine@1004 : Record 99008981;										
posMixMatchEntry@1005 : Record 99008983;										
tmpLine@1200070002 : Record 99008981;										
tmpNewLine@1200070001 : Record 99008981;										
tmpMixMatchNeededLine@1200070003 : TEMPORARY Record 99001504;										
tmpLineNo@1006 : Integer;										
tmpPrice@1007 : Decimal;										
mixMatchOK@1008 : Boolean;										
currLineNo@1009 : Integer;										
qty@1010 : Decimal;										
UsedCurrLineQty@1011 : Decimal;										
useQty@1012 : Decimal;										
itemNo@1014 : Code[20];										
noTimes@1015 : Integer;										
noTimesUndef@1016 : Boolean;										
mmCounter@1017 : Integer;										
noLinesLeft@1018 : Integer;										
yesMandLines@1019 : Integer;										
noMandLines@1020 : Integer;										
linesMoved@1021 : Integer;										
mustCompress@1022 : Boolean;										
InfoUpd@1200070000 : Boolean;										
"""Mix&MarchOk""@1100409001 : Boolean;"										
TotAmount@1100409000 : Decimal;										
PerDiscType@1100409002 : Record 99008943;										
lQty@1100409004 : Decimal;										
lDiscQty@1100409003 : Decimal;										
CurrAmountLimit@1100409005 : Decimal;										
BaseOffset@1100409006 : Decimal;										
BEGIN										
//CalcMixMatch										
"Store.GET(currLine.""Store No."");"										
"PeriodicDiscount.GET(TmpPeriodicDiscount.""No."");"										
"PeriodicDiscount.CALCFIELDS(""No. of Lines to Trigger"");"										
										
"IF NOT(PeriodicDiscount.""No. of Lines to Trigger"" <= 0) THEN BEGIN"										
mixMatchOK := FALSE;										
mustCompress := FALSE;										
mmMembList.ResetList;										
"OfferPosCalc.SETRANGE(""Receipt No."",currLine.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::""Mix&Match"");"										
"OfferPosCalc.SETRANGE(""Group No."",PeriodicDiscount.""No."");"										
IF OfferPosCalc.FIND('-') THEN REPEAT										
"posTransLine.GET(currLine.""Receipt No."",OfferPosCalc.""Trans. Line No."");"										
"GetPerDiscLine(PerDiscType,posTransLine);"										
"IF posTransLine.""Entry Status"" = posTransLine.""Entry Status""::"" "" THEN BEGIN"										
"IF PerDiscType.""Periodic Disc. Group"" <> '' THEN BEGIN"										
InfoUpd := TRUE;										
"IF (PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Mix&Match"") AND"										
"(PerDiscType.""Periodic Disc. Group"" = PeriodicDiscount.""No."") THEN BEGIN"										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END										
ELSE BEGIN										
IF Priority(posTransLine) > TmpPeriodicDiscount.Priority THEN BEGIN										
InsertTmpOfferFromSpecLine(posTransLine);										
"TmpPeriodicDiscount.GET(PeriodicDiscount.""No."");"										
"IF (PerDiscType.""Periodic Disc. Type"" <> PerDiscType.""Periodic Disc. Type""::"" "") OR"										
"(PerDiscType.""Periodic Disc. Group"" <> '') THEN BEGIN"										
"PerDiscType.""Periodic Disc. Type"" := PerDiscType.""Periodic Disc. Type""::"" "";"										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END;										
END										
ELSE BEGIN										
"lQty := ROUND(posTransLine.Quantity,0.001);"										
"lDiscQty := ROUND(posTransLine.""Quantity Discounted"",0.001);"										
IF lQty > lDiscQty THEN										
SplitLine(posTransLine)										
ELSE										
InfoUpd := FALSE;										
END;										
END;										
IF InfoUpd THEN BEGIN										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
END;										
										
"IF PerDiscType.""Periodic Disc. Group"" = '' THEN BEGIN"										
"posTransLine.""Mix & Match Line No."" := OfferPosCalc.""Offer Line No."";"										
"PeriodicDiscountLines2.GET(PeriodicDiscount.""No."",posTransLine.""Mix & Match Line No."");"										
{//LS7.1-07										
"mmMembList.AddToList(posTransLine.""Line No."",posTransLine.Price * PeriodicDiscountLines2.""No. of Items Needed"","										
"posTransLine.Quantity,FORMAT(PeriodicDiscountLines2.""Line No.""));"										
}//LS7.1-07										
//LS7.1-07 -										
"IF posTransLine.""System-Unchangable Offer"" THEN"										
BaseOffset := 1000000000										
ELSE										
BaseOffset := 0;										
"mmMembList.AddToList(posTransLine.""Line No."",BaseOffset + posTransLine.Price * PeriodicDiscountLines2.""No. of Items Needed"	""","									
"posTransLine.Quantity,FORMAT(PeriodicDiscountLines2.""Line No.""));"										
//LS7.1-07 +										
IF posTransLine.Quantity < 0 THEN										
mustCompress := TRUE;										
										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",'');"										
"posTransLine.""Quantity Discounted"" := 0;"										
"posTransLine.""Discount Triggered"" := FALSE;"										
"posTransLine.""Customer Qty Used"" := 0;"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Customer,'');"										
"posTransLine.""InfoCode Disc. Disable"" := FALSE;"										
posTransLine.CalcPrices;										
posTransLine.MODIFY(TRUE);										
END;										
END ELSE BEGIN										
"posMixMatchEntry.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posMixMatchEntry.SETRANGE(""Line No."",posTransLine.""Line No."");"										
posMixMatchEntry.DELETEALL;										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
										
"IF PerDiscType.""Periodic Disc. Group"" = '' THEN BEGIN"										
"posMixMatchEntry.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posMixMatchEntry.SETRANGE(""Line No."",posTransLine.""Line No."");"										
posMixMatchEntry.DELETEALL;										
"IF posTransLine.""Disc. Info Line No."" <> 0 THEN BEGIN"										
"tmpLine.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"tmpLine.SETRANGE(""Disc. Info Line No."",posTransLine.""Disc. Info Line No."");"										
IF tmpLine.FIND('-') THEN REPEAT										
"tmpNewLine.GET(tmpLine.""Receipt No."",tmpLine.""Line No."");"										
"tmpNewLine.""Disc. Info Line No."" := 0;"										
"tmpNewLine.""Discount Amt. for Printing"" := 0;"										
tmpNewLine.MODIFY(TRUE);										
UNTIL tmpLine.NEXT = 0;										
"tmpLine.GET(posTransLine.""Receipt No."",posTransLine.""Disc. Info Line No."");"										
tmpLine.DELETE(TRUE);										
"posTransLine.GET(posTransLine.""Receipt No."",posTransLine.""Line No."");"										
END;										
END;										
										
UNTIL OfferPosCalc.NEXT = 0;										
										
IF mustCompress THEN										
mmMembList.Compress;										
										
mmOfferList.ResetList;										
mmMembTmp.ResetList;										
"noLinesLeft := PeriodicDiscount.""No. of Lines to Trigger"";"										
"InitNeededLines(PeriodicDiscount.""No."",tmpMixMatchNeededLine,currLine,TRUE);"										
"noTimes := PeriodicDiscount.""No. of Times Applicable"";"										
noTimesUndef := (noTimes = 0);										
diffCount := 0;										
mmCounter := 0;										
"""Mix&MarchOk"" := TRUE;"										
"IF (PeriodicDiscount.""Amount to Trigger"" <> 0) THEN BEGIN"										
"PosTrans.CALCFIELDS(""Gross Amount"",""Line Discount"",""Income/Exp. Amount"");"										
"TotAmount := PosTrans.""Gross Amount"" + PosTrans.""Line Discount"" + PosTrans.""Income/Exp. Amount"";"										
"IF TotAmount < PeriodicDiscount.""Amount to Trigger"" THEN"										
"""Mix&MarchOk"" := FALSE;"										
END;										
"IF ""Mix&MarchOk"" THEN BEGIN"										
WHILE (mmMembList.CountList > 0) AND ((noTimes > 0) OR (noTimesUndef)) DO BEGIN										
"mmMembList.GetLargestList(tmpLineNo,tmpPrice,qty);"										
"qty := ROUND(qty,0.001);"										
"posTransLine.GET(currLine.""Receipt No."",tmpLineNo);"										
"PeriodicDiscountLines2.GET(PeriodicDiscount.""No."",posTransLine.""Mix & Match Line No."");"										
"useQty := UpdOffer(PeriodicDiscount,PeriodicDiscountLines2,FORMAT(PeriodicDiscountLines2.""Line No.""),qty,"										
"tmpMixMatchNeededLine,linesMoved,UsedCurrLineQty);"										
IF (qty - UsedCurrLineQty) > 0 THEN										
"mmMembTmp.AddToList(tmpLineNo,tmpPrice,(qty - UsedCurrLineQty),FORMAT(PeriodicDiscountLines2.""Line No.""));"										
										
IF useQty > 0 THEN BEGIN										
"mmOfferList.AddToList(tmpLineNo,tmpPrice,UsedCurrLineQty,FORMAT(PeriodicDiscountLines2.""Line No.""));"										
noLinesLeft := noLinesLeft - linesMoved;										
IF (noLinesLeft <= 0) THEN BEGIN										
IF CheckToRegister(tmpMixMatchNeededLine) THEN BEGIN										
mmCounter := mmCounter + 1;										
"IF RegisterMixMatch(PeriodicDiscount,PeriodicDiscountLines,currLine,mmCounter,TRUE,CurrAmountLimit) THEN"										
mixMatchOK := TRUE;										
noTimes := noTimes - 1;										
mmMembList.CopyList(mmMembTmp);										
mmOfferList.ResetList;										
mmMembTmp.ResetList;										
"noLinesLeft := PeriodicDiscount.""No. of Lines to Trigger"";"										
"InitNeededLines(PeriodicDiscount.""No."",tmpMixMatchNeededLine,currLine,FALSE);"										
diffCount := 0;										
END;										
END;										
END;										
END;										
END;										
"currLine.GET(currLine.""Receipt No."",currLine.""Line No."");"										
END;										
END;										
										
PROCEDURE Priority@1200070013(currline@1200070000 : Record 99008981) : Integer;										
VAR										
locPeriodicDiscountPriority@1200070004 : Record 99001453;										
PerDiscType@1100409000 : Record 99008943;										
BEGIN										
//Priority										
"GetPerDiscLine(PerDiscType,currline);"										
"IF locPeriodicDiscountPriority.GET(PerDiscType.""Periodic Disc. Group"") THEN"										
										
EXIT(locPeriodicDiscountPriority.Priority)										
ELSE										
EXIT(999999999);										
END;										
										
PROCEDURE SplitLine@1200070014(posTransLine@1200070000 : Record 99008981) : Integer;										
VAR										
NewposTransLine@1200070001 : Record 99008981;										
NewLineNo@1200070002 : Integer;										
PerDiscPer@1100409001 : Decimal;										
PerDisc@1100409000 : Code[20];										
PerDiscType@1100409002 : Record 99008943;										
TotalQtyToSplit@1100409003 : Decimal;										
LinkedLines@1100409004 : Record 99008981;										
LinkedLines2@1100409005 : Record 99008981;										
SplitLinkedLineNo@1100409006 : Integer;										
BEGIN										
//SplitLine										
"NewposTransLine.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"NewposTransLine.SETFILTER(""Entry Type"",'%1..%2|%3..',"										
"NewposTransLine.""Entry Type""::Item,"										
"NewposTransLine.""Entry Type""::Payment,"										
"NewposTransLine.""Entry Type""::IncomeExpense);"										
NewposTransLine.FIND('+');										
"NewLineNo := NewposTransLine.""Line No."" + 10000;"										
NewposTransLine.INIT;										
NewposTransLine := posTransLine;										
										
"posTransLine.Quantity := posTransLine.""Quantity Discounted"";"										
										
"PerDisc := GetTransDisc(posTransLine,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscPer := posTransLine.""Periodic Disc. %"" * NewposTransLine.Quantity / posTransLine.Quantity;"										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PerDisc);"										
										
"posTransLine.""Customer Qty Used"" := 0;"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Customer,'');"										
										
"IF posTransLine.""System-Block Manual Discount"" THEN"										
posTransLine.CalcPrices										
ELSE										
"posTransLine.VALIDATE(""Item Disc. Group"");"										
posTransLine.MODIFY(TRUE);										
										
"NewposTransLine.""Line No."" := NewLineNo;"										
"NewposTransLine.Quantity := NewposTransLine.Quantity - NewposTransLine.""Quantity Discounted"";"										
"NewposTransLine.""Quantity Discounted"" := 0;"										
										
"InsertTransDiscPercent(NewposTransLine,0,PerDiscType.DiscType::""Periodic Disc."",PerDisc);"										
"InsertTransDiscPerType(NewposTransLine,TRUE,0,TRUE,'');"										
										
"NewposTransLine.""InfoCode Disc. Disable"" := FALSE;"										
"NewposTransLine.""Customer Qty Used"" := 0;"										
										
"InsertTransDiscPercent(NewposTransLine,0,PerDiscType.DiscType::Customer,'');"										
										
"NewposTransLine.""Parent Line"" := NewposTransLine.""Line No."";"										
"NewposTransLine.""Disc. Info Line No."" := 0;"										
										
"GetTransDisc(NewposTransLine,TRUE,0);"										
										
NewposTransLine.CalcPrices;										
NewposTransLine.INSERT(TRUE);										
										
"OfferPosCalc.splitLine(NewposTransLine.""Line No."");"										
										
"posTransLine.CALCFIELDS(""Lines where Line is Parent"");"										
"IF posTransLine.""Lines where Line is Parent"" > 1 THEN BEGIN"										
TotalQtyToSplit := posTransLine.Quantity + NewposTransLine.Quantity;										
"SplitLinkedLineNo := NewposTransLine.""Line No."";"										
LinkedLines.RESET;										
"LinkedLines.SETCURRENTKEY(""Receipt No."",""Parent Line"");"										
"LinkedLines.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"LinkedLines.SETRANGE(""Parent Line"",posTransLine.""Line No."");"										
"LinkedLines.SETFILTER(""Line No."",'<>%1',posTransLine.""Line No."");"										
IF LinkedLines.FIND('-') THEN										
REPEAT										
SplitLinkedLineNo := SplitLinkedLineNo + 10000;										
LinkedLines2.INIT;										
LinkedLines2 := LinkedLines;										
"LinkedLines2.""Line No."" := SplitLinkedLineNo;"										
"LinkedLines2.""Parent Line"" := NewposTransLine.""Line No."";"										
LinkedLines2.Quantity := LinkedLines2.Quantity * (NewposTransLine.Quantity / TotalQtyToSplit);										
LinkedLines2.CalcPrices;										
LinkedLines2.INSERT(TRUE);										
LinkedLines.Quantity := LinkedLines.Quantity * (posTransLine.Quantity / TotalQtyToSplit);										
LinkedLines.CalcPrices;										
LinkedLines.MODIFY(TRUE);										
UNTIL LinkedLines.NEXT = 0;										
END;										
										
EXIT(NewLineNo);										
END;										
										
PROCEDURE InsertTmpOffer@1200070000(Code@1200070001 : Code[20]);										
VAR										
PeriodicDiscount@1100409000 : Record 99001453;										
InitCode@10012000 : Code[20];										
LimitationValue@1100409002 : Decimal;										
"LimitationType@1100409001 : 'None,Discount Amount,No. of Times Triggered';"										
BEGIN										
//InsertTmpOffer										
IF gItemPointOfferSelected THEN										
EXIT;										
										
"InitCode := TmpPeriodicDiscount.""No."";"										
"TmpPeriodicDiscount.""No."" := Code;"										
IF TmpPeriodicDiscount.INSERT THEN										
IF PeriodicDiscount.GET(Code) THEN BEGIN										
"IF PeriodicDiscount.""Offer Type"" = PeriodicDiscount.""Offer Type""::""Item Point"" THEN"										
TmpPeriodicDiscount.Priority := 0										
ELSE										
TmpPeriodicDiscount.Priority := PeriodicDiscount.Priority;										
TmpPeriodicDiscount.Type := PeriodicDiscount.Type;										
"TmpPeriodicDiscount.""Discount Tracking No."" := PeriodicDiscount.""Discount Tracking No."";"										
"IF TmpPeriodicDiscount.""Discount Tracking No."" <> '' THEN"										
"IF PosFunctions.GetMemberLimitation(TmpPeriodicDiscount.""Discount Tracking No."",LimitationValue,LimitationType) THEN BEGIN"										
IF LimitationType = LimitationType::None THEN										
"TmpPeriodicDiscount.""Discount Tracking No."" := ''"										
"ELSE IF LimitationType = LimitationType::""Discount Amount"" THEN BEGIN"										
"TmpPeriodicDiscount.""Amount to Trigger"" := LimitationValue;"										
"TmpPeriodicDiscount.""Block Total Discount Offer"" := TRUE;"										
END ELSE										
"TmpPeriodicDiscount.""No. of Times Applicable"" := LimitationValue;"										
END;										
TmpPeriodicDiscount.MODIFY;										
END;										
IF InitCode <> '' THEN										
TmpPeriodicDiscount.GET(InitCode);										
END;										
										
PROCEDURE InsertTmpOfferFromSpecLine@1200070003(locPosTransLine@1200070000 : Record 99008981);										
VAR										
locOfferPosCalc@1200070001 : Record 99001561;										
BEGIN										
"locOfferPosCalc.SETRANGE(""Receipt No."",locPosTransLine.""Receipt No."");"										
"locOfferPosCalc.SETRANGE(""Trans. Line No."",locPosTransLine.""Line No."");"										
IF locOfferPosCalc.FIND('-') THEN REPEAT										
"InsertTmpOffer(locOfferPosCalc.""Group No."");"										
UNTIL locOfferPosCalc.NEXT = 0;										
END;										
										
"PROCEDURE InitNeededLines@1200070007(""Group No.""@1200070002 : Code[20];VAR tmpToMixMatchLineGroups@1200070000 : TEMPORARY Record 990"	15	04;	cu	rrL	ine@1100409000 : Record 99008981;InitOk@1100409006 : Boolean);					
VAR										
fromMixMatchLineGroups@1200070001 : Record 99001504;										
tmpMogMLineGr@1100409001 : TEMPORARY Record 99001504;										
OffPosCal@1100409002 : Record 99001561;										
PerDiscLine@1100409003 : Record 99001454;										
PosTrLine@1100409004 : Record 99008981;										
BEGIN										
//InitNeededLines										
CLEAR(tmpMogMLineGr);										
tmpMogMLineGr.DELETEALL;										
										
IF InitOk THEN BEGIN										
OffPosCal.RESET;										
"OffPosCal.SETRANGE(""Receipt No."",currLine.""Receipt No."");"										
"OffPosCal.SETRANGE(""Periodic Disc. Type"",OffPosCal.""Periodic Disc. Type""::""Mix&Match"");"										
"OffPosCal.SETRANGE(""Group No."",""Group No."");"										
IF OffPosCal.FIND('-') THEN BEGIN										
REPEAT										
"IF PerDiscLine.GET(OffPosCal.""Group No."",OffPosCal.""Offer Line No."") THEN BEGIN"										
"IF fromMixMatchLineGroups.GET(PerDiscLine.""Offer No."",PerDiscLine.""Line Group"") THEN BEGIN"										
"IF (fromMixMatchLineGroups.""Line Group Type"" = fromMixMatchLineGroups.""Line Group Type""::Range) THEN BEGIN"										
"IF PosTrLine.GET(OffPosCal.""Receipt No."",OffPosCal.""Trans. Line No."") THEN BEGIN"										
"IF PosTrLine.""Entry Status"" = PosTrLine.""Entry Status""::"" "" THEN BEGIN"										
"IF tmpMogMLineGr.GET(PerDiscLine.""Offer No."",PerDiscLine.""Line Group"") THEN BEGIN"										
"tmpMogMLineGr.""Value 3"" := tmpMogMLineGr.""Value 3"" + PosTrLine.Quantity;"										
tmpMogMLineGr.MODIFY;										
END										
ELSE BEGIN										
"tmpMogMLineGr.""Group No."" := PerDiscLine.""Offer No."";"										
"tmpMogMLineGr.""Line Group Code"" := PerDiscLine.""Line Group"";"										
"tmpMogMLineGr.""Value 3"" := PosTrLine.Quantity;"										
tmpMogMLineGr.INSERT;										
END;										
END;										
END;										
END;										
END;										
END;										
UNTIL OffPosCal.NEXT = 0;										
END;										
END										
ELSE BEGIN										
tmpToMixMatchLineGroups.RESET;										
IF tmpToMixMatchLineGroups.FIND('-') THEN BEGIN										
REPEAT										
"tmpMogMLineGr.""Group No."" := tmpToMixMatchLineGroups.""Group No."";"										
"tmpMogMLineGr.""Line Group Code"" := tmpToMixMatchLineGroups.""Line Group Code"";"										
"tmpMogMLineGr.""Value 3"" := tmpToMixMatchLineGroups.""Value 3"";"										
tmpMogMLineGr.INSERT;										
UNTIL tmpToMixMatchLineGroups.NEXT = 0;										
END;										
END;										
										
tmpToMixMatchLineGroups.DELETEALL;										
"fromMixMatchLineGroups.SETRANGE(""Group No."",""Group No."");"										
IF fromMixMatchLineGroups.FIND('-') THEN REPEAT										
tmpToMixMatchLineGroups := fromMixMatchLineGroups;										
"IF tmpToMixMatchLineGroups.""Value 1"" <= 0 THEN"										
"tmpToMixMatchLineGroups.""Value 1"" := -1;"										
										
"IF tmpMogMLineGr.GET(fromMixMatchLineGroups.""Group No."",fromMixMatchLineGroups.""Line Group Code"") THEN"										
"tmpToMixMatchLineGroups.""Value 3"" := tmpMogMLineGr.""Value 3"";"										
										
tmpToMixMatchLineGroups.INSERT;										
UNTIL fromMixMatchLineGroups.NEXT = 0;										
END;										
										
PROCEDURE CheckToRegister@1200070011(VAR MixMatchLineGroups@1200070000 : TEMPORARY Record 99001504) : Boolean;										
BEGIN										
//CheckToRegiste										
IF MixMatchLineGroups.FIND('-') THEN REPEAT										
"IF MixMatchLineGroups.""Line Group Type"" = MixMatchLineGroups.""Line Group Type""::Range THEN BEGIN"										
"IF (MixMatchLineGroups.""Value 1"" > 0) THEN"										
EXIT(FALSE);										
"IF (MixMatchLineGroups.""Value 2"" > 0) AND (MixMatchLineGroups.""Value 3"" > 0) THEN"										
EXIT(FALSE);										
END										
ELSE BEGIN										
"IF MixMatchLineGroups.""Value 1"" > 0 THEN"										
EXIT(FALSE);										
END;										
UNTIL MixMatchLineGroups.NEXT = 0;										
EXIT(TRUE);										
END;										
										
PROCEDURE FindPeriodicOffers@1100409000(VAR currline@1200070000 : Record 99008981);										
VAR										
PeriodicDiscount@1200070001 : Record 99001453;										
PeriodicDiscountLines@1200070002 : Record 99001454;										
Promotion@1100409000 : Record 99001502;										
found@1200070003 : Boolean;										
tPosTransLine@1100409003 : Record 99008981;										
tPerDiscLine@1100409002 : Record 99001454;										
tPerDisc@1100409001 : Record 99001453;										
ItemSpecialGroup@1100409004 : Record 10000736;										
PerDiscType@1100409005 : Record 99008943;										
InsertOfferOk@1100409006 : Boolean;										
OfferOk@1100409007 : Boolean;										
TotAmount@1100409008 : Decimal;										
DiscItemRecFound@1100409009 : Boolean;										
ItemVariantsFunc@1100409010 : Codeunit 10001405;										
AddPosFunctions@1100409015 : Codeunit 99001487;										
Exclude@1100409011 : Boolean;										
PeriodicDiscLinesTemp@1100409012 : TEMPORARY Record 99001454;										
TmpPerDiscount@1100409014 : TEMPORARY Record 99001453;										
TmpPerDiscount2@1100409021 : TEMPORARY Record 99001453;										
TmpItemPointDiscLine@1100409016 : TEMPORARY Record 99001454;										
CurrUOM@1100409013 : Code[10];										
RecRef@1100409020 : RecordRef;										
FieldRef@1100409019 : FieldRef;										
DateToUse@1100409018 : Date;										
TimeToUse@1100409017 : Time;										
BEGIN										
//FindPeriodicOffer										
"IF currline.""System-Block Manual Discount"" THEN"										
EXIT;										
										
"//LS7.1-05 IF currline.""System-Exclude from Offers"" THEN"										
"IF currline.""System-Exclude from Offers"" OR currline.""System-Block Periodic Discount"" THEN //LS7.1-05"										
EXIT;										
										
"IF (currline.""Promotion No."" <> '') AND Promotion.GET(currline.""Promotion No."") THEN"										
"IF Promotion.""Block Periodic Discount"" THEN BEGIN"										
"IF (Promotion.Type = Promotion.Type::Promotion) AND (currline.""Disc. Info Line No."" <> 0) THEN BEGIN"										
"IF tPosTransLine.GET(currline.""Receipt No."",currline.""Disc. Info Line No."") THEN"										
tPosTransLine.DELETE(TRUE);										
"currline.""Disc. Info Line No."" := 0;"										
END;										
EXIT;										
END;										
										
"GetPerDiscLine(PerDiscType,currline);"										
										
"IF (PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Item Point"") AND"										
"(PerDiscType.""Offer No."" <> '')"										
THEN BEGIN										
"PeriodicDiscount.GET(PerDiscType.""Offer No."");"										
OfferPosCalc.INIT;										
"OfferPosCalc.""Receipt No."" := currline.""Receipt No."";"										
"OfferPosCalc.""Periodic Disc. Type"" := OfferPosCalc.""Periodic Disc. Type""::""Item Point"";"										
"OfferPosCalc.""Group No."" := PeriodicDiscount.""No."";"										
"OfferPosCalc.""Trans. Line No."" := currline.""Line No."";"										
"OfferPosCalc.""Offer Line No."" := PerDiscType.""Mix & Match Line No."";"										
IF NOT OfferPosCalc.INSERT THEN										
OfferPosCalc.MODIFY;										
										
OfferPosCalc.RESET;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETFILTER(""Group No."",'<>%1',PeriodicDiscount.""No."");"										
"OfferPosCalc.SETRANGE(""Trans. Line No."",currline.""Line No."");"										
OfferPosCalc.DELETEALL;										
OfferPosCalc.RESET;										
										
"InsertTmpOffer(PeriodicDiscount.""No."");"										
										
EXIT;										
END;										
										
"IF (currline.""System-Unchangable Offer"") AND"										
"(PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Mix&Match"") AND"										
"(PerDiscType.""Periodic Disc. Group"" <> '')"										
THEN BEGIN										
"PeriodicDiscount.GET(PerDiscType.""Periodic Disc. Group"");"										
										
IF (PeriodicDiscount.Status = PeriodicDiscount.Status::Enabled) THEN BEGIN										
PeriodicDiscountLines.RESET;										
"PeriodicDiscountLines.SETCURRENTKEY(""Offer No."",Type,""No."",""Variant Code"",""Unit of Measure"",""Prod. Group Category"");"										
"PeriodicDiscountLines.SETRANGE(""Offer No."",PeriodicDiscount.""No."");"										
"PeriodicDiscountLines.SETRANGE(Type,PeriodicDiscountLines.Type::Item);"										
"PeriodicDiscountLines.SETRANGE(""No."",Item.""No."");"										
"IF currline.""Variant Code"" <> '' THEN"										
"PeriodicDiscountLines.SETFILTER(""Variant Code"",'%1|%2',currline.""Variant Code"",'')"										
ELSE										
"PeriodicDiscountLines.SETRANGE(""Variant Code"",'');"										
"IF currline.""Unit of Measure"" <> '' THEN"										
"CurrUOM := currline.""Unit of Measure"""										
ELSE										
"CurrUOM := Item.""Sales Unit of Measure"";"										
"PeriodicDiscountLines.SETFILTER(""Unit of Measure"",'%1|%2',CurrUOM,'');"										
IF PeriodicDiscountLines.FINDFIRST THEN BEGIN										
OfferPosCalc.INIT;										
"OfferPosCalc.""Receipt No."" := currline.""Receipt No."";"										
"OfferPosCalc.""Periodic Disc. Type"" := PeriodicDiscount.Type;"										
"OfferPosCalc.""Group No."" := PeriodicDiscount.""No."";"										
"OfferPosCalc.""Trans. Line No."" := currline.""Line No."";"										
"OfferPosCalc.""Offer Line No."" := PeriodicDiscountLines.""Line No."";"										
"OfferPosCalc.""Use Trans. Line Time"" := PeriodicDiscount.""Use Trans. Line Time""; //LS7.1-04"										
IF OfferPosCalc.INSERT THEN;										
"InsertTmpOffer(PeriodicDiscount.""No."");"										
										
OfferPosCalc.RESET;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETFILTER(""Group No."",'<>%1',PerDiscType.""Periodic Disc. Group"");"										
"OfferPosCalc.SETRANGE(""Trans. Line No."",currline.""Line No."");"										
OfferPosCalc.DELETEALL;										
OfferPosCalc.RESET;										
EXIT;										
END;										
PeriodicDiscountLines.RESET;										
END;										
END;										
										
rboPriceUtil.ClearCouponAndMemberInfo;										
"IF PosTrans.""Member Card No."" <> '' THEN"										
"IF ValidateOfferMemberInfo(PosTrans,2) THEN"										
SetMemberInfo;										
SetCouponInfo(PosTrans);										
										
//LS7.1-04 -										
"IF PosFuncProfile.""Pre Load Offers"" > 0 THEN BEGIN"										
TmpPerDiscount2.RESET;										
TmpPerDiscount2.DELETEALL;										
"PosFunctions.GetActivePerDisc4Item(TmpPerDiscount2,currline.Number);"										
RecRef.GETTABLE(TmpPerDiscount2);										
END ELSE										
RecRef.GETTABLE(PeriodicDiscount);										
//LS7.1-04 +										
										
{//LS7.1-04										
"TmpPerDiscount.SETCURRENTKEY(Status,Type);"										
"TmpPerDiscount.SETRANGE(Status,TmpPerDiscount.Status::Enabled);"										
"TmpPerDiscount.SETRANGE(Type,TmpPerDiscount.Type::Multibuy,TmpPerDiscount.Type::""Disc. Offer"");"										
"TmpPerDiscount.SETFILTER(""Currency Code"",'%1|%2',Store.""Currency Code"",'');"										
}//LS7.1-04										
//LS7.1-04 -										
RecRef.CURRENTKEYINDEX(2);										
FieldRef := RecRef.FIELD(3);										
FieldRef.SETRANGE(TmpPerDiscount.Status::Enabled);										
FieldRef := RecRef.FIELD(4);										
"FieldRef.SETRANGE(TmpPerDiscount.Type::Multibuy,TmpPerDiscount.Type::""Disc. Offer"");"										
FieldRef := RecRef.FIELD(25);										
"FieldRef.SETFILTER('%1|%2',Store.""Currency Code"",'');"										
//LS7.1-04 +										
										
"PeriodicDiscountLines.SETCURRENTKEY(""Offer No."",Type,""No."",""Variant Code"",""Unit of Measure"",""Prod. Group Category"");"										
"IF currline.""Unit of Measure"" <> '' THEN"										
"CurrUOM := currline.""Unit of Measure"""										
ELSE										
"CurrUOM := Item.""Sales Unit of Measure"";"										
"PeriodicDiscountLines.SETFILTER(""Unit of Measure"",'%1|%2',CurrUOM,'');"										
										
//LS7.1-04 IF TmpPerDiscount.FIND('-') THEN REPEAT										
IF RecRef.FIND('-') THEN REPEAT //LS7.1-04										
RecRef.SETTABLE(TmpPerDiscount); //LS7.1-04										
										
//LS7.1-02 -										
"IF TmpPerDiscount.""Use Trans. Line Time"" THEN BEGIN"										
"DateToUse := currline.""Trans. Date"";"										
"TimeToUse := currline.""Trans. Time"";"										
END ELSE BEGIN										
"DateToUse := PosTrans.""Trans. Date"";"										
"TimeToUse := PosTrans.""Trans Time"";"										
END;										
//LS7.1-02 +										
"IF ((TmpPerDiscount.""Customer Disc. Group"" = '') OR"										
"(TmpPerDiscount.""Customer Disc. Group"" = PosTrans.""Customer Disc. Group"")) AND"										
"rboPriceUtil.CouponFilterPassed(TmpPerDiscount.""Coupon Code"",TmpPerDiscount.""Coupon Qty Needed"") AND"										
"rboPriceUtil.MemberFilterPassed(TmpPerDiscount.""Member Type"",TmpPerDiscount.""Member Value"") AND"										
"rboPriceUtil.MemberAttrFilterPassed(TmpPerDiscount.""Member Attribute"",TmpPerDiscount.""Member Attribute Value"") AND"										
"rboPriceUtil.MemberLimitationFilterPassed(TmpPerDiscount.""Discount Tracking No."")"										
THEN BEGIN										
found := FALSE;										
Exclude := FALSE;										
"PeriodicDiscountLines.SETRANGE(PeriodicDiscountLines.""Offer No."",TmpPerDiscount.""No."");"										
DiscItemRecFound := FALSE;										
"PeriodicDiscountLines.SETRANGE(Type,PeriodicDiscountLines.Type::Item);"										
"PeriodicDiscountLines.SETRANGE(""No."",Item.""No."");"										
"IF currline.""Variant Code"" <> '' THEN BEGIN"										
"PeriodicDiscountLines.SETRANGE(""Variant Type"",PeriodicDiscountLines.""Variant Type""::Variant);"										
"PeriodicDiscountLines.SETRANGE(""Variant Code"",currline.""Variant Code"");"										
IF PeriodicDiscountLines.FIND('+') THEN										
DiscItemRecFound := TRUE;										
IF NOT DiscItemRecFound THEN BEGIN										
"PeriodicDiscountLines.SETRANGE(""Variant Type"",PeriodicDiscountLines.""Variant Type""::""Dimension 1"");"										
"PeriodicDiscountLines.SETRANGE(""Variant Code"",ItemVariantsFunc.GetVariantDim1Value(Item.""No."",currline.""Variant Code""));"										
IF PeriodicDiscountLines.FIND('+') THEN										
DiscItemRecFound := TRUE;										
END;										
IF NOT DiscItemRecFound THEN BEGIN										
"PeriodicDiscountLines.SETRANGE(""Variant Type"");"										
"PeriodicDiscountLines.SETRANGE(""Variant Code"",'');"										
IF PeriodicDiscountLines.FIND('+') THEN										
DiscItemRecFound := TRUE;										
END;										
END ELSE BEGIN										
"PeriodicDiscountLines.SETRANGE(""Variant Type"");"										
"PeriodicDiscountLines.SETRANGE(""Variant Code"",'');"										
IF PeriodicDiscountLines.FIND('+') THEN										
DiscItemRecFound := TRUE;										
END;										
IF DiscItemRecFound THEN BEGIN										
IF rboPriceUtil.PeriodDiscFiltersPassed(										
"TmpPerDiscount,currline.""Store No."",currline.""Sales Type"",currline.""Price Group Code"") AND"										
"rboPriceUtil.DiscValPerValid(TmpPerDiscount.""Validation Period ID"",DateToUse,TimeToUse) //LS7.1-02"										
THEN BEGIN										
found := TRUE;										
Exclude := PeriodicDiscountLines.Exclude;										
END;										
END;										
										
IF NOT found THEN BEGIN										
CLEAR(ItemSpecialGroup);										
"ItemSpecialGroup.SETRANGE(""Item No."",Item.""No."");"										
IF ItemSpecialGroup.FINDSET THEN BEGIN										
PeriodicDiscLinesTemp.RESET;										
PeriodicDiscLinesTemp.DELETEALL;										
REPEAT										
"PeriodicDiscountLines.SETRANGE(Type,PeriodicDiscountLines.Type::""Special Group"");"										
"PeriodicDiscountLines.SETRANGE(""No."",ItemSpecialGroup.""Special Group Code"");"										
IF PeriodicDiscountLines.FINDFIRST THEN BEGIN										
IF rboPriceUtil.PeriodDiscFiltersPassed(										
"TmpPerDiscount,currline.""Store No."",currline.""Sales Type"",currline.""Price Group Code"") AND"										
rboPriceUtil.DiscValPerValid(										
"TmpPerDiscount.""Validation Period ID"",DateToUse,TimeToUse) //LS7.1-02"										
THEN BEGIN										
found := TRUE;										
Exclude := PeriodicDiscountLines.Exclude;										
PeriodicDiscLinesTemp.INIT;										
PeriodicDiscLinesTemp := PeriodicDiscountLines;										
PeriodicDiscLinesTemp.INSERT;										
END;										
END;										
UNTIL (ItemSpecialGroup.NEXT = 0) OR Exclude;										
IF (found) AND (NOT Exclude) THEN										
"FindBestSpecialGrDiscLine(currline,PeriodicDiscLinesTemp,PeriodicDiscountLines);"										
END;										
END;										
										
IF NOT found THEN BEGIN										
"PeriodicDiscountLines.SETRANGE(Type,PeriodicDiscountLines.Type::""Product Group"");"										
"PeriodicDiscountLines.SETRANGE(""No."",Item.""Product Group Code"");"										
"PeriodicDiscountLines.SETRANGE(""Prod. Group Category"",Item.""Item Category Code"");"										
IF PeriodicDiscountLines.FIND('-') THEN BEGIN										
IF rboPriceUtil.PeriodDiscFiltersPassed(										
"TmpPerDiscount,currline.""Store No."",currline.""Sales Type"",currline.""Price Group Code"") AND"										
rboPriceUtil.DiscValPerValid(										
"TmpPerDiscount.""Validation Period ID"",DateToUse,TimeToUse) //LS7.1-02"										
THEN BEGIN										
found := TRUE;										
Exclude := PeriodicDiscountLines.Exclude;										
END;										
END;										
"PeriodicDiscountLines.SETRANGE(""Prod. Group Category"");"										
END;										
										
IF NOT found THEN BEGIN										
"PeriodicDiscountLines.SETRANGE(Type,PeriodicDiscountLines.Type::""Item Category"");"										
"PeriodicDiscountLines.SETRANGE(""No."",Item.""Item Category Code"");"										
IF PeriodicDiscountLines.FIND('-') THEN BEGIN										
IF rboPriceUtil.PeriodDiscFiltersPassed(										
"TmpPerDiscount,currline.""Store No."",currline.""Sales Type"",currline.""Price Group Code"") AND"										
rboPriceUtil.DiscValPerValid(										
"TmpPerDiscount.""Validation Period ID"",DateToUse,TimeToUse) //LS7.1-02"										
THEN BEGIN										
found := TRUE;										
Exclude := PeriodicDiscountLines.Exclude;										
END;										
END;										
END;										
										
"IF (NOT found) AND (TmpPerDiscount.Type = TmpPerDiscount.Type::""Disc. Offer"") THEN BEGIN"										
"PeriodicDiscountLines.SETRANGE(Type,PeriodicDiscountLines.Type::All);"										
"PeriodicDiscountLines.SETRANGE(""No."");"										
IF PeriodicDiscountLines.FIND('-') THEN BEGIN										
IF rboPriceUtil.PeriodDiscFiltersPassed(										
"TmpPerDiscount,currline.""Store No."",currline.""Sales Type"",currline.""Price Group Code"") AND"										
rboPriceUtil.DiscValPerValid(										
"TmpPerDiscount.""Validation Period ID"",DateToUse,TimeToUse) //LS7.1-02"										
THEN BEGIN										
found := TRUE;										
Exclude := PeriodicDiscountLines.Exclude;										
END;										
END;										
END;										
										
IF (NOT found) AND (TmpPerDiscount.Type <> TmpPerDiscount.Type::Multibuy) AND										
"(TmpPerDiscount.""Amount to Trigger"" <> 0)"										
THEN BEGIN										
"PosTrans.CALCFIELDS(""Gross Amount"",""Line Discount"",""Income/Exp. Amount"");"										
"TotAmount := PosTrans.""Gross Amount"" + PosTrans.""Line Discount"" + PosTrans.""Income/Exp. Amount"";"										
"IF (TotAmount >= TmpPerDiscount.""Amount to Trigger"") OR"										
"(PosTransOfferCount(currline.""Receipt No."",0,TmpPerDiscount.""No."") > 0)"										
THEN BEGIN										
"InsertTmpOffer(TmpPerDiscount.""No."");"										
END;										
END;										
										
IF (found) AND (NOT Exclude) THEN BEGIN										
OfferPosCalc.INIT;										
"OfferPosCalc.""Receipt No."" := currline.""Receipt No."";"										
"OfferPosCalc.""Periodic Disc. Type"" := TmpPerDiscount.Type;"										
"OfferPosCalc.""Group No."" := PeriodicDiscountLines.""Offer No."";"										
"OfferPosCalc.""Trans. Line No."" := currline.""Line No."";"										
"OfferPosCalc.""Offer Line No."" := PeriodicDiscountLines.""Line No."";"										
"OfferPosCalc.""Use Trans. Line Time"" := TmpPerDiscount.""Use Trans. Line Time""; //LS7.1-04"										
IF OfferPosCalc.INSERT THEN;										
										
"InsertTmpOffer(TmpPerDiscount.""No."");"										
found := FALSE;										
END;										
END;										
//LS7.1-04 Until TmpPerDiscount.NEXT = 0;										
UNTIL RecRef.NEXT = 0; //LS7.1-04										
										
{//LS7.1-04										
"IF (PosTrans.""Member Card No."" <> '') THEN BEGIN"										
IF CheckQRItemPointOffer(currline) THEN										
"currline.""Prompted for IPO"" := TRUE;"										
"IF NOT currline.""Prompted for IPO"" THEN"										
"IF AutoPromptFormItemPointOffer(currline,TmpItemPointDiscLine,TRUE) THEN"										
"PosCtrl.PostEvent('RUNCOMMAND','ITEM_POINT_OFFER','','');"										
END;										
"currline.""Prompted for IPO"" := TRUE;"										
currline.MODIFY;										
}//LS7.1-04										
END;										
										
PROCEDURE CheckQRItemPointOffer@1100409112(VAR pPOSTransLine@1100409000 : Record 99008981) : Boolean;										
VAR										
lMemberShipCard@1100409007 : Record 99009003;										
TmpItemPointOfferLine@1100409004 : TEMPORARY Record 99001454;										
TmpSelectedItemPointLine@1100409003 : TEMPORARY Record 99001454;										
ItemOfferLine@1100409002 : Record 99001454;										
lOfferNo@1100409005 : Code[20];										
BEGIN										
"IF PosFunctions.ItemInQR(pPOSTransLine.Number,lOfferNo) THEN BEGIN"										
"IF AutoPromptFormItemPointOffer(pPOSTransLine,TmpItemPointOfferLine,FALSE) THEN BEGIN"										
"TmpItemPointOfferLine.SETRANGE(""Offer No."",lOfferNo);"										
IF TmpItemPointOfferLine.FINDFIRST THEN BEGIN										
"ItemOfferLine.GET(TmpItemPointOfferLine.""Offer No."",TmpItemPointOfferLine.""Line No."");"										
TmpSelectedItemPointLine := ItemOfferLine;										
"SelectItemPointOffer(pPOSTransLine,TmpSelectedItemPointLine);"										
PosFunctions.RecalcSlip(PosTrans);										
EXIT(TRUE);										
END;										
END;										
END;										
EXIT(FALSE);										
END;										
										
PROCEDURE RegisterDeal@1100409001(VAR DealPOSTransLine@1000 : Record 99008981) : Boolean;										
VAR										
POSTransaction@1100409001 : Record 99008980;										
Deal@1005 : Record 99001502;										
POSTransLine@1100409000 : Record 99008981;										
DealLine@1100409006 : Record 99001503;										
DealLineTmp@1100409010 : TEMPORARY Record 99001503;										
discAmount@1013 : Decimal;										
totDiscAmt@1015 : Decimal;										
AmountDiff@1100409002 : Decimal;										
totAmtAfter@1100409003 : Decimal;										
totPrice@1100409004 : Decimal;										
totQty@1100409005 : Decimal;										
AddedAmount@1100409007 : Decimal;										
ModAddedAmt@1100409009 : Decimal;										
totDealAmt@1100409008 : Decimal;										
"OfferType@1100409011 : 'Periodic Disc.,Customer,InfoCode,Total,Line,Promotion,Deal,Total Discount,Tender Type,Item Point,Line Disc"	oun	"t,M"	em	ber	"Point,Coupon';"					
BEGIN										
//RegisterDeal										
"IF DealPOSTransLine.""Disc. Info Line No."" <> 0 THEN"										
"DealPOSTransLine.GET(DealPOSTransLine.""Receipt No."",DealPOSTransLine.""Disc. Info Line No."");"										
"InitGlobals(DealPOSTransLine,FALSE);"										
totPrice := 0;										
totQty := 0;										
totDiscAmt := 0;										
										
"POSTransaction.GET(DealPOSTransLine.""Receipt No."");"										
"Deal.GET(DealPOSTransLine.""Promotion No."");"										
										
"POSTransLine.SETRANGE(""Receipt No."",DealPOSTransLine.""Receipt No."");"										
"POSTransLine.SETRANGE(""Disc. Info Line No."",DealPOSTransLine.""Line No."");"										
"POSTransLine.SETFILTER(""Entry Status"",'<>%1',DealPOSTransLine.""Entry Status""::Voided);"										
										
AddedAmount := 0;										
ModAddedAmt := 0;										
CLEAR(DealLineTmp);										
DealLineTmp.DELETEALL;										
IF POSTransLine.FIND('-') THEN BEGIN										
REPEAT										
"IF POSTransLine.""Deal Line No."" <> 0 THEN BEGIN"										
DealLineTmp.INIT;										
"DealLineTmp.""Offer No."" := Deal.""No."";"										
"DealLineTmp.""Line No."" := POSTransLine.""Deal Line No."";"										
IF DealLineTmp.INSERT THEN BEGIN										
"DealLine.GET(DealLineTmp.""Offer No."",DealLineTmp.""Line No."");"										
"POSTransLine.""Deal Modifier Added Amt."" := DealLine.""Modifier Added Amount"" * DealPOSTransLine.Quantity;"										
POSTransLine.MODIFY(TRUE);										
END;										
END;										
"AddedAmount += POSTransLine.""Deal Added Amount"";"										
"IF POSTransLine.""Org. Price Inc. VAT"" <> 0 THEN"										
"totPrice += POSTransLine.""Org. Price Inc. VAT"" * POSTransLine.Quantity"										
ELSE										
totPrice += POSTransLine.Price * POSTransLine.Quantity;										
"totDiscAmt += POSTransLine.""Discount Amount"";"										
totQty += POSTransLine.Quantity;										
UNTIL POSTransLine.NEXT = 0;										
END ELSE BEGIN										
"DealPOSTransLine.""Entry Status"" := DealPOSTransLine.""Entry Status""::Voided;"										
DealPOSTransLine.MODIFY(TRUE);										
DeletePromotionDealEntry(DealPOSTransLine);										
EXIT;										
END;										
										
IF DealLineTmp.FIND('-') THEN										
REPEAT										
"DealLine.GET(DealLineTmp.""Offer No."",DealLineTmp.""Line No."");"										
"ModAddedAmt += DealLine.""Modifier Added Amount"" * DealPOSTransLine.Quantity;"										
UNTIL DealLineTmp.NEXT = 0;										
										
"Deal.""Deal Price"" += (ModAddedAmt + AddedAmount) / DealPOSTransLine.Quantity;"										
										
"IF Store.""Currency Code"" <> Deal.""Currency Code"" THEN"										
"Deal.""Deal Price"" :="										
"CurrencyExchRate.ExchangeAmtFCYToFCY(POSTransaction.""Trans. Date"","										
"Deal.""Currency Code"",Store.""Currency Code"",Deal.""Deal Price"");"										
										
"DealPOSTransLine.Price := ROUND(Deal.""Deal Price"",PosFuncProfile.""Price Rounding to"");"										
"DealPOSTransLine.Amount := DealPOSTransLine.Quantity * Deal.""Deal Price"";"										
"DealPOSTransLine.""Deal Added Amount"" := AddedAmount;"										
"DealPOSTransLine.""Deal Modifier Added Amt."" := ModAddedAmt;"										
DeletePromotionDealEntry(DealPOSTransLine);										
InsertPromotionDealEntry(DealPOSTransLine);										
DealPOSTransLine.MODIFY(TRUE);										
totAmtAfter := 0;										
totDealAmt := DealPOSTransLine.Amount - totDiscAmt;										
										
IF POSTransLine.FIND('-') THEN REPEAT										
IF totPrice <> 0 THEN BEGIN										
"IF POSTransLine.""Org. Price Inc. VAT"" <> 0 THEN"										
POSTransLine.VALIDATE(										
"Price, ROUND(POSTransLine.""Org. Price Inc. VAT"" / totPrice"										
"* DealPOSTransLine.Amount,PosFuncProfile.""Amount Rounding to""))"										
ELSE										
POSTransLine.VALIDATE(										
"Price, ROUND(POSTransLine.Price / totPrice"										
"* DealPOSTransLine.Amount,PosFuncProfile.""Amount Rounding to""))"										
END ELSE										
"POSTransLine.VALIDATE(Price, ROUND(POSTransLine.Quantity / totQty"										
"* DealPOSTransLine.Amount,PosFuncProfile.""Amount Rounding to""));"										
"POSTransLine.""Price Change"" := TRUE;"										
POSTransLine.CalcPrices();										
DeletePromotionDealEntry(POSTransLine);										
InsertPromotionDealEntry(POSTransLine);										
POSTransLine.MODIFY(TRUE);										
totAmtAfter += POSTransLine.Amount;										
UNTIL POSTransLine.NEXT = 0;										
										
AmountDiff := totDealAmt - totAmtAfter;										
IF AmountDiff <> 0 THEN BEGIN										
"POSTransLine.VALIDATE(Price,POSTransLine.Price + AmountDiff / POSTransLine.Quantity);"										
POSTransLine.CalcPrices;										
POSTransLine.MODIFY(TRUE);										
END;										
EXIT(TRUE);										
END;										
										
PROCEDURE AddOtherOffersFromMMRelease@10012000(ReceiptNo@10012000 : Code[20];LineNo@10012001 : Integer;OfferNo@10012002 : Code[20]);										
VAR										
OfferPoscalculation@10012003 : Record 99001561;										
locPOSTransLine@10012004 : Record 99008981;										
BEGIN										
//AddOtherOffersFromMMRelease										
										
"OfferPoscalculation.SETRANGE(""Receipt No."",ReceiptNo);"										
"OfferPoscalculation.SETRANGE(""Periodic Disc. Type"",OfferPoscalculation.""Periodic Disc. Type""::""Mix&Match"");"										
"OfferPoscalculation.SETRANGE(""Group No."",OfferNo);"										
"OfferPoscalculation.SETFILTER(""Trans. Line No."",'<>%1',LineNo);"										
										
IF OfferPoscalculation.FINDSET THEN										
REPEAT										
										
"locPOSTransLine.GET(ReceiptNo,OfferPoscalculation.""Trans. Line No."");"										
										
InsertTmpOfferFromSpecLine(locPOSTransLine);										
UNTIL OfferPoscalculation.NEXT = 0;										
END;										
										
PROCEDURE TriggerMMPopUp@1100409002(currline@1100409010 : Record 99008981;mmLine@1100409001 : Record 99001454;qty@1100409003 : Decim	al)	:	Bo	ole	an;					
VAR										
mmHeader@1100409017 : Record 99001453;										
tmpMixMatchLineGr@1100409002 : TEMPORARY Record 99001504;										
posTransLine@1100409018 : Record 99008981;										
PerDiscLine@1100409019 : Record 99001454;										
lineCount@1100409004 : Integer;										
n@1100409005 : Integer;										
i@1100409016 : Integer;										
lnTmp@1100409009 : Integer;										
prTmp@1100409008 : Decimal;										
qtyTmp@1100409007 : Decimal;										
itmTmp@1100409006 : Code[20];										
ItemNo@1100409000 : Code[20];										
oldQty@1100409011 : Decimal;										
useQty@1100409012 : Decimal;										
rest@1100409014 : Decimal;										
qtyTrigger@1100409020 : Decimal;										
done@1100409013 : Boolean;										
lines@1100409015 : Integer;										
PerDiscType@1100409021 : Record 99008943;										
BEGIN										
//TriggerMMPopUp										
										
										
mmMembTmp.ResetList;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::""Mix&Match"");"										
"OfferPosCalc.SETRANGE(""Group No."",mmLine.""Offer No."");"										
IF OfferPosCalc.FINDFIRST THEN BEGIN										
REPEAT										
"posTransLine.GET(currline.""Receipt No."",OfferPosCalc.""Trans. Line No."");"										
"GetPerDiscLine(PerDiscType,posTransLine);"										
										
"IF PerDiscLine.GET(mmLine.""Offer No."",posTransLine.""Mix & Match Line No."") THEN BEGIN"										
"IF posTransLine.""Entry Status"" = posTransLine.""Entry Status""::"" "" THEN BEGIN"										
										
"//LS7.1-07 IF (PerDiscType.""Periodic Disc. Group"" = '') AND (posTransLine.""Line No."" <> currline.""Line No."") THEN BEGIN"										
"IF (PerDiscType.""Periodic Disc. Group"" <> mmLine.""Offer No."") AND (posTransLine.""Line No."" <> currline.""Line No."") THEN BE"	GIN	//	LS	7.1	-7					
"mmMembTmp.AddToList(posTransLine.""Line No."",posTransLine.Price * PerDiscLine.""No. of Items Needed"","										
"posTransLine.Quantity,FORMAT(PerDiscLine.""Line No.""));"										
END;										
END;										
END;										
UNTIL OfferPosCalc.NEXT = 0;										
END;										
										
"IF NOT mmHeader.GET(mmLine.""Offer No."") THEN"										
EXIT(FALSE);										
										
"ItemNo := FORMAT(mmLine.""Line No."");"										
"InitNeededLines(mmHeader.""No."",tmpMixMatchLineGr,currline,TRUE);"										
										
lines := 0;										
"IF tmpMixMatchLineGr.GET(mmLine.""Offer No."",mmLine.""Line Group"") AND (tmpMixMatchLineGr.""Value 1"" = 0) AND (qty > 0) THEN"										
EXIT(FALSE);										
										
lineCount := 0;										
mmTmp.ResetList;										
n := mmMembTmp.CountList;										
WHILE n > 0 DO BEGIN										
"mmMembTmp.GetIndexList(n,lnTmp,prTmp,qtyTmp,itmTmp);"										
IF itmTmp = ItemNo THEN BEGIN										
oldQty := oldQty + qtyTmp;										
"mmTmp.AddToList(lnTmp,prTmp,qtyTmp,itmTmp);"										
lineCount := lineCount + 1;										
lineList[lineCount] := n;										
END;										
n := n - 1;										
END;										
useQty := qty + oldQty;										
lastItemUpd := ItemNo;										
										
"qtyTrigger := mmLine.""No. of Items Needed"";"										
										
IF useQty < qtyTrigger THEN										
EXIT(FALSE);										
										
"IF tmpMixMatchLineGr.GET(mmLine.""Offer No."",mmLine.""Line Group"") AND (tmpMixMatchLineGr.""Value 1"" <> -1) THEN BEGIN"										
rest := useQty;										
done := FALSE;										
"qtyTrigger := tmpMixMatchLineGr.""Value 1"";"										
"WHILE (rest > 0) AND (tmpMixMatchLineGr.""Value 1"" > 0) AND (NOT done) DO BEGIN"										
"IF DiffListOK(mmHeader,mmLine.""Line No."") AND ((rest - mmLine.""No. of Items Needed"") >= 0) THEN BEGIN"										
"rest := rest - mmLine.""No. of Items Needed"";"										
"tmpMixMatchLineGr.""Value 1"" := tmpMixMatchLineGr.""Value 1"" - 1;"										
tmpMixMatchLineGr.MODIFY;										
lines := lines + 1;										
END ELSE										
done := TRUE;										
END;										
END										
"ELSE IF NOT DiffListOK(mmHeader,mmLine.""Line No."") THEN"										
EXIT(FALSE)										
ELSE										
EXIT(FALSE);										
										
IF useQty < qtyTrigger THEN										
EXIT(FALSE);										
										
useQty := useQty - rest;										
IF (useQty > 0) THEN										
EXIT(TRUE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE CalcMixMatchNew@1100409004(VAR currLine@1000 : Record 99008981;RegisterOk@1100409004 : Boolean) : Boolean;										
VAR										
PeriodicDiscount@1001 : Record 99001453;										
PeriodicDiscountLines@1002 : Record 99001454;										
PeriodicDiscountLines2@1003 : Record 99001454;										
posTransLine2@1100409003 : Record 99008981;										
tmpPosTransLine@1100409002 : TEMPORARY Record 99008981;										
posMixMatchEntry@1005 : Record 99008983;										
tmpLine@1200070002 : Record 99008981;										
tmpNewLine@1200070001 : Record 99008981;										
tmpMixMatchNeededLine@1200070003 : TEMPORARY Record 99001504;										
tmpLineNo@1006 : Integer;										
tmpPrice@1007 : Decimal;										
mixMatchOK@1008 : Boolean;										
currLineNo@1009 : Integer;										
qty@1010 : Decimal;										
UsedCurrLineQty@1011 : Decimal;										
useQty@1012 : Decimal;										
itemNo@1014 : Code[20];										
noTimes@1015 : Integer;										
noTimesUndef@1016 : Boolean;										
mmCounter@1017 : Integer;										
noLinesLeft@1018 : Integer;										
yesMandLines@1019 : Integer;										
noMandLines@1020 : Integer;										
linesMoved@1021 : Integer;										
mustCompress@1022 : Boolean;										
InfoUpd@1200070000 : Boolean;										
"""Mix&MarchOk""@1100409001 : Boolean;"										
TotAmount@1100409000 : Decimal;										
PerDiscType@1100409005 : Record 99008943;										
PerDiscType2@1100409012 : Record 99008943;										
tmpPerDiscType@1100409006 : TEMPORARY Record 99008943;										
lQty@1100409007 : Decimal;										
lDiscQty@1100409008 : Decimal;										
CurrCountLimit@1100409010 : Integer;										
CurrAmountLimit@1100409009 : Decimal;										
NewLineNo@1100409011 : Integer;										
BaseOffset@1100409013 : Decimal;										
BEGIN										
//CalcMixMatchNew										
"Store.GET(currLine.""Store No."");"										
"PeriodicDiscount.GET(TmpPeriodicDiscount.""No."");"										
"IF TmpPeriodicDiscount.""Discount Tracking No."" <> '' THEN BEGIN"										
"IF TmpPeriodicDiscount.""Block Total Discount Offer"" THEN"										
"CurrAmountLimit := TmpPeriodicDiscount.""Amount to Trigger"" -"										
"PosTransMemberTrackingAmount(currLine.""Receipt No."",TmpPeriodicDiscount.""Discount Tracking No."",TmpPeriodicDiscount.""No."")"										
ELSE										
"CurrCountLimit := TmpPeriodicDiscount.""No. of Times Applicable"" -"										
"PosTransMemberTrackingCount(currLine.""Receipt No."",TmpPeriodicDiscount.""Discount Tracking No."", TmpPeriodicDiscount.""No."");"										
END;										
										
"PeriodicDiscount.CALCFIELDS(""No. of Lines to Trigger"");"										
mixMatchOK := FALSE;										
										
"IF NOT(PeriodicDiscount.""No. of Lines to Trigger"" <= 0) THEN BEGIN"										
CLEAR(tmpPosTransLine);										
tmpPosTransLine.DELETEALL;										
CLEAR(tmpPerDiscType);										
tmpPerDiscType.DELETEALL;										
PerDiscType.RESET;										
										
IF RegisterOk THEN BEGIN										
posTransLine2.RESET;										
"posTransLine2.SETRANGE(""Receipt No."",currLine.""Receipt No."");"										
IF posTransLine2.FINDSET THEN BEGIN										
REPEAT										
tmpPosTransLine := posTransLine2;										
tmpPosTransLine.INSERT;										
"PerDiscType.SETRANGE(""Receipt No."",posTransLine2.""Receipt No."");"										
"PerDiscType.SETRANGE(""Line No."",posTransLine2.""Line No."");"										
IF PerDiscType.FINDSET THEN BEGIN										
REPEAT										
tmpPerDiscType := PerDiscType;										
tmpPerDiscType.INSERT;										
UNTIL PerDiscType.NEXT = 0;										
END;										
UNTIL posTransLine2.NEXT = 0;										
END;										
END										
ELSE BEGIN										
tmpMMPosTrLine.RESET;										
IF tmpMMPosTrLine.FIND('-') THEN BEGIN										
REPEAT										
tmpPosTransLine := tmpMMPosTrLine;										
tmpPosTransLine.INSERT;										
"PerDiscType.SETRANGE(""Receipt No."",tmpMMPosTrLine.""Receipt No."");"										
"PerDiscType.SETRANGE(""Line No."",tmpMMPosTrLine.""Line No."");"										
IF PerDiscType.FINDSET THEN BEGIN										
REPEAT										
tmpPerDiscType := PerDiscType;										
tmpPerDiscType.INSERT;										
UNTIL PerDiscType.NEXT = 0;										
END;										
UNTIL tmpMMPosTrLine.NEXT = 0;										
END;										
END;										
										
mustCompress := FALSE;										
mmMembList.ResetList;										
										
"OfferPosCalc.SETRANGE(""Receipt No."",currLine.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::""Mix&Match"");"										
"OfferPosCalc.SETRANGE(""Group No."",PeriodicDiscount.""No."");"										
IF OfferPosCalc.FIND('-') THEN REPEAT										
"IF NOT tmpPosTransLine.GET(currLine.""Receipt No."",OfferPosCalc.""Trans. Line No."") AND RegisterOk THEN BEGIN"										
OfferPosCalc.DELETE;										
END										
ELSE BEGIN										
"GetPerDiscLine(PerDiscType,tmpPosTransLine);"										
"IF NOT tmpPerDiscType.GET(PerDiscType.""Receipt No."",PerDiscType.""Line No."",PerDiscType.""No."") THEN"										
CLEAR(tmpPerDiscType);										
										
"IF tmpPosTransLine.""Entry Status"" = tmpPosTransLine.""Entry Status""::"" "" THEN BEGIN"										
"IF tmpPerDiscType.""Periodic Disc. Group"" <> '' THEN BEGIN"										
InfoUpd := TRUE;										
"IF (tmpPerDiscType.""Periodic Disc. Type"" = tmpPerDiscType.""Periodic Disc. Type""::""Mix&Match"") AND"										
"(tmpPerDiscType.""Periodic Disc. Group"" = PeriodicDiscount.""No."") THEN BEGIN"										
"tmpPerDiscType.""Periodic Disc. Group"" := '';"										
tmpPerDiscType.MODIFY;										
IF RegisterOk THEN BEGIN										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END;										
END										
ELSE BEGIN										
IF Priority(tmpPosTransLine) > TmpPeriodicDiscount.Priority THEN BEGIN										
InsertTmpOfferFromSpecLine(tmpPosTransLine);										
"TmpPeriodicDiscount.GET(PeriodicDiscount.""No."");"										
"tmpPerDiscType.""Periodic Disc. Type"" := tmpPerDiscType.""Periodic Disc. Type""::"" "";"										
"tmpPerDiscType.""Periodic Disc. Group"" := '';"										
tmpPerDiscType.MODIFY;										
IF RegisterOk THEN BEGIN										
"PerDiscType.""Periodic Disc. Type"" := PerDiscType.""Periodic Disc. Type""::"" "";"										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END;										
END										
ELSE BEGIN										
"lQty := ROUND(tmpPosTransLine.Quantity,0.001);"										
"lDiscQty := ROUND(tmpPosTransLine.""Quantity Discounted"",0.001);"										
IF lQty > lDiscQty THEN BEGIN										
IF RegisterOk THEN BEGIN										
"posTransLine2.GET(tmpPosTransLine.""Receipt No."",tmpPosTransLine.""Line No."");"										
NewLineNo := SplitLine(posTransLine2);										
"posTransLine2.GET(tmpPosTransLine.""Receipt No."",NewLineNo);"										
tmpPosTransLine := posTransLine2;										
tmpPosTransLine.INSERT;										
"PerDiscType2.SETRANGE(""Receipt No."",posTransLine2.""Receipt No."");"										
"PerDiscType2.SETRANGE(""Line No."",posTransLine2.""Line No."");"										
IF PerDiscType2.FINDSET THEN										
REPEAT										
tmpPerDiscType := PerDiscType2;										
tmpPerDiscType.INSERT;										
UNTIL PerDiscType2.NEXT = 0;										
END;										
END										
ELSE										
InfoUpd := FALSE;										
END;										
END;										
IF InfoUpd THEN BEGIN										
"tmpTransLineToUpd.""Receipt No."" := tmpPosTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := tmpPosTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
END;										
										
"IF tmpPerDiscType.""Periodic Disc. Group"" = '' THEN BEGIN"										
"tmpPosTransLine.""Mix & Match Line No."" := OfferPosCalc.""Offer Line No."";"										
"PeriodicDiscountLines2.GET(PeriodicDiscount.""No."",tmpPosTransLine.""Mix & Match Line No."");"										
{//LS7.1-07										
"IF tmpPosTransLine.""Scale Item"" THEN"										
"mmMembList.AddToList(tmpPosTransLine.""Line No."",tmpPosTransLine.Price * PeriodicDiscountLines2.""No. of Items Needed"","										
"1,FORMAT(PeriodicDiscountLines2.""Line No.""))"										
ELSE										
"mmMembList.AddToList(tmpPosTransLine.""Line No."",tmpPosTransLine.Price * PeriodicDiscountLines2.""No. of Items Needed"","										
"tmpPosTransLine.Quantity,FORMAT(PeriodicDiscountLines2.""Line No.""));"										
}//LS7.1-07										
//LS7.1-07 -										
"IF tmpPosTransLine.""System-Unchangable Offer"" THEN"										
BaseOffset := 1000000000										
ELSE										
BaseOffset := 0;										
"IF tmpPosTransLine.""Scale Item"" THEN"										
"mmMembList.AddToList(tmpPosTransLine.""Line No."",BaseOffset + tmpPosTransLine.Price * PeriodicDiscountLines2.""No. of It"	ems	Ne	ed	"ed"""	","					
"1,FORMAT(PeriodicDiscountLines2.""Line No.""))"										
ELSE										
"mmMembList.AddToList(tmpPosTransLine.""Line No."",BaseOffset + tmpPosTransLine.Price * PeriodicDiscountLines2.""No. of It"	ems	Ne	ed	"ed"""	","					
"tmpPosTransLine.Quantity,FORMAT(PeriodicDiscountLines2.""Line No.""));"										
//LS7.1-07 +										
IF tmpPosTransLine.Quantity < 0 THEN										
mustCompress := TRUE;										
										
"tmpPosTransLine.""Periodic Disc. %"" := 0;"										
"tmpPosTransLine.""Quantity Discounted"" := 0;"										
"tmpPosTransLine.""Discount Triggered"" := FALSE;"										
"tmpPosTransLine.""Customer Qty Used"" := 0;"										
"tmpPosTransLine.""Customer Disc. %"" := 0;"										
"tmpPosTransLine.""InfoCode Disc. Disable"" := FALSE;"										
tmpPosTransLine.MODIFY;										
										
IF RegisterOk THEN BEGIN										
"posTransLine2.GET(tmpPosTransLine.""Receipt No."",tmpPosTransLine.""Line No."");"										
"posTransLine2.""Mix & Match Line No."" := OfferPosCalc.""Offer Line No."";"										
"InsertTransDiscPercent(posTransLine2,0,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
"posTransLine2.""Quantity Discounted"" := 0;"										
"posTransLine2.""Discount Triggered"" := FALSE;"										
"posTransLine2.""Customer Qty Used"" := 0;"										
"InsertTransDiscPercent(posTransLine2,0,PerDiscType.DiscType::Customer,'');"										
"posTransLine2.""Customer Disc. %"" := 0;"										
"posTransLine2.""InfoCode Disc. Disable"" := FALSE;"										
posTransLine2.CalcPrices;										
posTransLine2.MODIFY(TRUE);										
END;										
END;										
END										
ELSE BEGIN										
IF RegisterOk THEN BEGIN										
"posMixMatchEntry.SETRANGE(""Receipt No."",tmpPosTransLine.""Receipt No."");"										
"posMixMatchEntry.SETRANGE(""Line No."",tmpPosTransLine.""Line No."");"										
posMixMatchEntry.DELETEALL;										
END;										
										
"tmpTransLineToUpd.""Receipt No."" := tmpPosTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := tmpPosTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
										
"IF tmpPerDiscType.""Periodic Disc. Group"" = '' THEN BEGIN"										
IF RegisterOk THEN BEGIN										
"posMixMatchEntry.SETRANGE(""Receipt No."",tmpPosTransLine.""Receipt No."");"										
"posMixMatchEntry.SETRANGE(""Line No."",tmpPosTransLine.""Line No."");"										
posMixMatchEntry.DELETEALL;										
										
"IF tmpPosTransLine.""Disc. Info Line No."" <> 0 THEN BEGIN"										
"posTransLine2.GET(tmpPosTransLine.""Receipt No."",tmpPosTransLine.""Line No."");"										
"tmpLine.SETRANGE(""Receipt No."",posTransLine2.""Receipt No."");"										
"tmpLine.SETRANGE(""Disc. Info Line No."",posTransLine2.""Disc. Info Line No."");"										
IF tmpLine.FIND('-') THEN REPEAT										
"tmpNewLine.GET(tmpLine.""Receipt No."",tmpLine.""Line No."");"										
"tmpNewLine.""Disc. Info Line No."" := 0;"										
"tmpNewLine.""Discount Amt. for Printing"" := 0;"										
tmpNewLine.MODIFY(TRUE);										
"tmpPosTransLine.GET(tmpLine.""Receipt No."",tmpLine.""Line No."");"										
"tmpPosTransLine.""Disc. Info Line No."" := 0;"										
"tmpPosTransLine.""Discount Amt. for Printing"" := 0;"										
tmpPosTransLine.MODIFY;										
UNTIL tmpLine.NEXT = 0;										
										
"tmpLine.GET(posTransLine2.""Receipt No."",posTransLine2.""Disc. Info Line No."");"										
"IF (tmpLine.""Entry Type"" = tmpLine.""Entry Type""::PerDiscount) THEN"										
tmpLine.DELETE(TRUE);										
										
"tmpPosTransLine.GET(posTransLine2.""Receipt No."",posTransLine2.""Disc. Info Line No."");"										
tmpPerDiscType.RESET;										
"tmpPerDiscType.SETRANGE(""Receipt No."",tmpPosTransLine.""Receipt No."");"										
"tmpPerDiscType.SETRANGE(""Line No."",tmpPosTransLine.""Line No."");"										
tmpPerDiscType.DELETEALL;										
tmpPosTransLine.DELETE;										
"tmpPosTransLine.GET(posTransLine2.""Receipt No."",posTransLine2.""Line No."");"										
END;										
END;										
END;										
END;										
UNTIL OfferPosCalc.NEXT = 0;										
										
IF mustCompress THEN										
mmMembList.Compress;										
										
mmOfferList.ResetList;										
mmMembTmp.ResetList;										
"noLinesLeft := PeriodicDiscount.""No. of Lines to Trigger"";"										
"InitNeededLines(PeriodicDiscount.""No."",tmpMixMatchNeededLine,currLine,TRUE);"										
"noTimes := PeriodicDiscount.""No. of Times Applicable"";"										
noTimesUndef := (noTimes = 0);										
IF MemberTrackingCountLimit(TmpPeriodicDiscount) THEN BEGIN										
IF noTimesUndef THEN BEGIN										
noTimes := CurrCountLimit;										
noTimesUndef := (noTimes = 0);										
END ELSE										
IF noTimes > CurrCountLimit THEN										
noTimes := CurrCountLimit;										
END;										
										
diffCount := 0;										
mmCounter := 0;										
										
"""Mix&MarchOk"" := TRUE;"										
"IF (PeriodicDiscount.""Amount to Trigger"" <> 0) THEN BEGIN"										
"PosTrans.CALCFIELDS(""Gross Amount"",""Line Discount"",""Income/Exp. Amount"");"										
"TotAmount := PosTrans.""Gross Amount"" + PosTrans.""Line Discount"" + PosTrans.""Income/Exp. Amount"";"										
"IF TotAmount < PeriodicDiscount.""Amount to Trigger"" THEN"										
"""Mix&MarchOk"" := FALSE;"										
END;										
"IF ""Mix&MarchOk"" THEN BEGIN"										
WHILE (mmMembList.CountList > 0) AND ((noTimes > 0) OR (noTimesUndef)) AND										
"(TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,0))"										
DO BEGIN										
"mmMembList.GetLargestList(tmpLineNo,tmpPrice,qty);"										
"qty := ROUND(qty,0.001);"										
"tmpPosTransLine.GET(currLine.""Receipt No."",tmpLineNo);"										
"PeriodicDiscountLines2.GET(PeriodicDiscount.""No."",tmpPosTransLine.""Mix & Match Line No."");"										
"useQty := UpdOffer(PeriodicDiscount,PeriodicDiscountLines2,FORMAT(PeriodicDiscountLines2.""Line No.""),qty,"										
"tmpMixMatchNeededLine,linesMoved,UsedCurrLineQty);"										
										
IF (qty - UsedCurrLineQty) > 0 THEN										
"mmMembTmp.AddToList(tmpLineNo,tmpPrice,(qty - UsedCurrLineQty),FORMAT(PeriodicDiscountLines2.""Line No.""));"										
										
IF useQty > 0 THEN BEGIN										
"mmOfferList.AddToList(tmpLineNo,tmpPrice,UsedCurrLineQty,FORMAT(PeriodicDiscountLines2.""Line No.""));"										
										
noLinesLeft := noLinesLeft - linesMoved;										
IF (noLinesLeft <= 0) THEN BEGIN										
IF CheckToRegister(tmpMixMatchNeededLine) THEN BEGIN										
mmCounter := mmCounter + 1;										
"IF RegisterMixMatch(PeriodicDiscount,PeriodicDiscountLines,currLine,mmCounter,RegisterOk,CurrAmountLimit) THEN"										
mixMatchOK := TRUE;										
										
noTimes := noTimes - 1;										
mmMembList.CopyList(mmMembTmp);										
mmOfferList.ResetList;										
mmMembTmp.ResetList;										
"noLinesLeft := PeriodicDiscount.""No. of Lines to Trigger"";"										
"InitNeededLines(PeriodicDiscount.""No."",tmpMixMatchNeededLine,currLine,FALSE);"										
diffCount := 0;										
END;										
END;										
END;										
END;										
END;										
"currLine.GET(currLine.""Receipt No."",currLine.""Line No."");"										
END;										
										
EXIT(mixMatchOK);										
END;										
										
PROCEDURE InsertTmpPosLine@1100409003(PosLine@1100409000 : Record 99008981);										
BEGIN										
//InsertTpmPosLine										
tmpMMPosTrLine := PosLine;										
tmpMMPosTrLine.INSERT;										
										
"InitGlobals(PosLine,TRUE);"										
FindPeriodicOffers(tmpMMPosTrLine);										
END;										
										
PROCEDURE DeleteAllTmpPosLine@1100409006();										
VAR										
posTransPerDisc@1100409000 : Record 99008943;										
BEGIN										
//DeleteAllTmpPosLine										
tmpMMPosTrLine.RESET;										
IF tmpMMPosTrLine.FIND('-') THEN										
REPEAT										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",tmpMMPosTrLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",tmpMMPosTrLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN										
posTransPerDisc.DELETE;										
UNTIL tmpMMPosTrLine.NEXT = 0;										
END;										
										
PROCEDURE DeleteTmpOfferPosCalc@1100409005(PosLine@1100409000 : Record 99008981);										
VAR										
OffPosCal@1100409001 : Record 99001561;										
PerDiscType@1100409002 : Record 99008943;										
BEGIN										
//DeleteTmpOfferPosCalc										
"GetPerDiscLine(PerDiscType,PosLine);"										
										
CLEAR(OffPosCal);										
"OffPosCal.SETRANGE(""Receipt No."",PosLine.""Receipt No."");"										
"OffPosCal.SETRANGE(""Periodic Disc. Type"",OffPosCal.""Periodic Disc. Type""::""Mix&Match"");"										
"OffPosCal.SETRANGE(""Group No."",PerDiscType.""Periodic Disc. Group"");"										
"OffPosCal.SETRANGE(""Trans. Line No."",PosLine.""Line No."");"										
OffPosCal.DELETEALL;										
END;										
										
PROCEDURE InsertTransDiscAmount@1100409016(VAR posTransLine@1100409000 : Record 99008981;DiscAmount@1100409001 : Decimal;DiscType@11	4	90	2	:	"'Periodic Disc.,Customer,InfoCode,Total,Line';PerDisc@1100409005 : Code[20]);"					
VAR										
posTransPerDisc@1100409003 : Record 99008943;										
LineNo@1100409004 : Integer;										
BEGIN										
//InsertTransDiscAmount										
"IF (posTransLine.""Entry Type"" <> posTransLine.""Entry Type""::Item) THEN"										
EXIT;										
										
CLEAR(posTransPerDisc);										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,DiscType);"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN BEGIN										
"IF (DiscType = DiscType::""Periodic Disc."") AND (DiscAmount <> 0) THEN"										
"UpdatePerDiscType(posTransPerDisc,PerDisc);"										
										
"posTransPerDisc.""Discount Amount"" := DiscAmount;"										
posTransPerDisc.MODIFY;										
END										
ELSE BEGIN										
IF (DiscAmount <> 0) THEN BEGIN										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDLAST THEN										
"LineNo := posTransPerDisc.""No."" + 10000"										
ELSE										
LineNo := 10000;										
										
CLEAR(posTransPerDisc);										
"posTransPerDisc.""Receipt No."" := posTransLine.""Receipt No."";"										
"posTransPerDisc.""Line No."" := posTransLine.""Line No."";"										
"posTransPerDisc.""No."" := LineNo;"										
posTransPerDisc.DiscType := DiscType;										
"posTransPerDisc.""Discount Amount"" := DiscAmount;"										
										
"IF (DiscType = DiscType::""Periodic Disc."") AND (DiscAmount <> 0) THEN"										
"UpdatePerDiscType(posTransPerDisc,PerDisc);"										
										
posTransPerDisc.INSERT;										
END;										
END;										
										
CASE DiscType OF										
"DiscType::""Periodic Disc."" :"										
"posTransLine.""Periodic Discount Amount"" := DiscAmount;"										
DiscType::Total:										
"posTransLine.""Total Disc. Amount"" := DiscAmount;"										
END;										
END;										
										
PROCEDURE InsertTransDiscPercent@1100409015(VAR posTransLine@1100409000 : Record 99008981;DiscPercent@1100409001 : Decimal;DiscType@	110	40	90	2	": 'Periodic Disc.,Customer,InfoCode,Total,Line';PerDisc@1100409006 : Code[20]);"					
VAR										
posTransPerDisc@1100409003 : Record 99008943;										
posTransPerDisc2@1100409009 : Record 99008943;										
lPOSTransLine@1100409005 : Record 99008981;										
LineNo@1100409004 : Integer;										
Amount@1100409007 : Decimal;										
lDiscount@1100409008 : Decimal;										
A@1100409010 : Text[30];										
BEGIN										
//InsertTransDiscPercent										
"InitGlobals(posTransLine,FALSE);"										
										
"IF (posTransLine.""Entry Type"" <> posTransLine.""Entry Type""::Item) THEN"										
EXIT;										
										
"IF NOT lPOSTransLine.GET(posTransLine.""Receipt No."",posTransLine.""Line No."") THEN BEGIN"										
EXIT;										
END;										
										
CLEAR(posTransPerDisc);										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,DiscType);"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN BEGIN										
"IF (DiscPercent <> posTransPerDisc.""Discount %"") OR"										
"(PerDisc <> posTransPerDisc.""Periodic Disc. Group"")"										
THEN BEGIN										
"posTransPerDisc.""Discount %"" := DiscPercent;"										
										
IF (DiscPercent = 0) THEN BEGIN										
"posTransPerDisc.""Discount Amount"" := 0;"										
"posTransPerDisc.""Periodic Disc. Group"" := '';"										
"IF (DiscType = DiscType::""Periodic Disc."") THEN"										
"posTransPerDisc.""Offer No."" := '';"										
END										
ELSE BEGIN										
"IF (DiscType = DiscType::""Periodic Disc."") THEN BEGIN"										
"UpdatePerDiscType(posTransPerDisc,PerDisc);"										
END										
ELSE BEGIN										
"posTransPerDisc.""Periodic Disc. Group"" := '';"										
END;										
END;										
"posTransPerDisc.""Total Disc. %"" := 0;"										
IF DiscType = DiscType::Customer THEN BEGIN										
Amount := posTransLine.Price * posTransLine.Quantity;										
"posTransPerDisc.""Discount Amount"" :="										
"ROUND(Amount * posTransPerDisc.""Discount %"" / 100,PosFuncProfile.""Amount Rounding to"");"										
END;										
posTransPerDisc.MODIFY;										
END;										
END										
ELSE BEGIN										
IF (DiscPercent <> 0) THEN BEGIN										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDLAST THEN										
"LineNo := posTransPerDisc.""No."" + 10000"										
ELSE										
LineNo := 10000;										
										
CLEAR(posTransPerDisc);										
"posTransPerDisc.""Receipt No."" := posTransLine.""Receipt No."";"										
"posTransPerDisc.""Line No."" := posTransLine.""Line No."";"										
"posTransPerDisc.""No."" := LineNo;"										
posTransPerDisc.DiscType := DiscType;										
"posTransPerDisc.""Discount %"" := DiscPercent;"										
										
"IF (DiscType = DiscType::""Periodic Disc."") THEN BEGIN"										
"UpdatePerDiscType(posTransPerDisc,PerDisc);"										
END;										
CASE DiscType OF										
DiscType::Customer:										
BEGIN										
Amount := posTransLine.Price * posTransLine.Quantity;										
"posTransPerDisc.""Discount Amount"" :="										
"ROUND(Amount * posTransPerDisc.""Discount %"" / 100,PosFuncProfile.""Amount Rounding to"");"										
END;										
DiscType::Line:										
BEGIN										
"posTransPerDisc.""Sequence Code"" := RetailSetup.""Line Disc. Manual Sequence"";"										
"posTransPerDisc.""Sequence Function"" := RetailSetup.""Line Disc. Manual Function"";"										
"posTransPerDisc.""Manual Selection"" := TRUE;"										
END;										
DiscType::Total:										
BEGIN										
"posTransPerDisc.""Sequence Code"" := RetailSetup.""Total Disc. Manual Sequence"";"										
"posTransPerDisc.""Sequence Function"" := RetailSetup.""Total Disc. Manual Function"";"										
"posTransPerDisc.""Manual Selection"" := TRUE;"										
END;										
DiscType::InfoCode:										
BEGIN										
"posTransPerDisc.""Sequence Code"" := RetailSetup.""Infocode Discount Sequence"";"										
"posTransPerDisc.""Sequence Function"" := RetailSetup.""Infocode Discount Function"";"										
"posTransPerDisc.""Manual Selection"" := TRUE;"										
"posTransPerDisc.""Discount Amount"" :="										
"ROUND(posTransLine.Amount * posTransPerDisc.""Discount %"" / 100,PosFuncProfile.""Amount Rounding to"");"										
END;										
END;										
posTransPerDisc.INSERT;										
END;										
END;										
										
CASE DiscType OF										
"DiscType::""Periodic Disc."" :"										
BEGIN										
"posTransLine.""Periodic Disc. %"" := DiscPercent;"										
END;										
DiscType::Customer:										
BEGIN										
"posTransLine.""Customer Disc. %"" := DiscPercent;"										
END;										
DiscType::InfoCode:										
BEGIN										
"posTransLine.""InfoCode Disc. %"" := DiscPercent;"										
END;										
DiscType::Total:										
BEGIN										
"posTransLine.""Total Disc. %"" := DiscPercent;"										
END;										
DiscType::Line:										
BEGIN										
"posTransLine.""Line Disc. %"" := DiscPercent;"										
END;										
END;										
										
"IF NOT posTransLine.""System-Unchangable Price"" THEN"										
"posTransLine.""System-Unchangable Price"" := IsPosTransLineBlockedByOffer(posTransLine,0);"										
END;										
										
PROCEDURE InsertTransDiscPerType@1100409018(posTransLine@1100409003 : Record 99008981;InsPerDiscType@1100409002 : Boolean;PerDiscTyp	e@1	100	40	900	"4 : ' ,Multibuy,Mix&Match,Disc. Offer,Item Point';InsPerDiscCode@1100409001 : Boolean;PerDiscCode@1100409000 : Code[20]);"					
VAR										
posTransPerDisc@1100409005 : Record 99008943;										
LineNo@1100409006 : Integer;										
InsModOk@1100409007 : Boolean;										
BEGIN										
//InsertTransDiscPerType										
InsModOk := FALSE;										
										
posTransPerDisc.RESET;										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,posTransPerDisc.DiscType::""Periodic Disc."");"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN BEGIN										
"IF InsPerDiscType AND (PerDiscType <> posTransPerDisc.""Periodic Disc. Type"") THEN BEGIN"										
InsModOk := TRUE;										
"posTransPerDisc.""Periodic Disc. Type"" := PerDiscType;"										
END;										
"IF InsPerDiscCode AND (PerDiscCode <> posTransPerDisc.""Periodic Disc. Group"") THEN BEGIN"										
InsModOk := TRUE;										
"posTransPerDisc.""Periodic Disc. Group"" := PerDiscCode;"										
END;										
"IF PerDiscType = PerDiscType::""Item Point"" THEN BEGIN"										
"posTransPerDisc.Points := -posTransLine.""Item Point Offer Member Points"";"										
"posTransPerDisc.""Mix & Match Line No."" := ItemPointOfferLineNo;"										
END;										
ItemPointOfferLineNo := 0;										
"UpdatePerDiscType(posTransPerDisc,posTransPerDisc.""Periodic Disc. Group"");"										
IF InsModOk THEN										
posTransPerDisc.MODIFY;										
END										
ELSE BEGIN										
"InsModOk := (InsPerDiscType AND (PerDiscType <> PerDiscType::"" "")) OR (InsPerDiscCode AND (PerDiscCode <> ''));"										
IF InsModOk THEN BEGIN										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDLAST THEN										
"LineNo := posTransPerDisc.""No."" + 10000"										
ELSE										
LineNo := 10000;										
										
CLEAR(posTransPerDisc);										
"posTransPerDisc.""Receipt No."" := posTransLine.""Receipt No."";"										
"posTransPerDisc.""Line No."" := posTransLine.""Line No."";"										
"posTransPerDisc.""No."" := LineNo;"										
"posTransPerDisc.DiscType := posTransPerDisc.DiscType::""Periodic Disc."";"										
IF InsPerDiscType THEN										
"posTransPerDisc.""Periodic Disc. Type"" := PerDiscType;"										
IF InsPerDiscCode THEN										
"posTransPerDisc.""Periodic Disc. Group"" := PerDiscCode;"										
"posTransPerDisc.""POS Terminal No."" := posTransLine.""POS Terminal No."";"										
"IF PerDiscType = PerDiscType::""Item Point"" THEN BEGIN"										
"posTransPerDisc.Points := -posTransLine.""Item Point Offer Member Points"";"										
"posTransPerDisc.""Mix & Match Line No."" := ItemPointOfferLineNo;"										
END;										
ItemPointOfferLineNo := 0;										
"UpdatePerDiscType(posTransPerDisc,posTransPerDisc.""Periodic Disc. Group"");"										
posTransPerDisc.INSERT;										
END;										
END;										
END;										
										
PROCEDURE UpdatePerDiscType@1100409013(VAR PosTrPerDisc@1100409000 : Record 99008943;PerDisc@1100409001 : Code[20]);										
VAR										
PerDiscRec@1100409002 : Record 99001453;										
BEGIN										
//UpdatePerDiscType										
"PosTrPerDisc.""Periodic Disc. Type"" := 0;"										
"PosTrPerDisc.""Periodic Disc. Group"" := '';"										
IF PerDiscRec.GET(PerDisc) THEN BEGIN										
"PosTrPerDisc.""Periodic Disc. Group"" := PerDisc;"										
"PosTrPerDisc.""Offer No."" := PosTrPerDisc.""Periodic Disc. Group"";"										
CASE PerDiscRec.Type OF										
PerDiscRec.Type::Multibuy:										
"PosTrPerDisc.""Periodic Disc. Type"" := PosTrPerDisc.""Periodic Disc. Type""::Multibuy;"										
"PerDiscRec.Type::""Mix&Match"":"										
"PosTrPerDisc.""Periodic Disc. Type"" := PosTrPerDisc.""Periodic Disc. Type""::""Mix&Match"";"										
"PerDiscRec.Type::""Disc. Offer"":"										
"PosTrPerDisc.""Periodic Disc. Type"" := PosTrPerDisc.""Periodic Disc. Type""::""Disc. Offer"";"										
"PerDiscRec.Type::""Item Point"":"										
"PosTrPerDisc.""Periodic Disc. Type"" := PosTrPerDisc.""Periodic Disc. Type""::""Item Point"";"										
END;										
"PosTrPerDisc.""Block Manual Price Change"" := PerDiscRec.""Block Manual Price Change"";"										
"PosTrPerDisc.""Block Line Discount Offer"" := PerDiscRec.""Block Line Discount Offer"";"										
"PosTrPerDisc.""Block Total Discount Offer"" := PerDiscRec.""Block Total Discount Offer"";"										
"PosTrPerDisc.""Block Tender Type Discount"" := PerDiscRec.""Block Tender Type Discount"";"										
"PosTrPerDisc.""Block Loyalty Points"" := PerDiscRec.""Block Member Points"";"										
"PosTrPerDisc.""Member Attribute"" := PerDiscRec.""Member Attribute"";"										
"PosTrPerDisc.""Member Attribute Value"" := PerDiscRec.""Member Attribute Value"";"										
"PosTrPerDisc.""Tracking No."" := PerDiscRec.""Discount Tracking No."";"										
"PosTrPerDisc.""Tracking Instance ID"" := PosFunctions.GetCurrTrackingInstanceID;"										
END;										
END;										
										
PROCEDURE GetTransDisc@1100409012(VAR posTransLine@1100409000 : Record 99008981;AllDisc@1100409005 : Boolean;DiscType@1100409002 : '	Per	iod	ic	Di	"sc.,Customer,InfoCode,Total,Line') PerDisc : Code[20];"					
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
PeriDiscPer@1100409006 : Decimal;										
PeriDiscAmo@1100409007 : Decimal;										
CustDiscPer@1100409008 : Decimal;										
InfoDiscPer@1100409009 : Decimal;										
TotaDiscPer@1100409010 : Decimal;										
TotaDiscAmo@1100409011 : Decimal;										
LineDiscPer@1100409012 : Decimal;										
BEGIN										
//GetTransDisc										
CLEAR(PerDisc);										
										
"IF (posTransLine.""Entry Type"" <> posTransLine.""Entry Type""::Item) THEN"										
EXIT('');										
										
PeriDiscPer := 0;										
PeriDiscAmo := 0;										
CustDiscPer := 0;										
InfoDiscPer := 0;										
TotaDiscPer := 0;										
TotaDiscAmo := 0;										
LineDiscPer := 0;										
										
CLEAR(posTransPerDisc);										
										
IF NOT AllDisc THEN BEGIN										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,DiscType);"										
END;										
										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDSET THEN BEGIN										
REPEAT										
CASE posTransPerDisc.DiscType OF										
"posTransPerDisc.DiscType::""Periodic Disc."" :"										
BEGIN										
"PeriDiscPer := PeriDiscPer + posTransPerDisc.""Discount %"";"										
"PeriDiscAmo := PeriDiscAmo + posTransPerDisc.""Discount Amount"";"										
"posTransLine.""Periodic Disc. %"" := PeriDiscPer;"										
"posTransLine.""Periodic Discount Amount"" := PeriDiscAmo;"										
"PerDisc := posTransPerDisc.""Periodic Disc. Group"";"										
END;										
posTransPerDisc.DiscType::Customer:										
BEGIN										
"CustDiscPer := CustDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""Customer Disc. %"" := CustDiscPer;"										
END;										
posTransPerDisc.DiscType::InfoCode:										
BEGIN										
"InfoDiscPer := InfoDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""InfoCode Disc. %"" := InfoDiscPer;"										
END;										
posTransPerDisc.DiscType::Total:										
BEGIN										
"TotaDiscPer := TotaDiscPer + posTransPerDisc.""Discount %"";"										
"TotaDiscAmo := TotaDiscAmo + posTransPerDisc.""Discount Amount"";"										
"posTransLine.""Total Disc. %"" := TotaDiscPer;"										
"posTransLine.""Total Disc. Amount"" := TotaDiscAmo;"										
END;										
posTransPerDisc.DiscType::Line:										
BEGIN										
"LineDiscPer := LineDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""Line Disc. %"" := LineDiscPer;"										
END;										
END;										
UNTIL posTransPerDisc.NEXT = 0;										
END;										
										
EXIT(PerDisc);										
END;										
										
PROCEDURE UpdateTransDiscAmount@1100409011(VAR posTransLine@1100409000 : Record 99008981);										
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
DiscAmount@1100409002 : Decimal;										
BEGIN										
//UpdateTransDiscAmount										
DiscAmount := 0;										
CLEAR(posTransPerDisc);										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN BEGIN										
REPEAT										
"DiscAmount := DiscAmount + posTransPerDisc.""Discount Amount"";"										
UNTIL posTransPerDisc.NEXT = 0;										
END;										
"posTransLine.""Discount Amount"" := DiscAmount;"										
END;										
										
PROCEDURE CalcTransDiscPercent@1100409008(VAR posTransLine@1100409000 : Record 99008981);										
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
PerDiscPer@1100409004 : Decimal;										
CustDiscPer@1100409005 : Decimal;										
InfoDiscPer@1100409006 : Decimal;										
TotDiscPer@1100409007 : Decimal;										
LineDiscPer@1100409008 : Decimal;										
p1@1100409002 : Decimal;										
p2@1100409003 : Decimal;										
DiscSeqBuffer@1100409011 : TEMPORARY Record 99001675;										
p3@1100409010 : Decimal;										
BEGIN										
//CalcTransDiscPercent										
PerDiscPer  := 0;										
CustDiscPer := 0;										
InfoDiscPer := 0;										
TotDiscPer  := 0;										
LineDiscPer := 0;										
										
CLEAR(posTransPerDisc);										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
										
DiscSeqBuffer.RESET;										
DiscSeqBuffer.DELETEALL;										
IF posTransPerDisc.FINDSET THEN REPEAT										
//REPEAT										
CASE posTransPerDisc.DiscType OF										
"posTransPerDisc.DiscType::""Periodic Disc."":"										
BEGIN										
"PerDiscPer := PerDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""Periodic Disc. %"" := PerDiscPer;"										
END;										
posTransPerDisc.DiscType::Customer:										
BEGIN										
"CustDiscPer := CustDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""Customer Disc. %"" := CustDiscPer;"										
END;										
posTransPerDisc.DiscType::InfoCode:										
BEGIN										
"InfoDiscPer := InfoDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""InfoCode Disc. %"" := InfoDiscPer;"										
"CollectDiscCalcSeq(posTransPerDisc,DiscSeqBuffer);"										
END;										
posTransPerDisc.DiscType::Total:										
BEGIN										
"TotDiscPer := TotDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""Total Disc. %"" := TotDiscPer;"										
"CollectDiscCalcSeq(posTransPerDisc,DiscSeqBuffer);"										
END;										
posTransPerDisc.DiscType::Line:										
BEGIN										
"LineDiscPer := LineDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""Line Disc. %"" := LineDiscPer;"										
"CollectDiscCalcSeq(posTransPerDisc,DiscSeqBuffer);"										
END;										
posTransPerDisc.DiscType::Coupon:										
BEGIN										
"LineDiscPer := LineDiscPer + posTransPerDisc.""Discount %"";"										
"posTransLine.""Line Disc. %"" := LineDiscPer;"										
"CollectDiscCalcSeq(posTransPerDisc,DiscSeqBuffer);"										
END;										
"posTransPerDisc.DiscType::""Total Discount"","										
"posTransPerDisc.DiscType::""Tender Type"","										
"posTransPerDisc.DiscType::""Line Discount"" :"										
BEGIN										
"CollectDiscCalcSeq(posTransPerDisc,DiscSeqBuffer);"										
END;										
END;										
UNTIL posTransPerDisc.NEXT = 0;										
										
p1 := PerDiscPer + CustDiscPer;										
										
"posTransLine.""Discount %"" := p1;"										
p3 := CalcDiscSeqPercent(DiscSeqBuffer);										
"posTransLine.""Discount %"" := posTransLine.""Discount %"" + p3 - ((posTransLine.""Discount %"" * p3) / 100);"										
END;										
										
PROCEDURE UpdateTransTotalDiscPercent@1100409009(VAR posTransLine@1100409000 : Record 99008981);										
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
TotDiscPer@1100409002 : Decimal;										
BEGIN										
//UpdateTransTotalDiscPercent										
										
										
TotDiscPer := 0;										
CLEAR(posTransPerDisc);										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,posTransPerDisc.DiscType::Total);"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN										
"TotDiscPer := posTransPerDisc.""Discount %"";"										
										
"posTransLine.""Total Disc. %"" := TotDiscPer;"										
END;										
										
PROCEDURE UpdatePosTransPerDisc@1100409007(posTransLine@1100409000 : Record 99008981);										
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
BEGIN										
//UpdatePosTransPerDisc										
										
										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FIND('-') THEN BEGIN										
REPEAT										
"IF (posTransPerDisc.""Entry Status"" <> posTransLine.""Entry Status"") THEN BEGIN"										
"posTransPerDisc.""Entry Status"" := posTransLine.""Entry Status"";"										
posTransPerDisc.MODIFY;										
END;										
UNTIL posTransPerDisc.NEXT = 0;										
END;										
END;										
										
"PROCEDURE IsPerDiscType@1100409010(posTransLine@1100409001 : Record 99008981;PerDiscType@1100409000 : ' ,Multibuy,Mix&Match,Disc. Of"	fer	",It"	em	Po	int') : Boolean;					
VAR										
posTransPerDisc@1100409002 : Record 99008943;										
BEGIN										
//IsPerDiscType										
										
posTransPerDisc.RESET;										
"posTransPerDisc.SETCURRENTKEY(""Periodic Disc. Type"");"										
"posTransPerDisc.SETRANGE(""Periodic Disc. Type"",PerDiscType);"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
"posTransPerDisc.SETRANGE(""Entry Status"",posTransPerDisc.""Entry Status""::"" "");"										
IF posTransPerDisc.FINDFIRST THEN										
"IF posTransPerDisc.""Periodic Disc. Group"" <> '' THEN"										
EXIT(TRUE)										
ELSE										
EXIT(FALSE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE GetPerDiscLine@1100409014(VAR posPerDiscLine@1100409003 : Record 99008943;posTransLine@1100409002 : Record 99008981) : Boo	lea	n;								
VAR										
posTransPerDisc@1100409000 : Record 99008943;										
BEGIN										
//GetPerDiscLine										
posTransPerDisc.RESET;										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,posTransPerDisc.DiscType::""Periodic Disc."");"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN BEGIN										
//LS7.1-01 -										
"IF posTransPerDisc.""Periodic Disc. Group"" <> '' THEN BEGIN"										
posPerDiscLine := posTransPerDisc;										
EXIT(TRUE);										
END ELSE BEGIN										
CLEAR(posPerDiscLine);										
EXIT(FALSE);										
END;										
//LS7.1-01 +										
END										
ELSE BEGIN										
CLEAR(posPerDiscLine);										
EXIT(FALSE);										
END;										
END;										
										
PROCEDURE IsPromotionForLoyaltyScheme@1100409017(LoyScheme@1100409001 : Code[10];currPosTrans@1100409002 : Record 99008980) : Boolea	n;									
VAR										
Promotion@1100409000 : Record 99001502;										
BEGIN										
//IsPromotionForLoyaltyScheme										
IF (LoyScheme <> '') THEN BEGIN										
Promotion.RESET;										
"Promotion.SETCURRENTKEY(Status,""Coupon Code"",""Customer Disc. Group"");"										
"Promotion.SETRANGE(Status,Promotion.Status::Enabled);"										
"Promotion.SETRANGE(""Member Value"",LoyScheme);"										
IF Promotion.FINDSET THEN BEGIN										
REPEAT										
"IF rboPriceUtil.DiscValPerValid(Promotion.""Validation Period ID"","										
"currPosTrans.""Trans. Date"","										
"currPosTrans.""Trans Time"") THEN"										
EXIT(TRUE);										
UNTIL Promotion.NEXT = 0;										
END;										
END;										
										
EXIT(FALSE);										
END;										
										
PROCEDURE IsPromotionForMember@1100409028(VAR pCurrPosTrans@1100409002 : Record 99008980) : Boolean;										
VAR										
Promotion@1100409000 : Record 99001502;										
BEGIN										
//IsPromotionForMember										
"IF pCurrPosTrans.""Member Card No."" <> '' THEN BEGIN"										
rboPriceUtil.ClearCouponAndMemberInfo;										
"IF ValidateOfferMemberInfo(pCurrPosTrans,0) THEN"										
SetMemberInfo;										
										
Promotion.RESET;										
"Promotion.SETCURRENTKEY(Status,Type);"										
"Promotion.SETRANGE(Status,Promotion.Status::Enabled);"										
IF Promotion.FINDSET THEN BEGIN										
REPEAT										
"IF rboPriceUtil.DiscValPerValid(Promotion.""Validation Period ID"",pCurrPosTrans.""Trans. Date"",pCurrPosTrans.""Trans Time"") AND"										
"rboPriceUtil.MemberFilterPassed(Promotion.""Member Type"",Promotion.""Member Value"") AND"										
"rboPriceUtil.MemberAttrFilterPassed(Promotion.""Member Attribute"",Promotion.""Member Attribute Value"")"										
THEN										
EXIT(TRUE);										
UNTIL Promotion.NEXT = 0;										
END;										
END;										
										
EXIT(FALSE);										
END;										
										
PROCEDURE IsPromotionForCoupon@1100409039(pCouponCode@1100409003 : Code[10];VAR pCurrPosTrans@1100409002 : Record 99008980) : Boolea	n;									
VAR										
Promotion@1100409000 : Record 99001502;										
BEGIN										
//IsPromotionForMember										
IF pCouponCode <> '' THEN BEGIN										
Promotion.RESET;										
"Promotion.SETCURRENTKEY(Status,""Coupon Code"",""Customer Disc. Group"");"										
"Promotion.SETRANGE(Status,Promotion.Status::Enabled);"										
"Promotion.SETRANGE(""Coupon Code"",pCouponCode);"										
IF Promotion.FINDSET THEN BEGIN										
REPEAT										
"IF rboPriceUtil.DiscValPerValid(Promotion.""Validation Period ID"",pCurrPosTrans.""Trans. Date"",pCurrPosTrans.""Trans Time"")"										
THEN										
EXIT(TRUE);										
UNTIL Promotion.NEXT = 0;										
END;										
END;										
										
EXIT(FALSE);										
END;										
										
PROCEDURE IsPromotionForCustDiscGroup@1100409019(CustDiscGroup@1100409001 : Code[10];currPosTrans@1100409002 : Record 99008980) : Bo	ole	an;								
VAR										
Promotion@1100409000 : Record 99001502;										
BEGIN										
//IsPromotionForCustDiscGroup										
IF (CustDiscGroup <> '') THEN BEGIN										
Promotion.RESET;										
"Promotion.SETCURRENTKEY(Status,""Coupon Code"",""Customer Disc. Group"");"										
"Promotion.SETRANGE(Status,Promotion.Status::Enabled);"										
"Promotion.SETRANGE(""Customer Disc. Group"",CustDiscGroup);"										
IF Promotion.FINDSET THEN BEGIN										
REPEAT										
"IF rboPriceUtil.DiscValPerValid(Promotion.""Validation Period ID"","										
"currPosTrans.""Trans. Date"","										
"currPosTrans.""Trans Time"") THEN"										
EXIT(TRUE);										
UNTIL Promotion.NEXT = 0;										
END;										
END;										
EXIT(FALSE);										
END;										
										
"PROCEDURE ValidateOfferMemberInfo@1100409020(VAR pPOSTransaction@1100409000 : Record 99008980;pOfferType@1100409006 : 'Promotion,Dea"	"l,P"	eri	od	ic'	) : Boolean;					
VAR										
MembershipCardTemp@1100409004 : TEMPORARY Record 99009003;										
MemberAccountTemp@1100409003 : TEMPORARY Record 99009001;										
MemberAttributeListTemp@1100409002 : TEMPORARY Record 99009033;										
MemberPreAttListTemp@1100409005 : TEMPORARY Record 99009033;										
MemberInfoOk@1100409001 : Boolean;										
BEGIN										
//ValidateMemberInfo										
MemberInfoOk := TRUE;										
										
{										
"IF NOT PosFunctions.MemberInfoHasBeenLoaded(pPOSTransaction.""Member Card No."") THEN"										
"IF NOT PosFunctions.LoadMemberInfo(pPOSTransaction.""Member Card No."") THEN"										
MemberInfoOk := FALSE;										
}										
"MemberInfoOk := PosFunctions.MemberInfoHasBeenLoaded(pPOSTransaction.""Member Card No."");"										
										
IF MemberInfoOk THEN										
MemberInfoOk := PosFunctions.GetMemberShipCardInfo(MembershipCardTemp);										
										
IF MemberInfoOk THEN										
MemberInfoOk := PosFunctions.GetMemberAccountInfo(MemberAccountTemp);										
										
IF MemberInfoOk THEN										
MemberInfoOk := PosFunctions.GetMemberAttributeList(MemberAttributeListTemp);										
										
IF MemberInfoOk THEN BEGIN										
MemberAttributeListTemp.RESET;										
"MemberAttributeListTemp.SETRANGE(Status,MemberAttributeListTemp.Status::Pending);"										
IF MemberAttributeListTemp.FIND('-') THEN BEGIN										
"IF pOfferType IN[pOfferType::Promotion,pOfferType::Deal] THEN"										
"FindOfferPreMemberAttr(MemberPreAttListTemp,pOfferType)"										
ELSE										
FindPeriodicDiscPreMemberAttr(MemberPreAttListTemp);										
REPEAT										
"MemberPreAttListTemp.SETRANGE(Code,MemberAttributeListTemp.Code);"										
IF MemberPreAttListTemp.FIND('-') THEN BEGIN										
"MemberInfoOk := PosFunctions.GetAndSolveMemberAttrValue(MemberAttributeListTemp.Code,MemberAttributeListTemp.Value);"										
END;										
UNTIL (MemberAttributeListTemp.NEXT = 0) OR (NOT MemberInfoOk);										
END;										
END;										
										
EXIT(MemberInfoOk);										
END;										
										
PROCEDURE FindOfferPreMemberAttr@1100409024(VAR pAttributeListList@1100409000 : TEMPORARY Record 99009033;pOfferType@1100409001 : 'P	rom	oti	on	",De"	al');					
VAR										
DiscOffer@1200070001 : Record 99001502;										
BEGIN										
//FindOfferPreMemberAttr										
pAttributeListList.RESET;										
pAttributeListList.DELETEALL;										
										
"DiscOffer.SETCURRENTKEY(Status,Type);"										
"DiscOffer.SETRANGE(Status,DiscOffer.Status::Enabled);"										
"DiscOffer.SETRANGE(Type,pOfferType);"										
"DiscOffer.SETFILTER(""Member Attribute"",'<>%1','');"										
IF DiscOffer.FIND('-') THEN										
REPEAT										
"pAttributeListList.SETRANGE(Code,DiscOffer.""Member Attribute"");"										
IF NOT pAttributeListList.FIND('-') THEN BEGIN										
pAttributeListList.INIT;										
"pAttributeListList.Code := DiscOffer.""Member Attribute"";"										
pAttributeListList.INSERT;										
END;										
UNTIL DiscOffer.NEXT = 0;										
END;										
										
PROCEDURE FindPeriodicDiscPreMemberAttr@1100409026(VAR pAttributeListList@1100409000 : TEMPORARY Record 99009033);										
VAR										
PeriodicDiscount@1200070001 : Record 99001453;										
BEGIN										
//FindPeriodicDiscPreMemberAttr										
pAttributeListList.RESET;										
pAttributeListList.DELETEALL;										
										
"PeriodicDiscount.SETCURRENTKEY(Status,Type);"										
"PeriodicDiscount.SETRANGE(Status,PeriodicDiscount.Status::Enabled);"										
"PeriodicDiscount.SETRANGE(Type,PeriodicDiscount.Type::Multibuy,PeriodicDiscount.Type::""Disc. Offer"");"										
"PeriodicDiscount.SETFILTER(""Member Attribute"",'<>%1','');"										
IF PeriodicDiscount.FIND('-') THEN										
REPEAT										
"pAttributeListList.SETRANGE(Code,PeriodicDiscount.""Member Attribute"");"										
IF NOT pAttributeListList.FIND('-') THEN BEGIN										
pAttributeListList.INIT;										
"pAttributeListList.Code := PeriodicDiscount.""Member Attribute"";"										
pAttributeListList.INSERT;										
END;										
UNTIL PeriodicDiscount.NEXT = 0;										
END;										
										
PROCEDURE SetMemberInfo@1100409021();										
VAR										
MembershipCardTemp@1100409004 : TEMPORARY Record 99009003;										
MemberAccountTemp@1100409003 : TEMPORARY Record 99009001;										
MemberAttributeListTemp@1100409002 : TEMPORARY Record 99009033;										
BEGIN										
//SetMemberInfo										
PosFunctions.GetMemberShipCardInfo(MembershipCardTemp);										
PosFunctions.GetMemberAccountInfo(MemberAccountTemp);										
PosFunctions.GetMemberAttributeList(MemberAttributeListTemp);										
"rboPriceUtil.SetMemberInfo(MembershipCardTemp,MemberAccountTemp,MemberAttributeListTemp);"										
END;										
										
PROCEDURE SetCouponInfo@1100409022(VAR pPOSTransaction@1100409000 : Record 99008980);										
VAR										
PosTransLine2@1100409001 : Record 99008981;										
CouponHeaderTemp@1100409002 : TEMPORARY Record 99001621;										
BEGIN										
//SetCouponInfo										
CouponHeaderTemp.RESET;										
CouponHeaderTemp.DELETEALL;										
										
"PosTransLine2.SETRANGE(""Receipt No."",pPOSTransaction.""Receipt No."");"										
"PosTransLine2.SETRANGE(""Entry Type"",PosTransLine2.""Entry Type""::Coupon);"										
"PosTransLine2.SETRANGE(""Entry Status"",PosTransLine2.""Entry Status""::"" "");"										
"PosTransLine2.SETRANGE(""Coupon Function"",PosTransLine2.""Coupon Function""::Use);"										
"//PosTransLine2.SETRANGE(""Valid in Transaction"",TRUE);"										
IF PosTransLine2.FIND('-') THEN										
REPEAT										
"IF NOT CouponHeaderTemp.GET(PosTransLine2.""Coupon Code"") THEN BEGIN"										
CouponHeaderTemp.INIT;										
"CouponHeaderTemp.Code := PosTransLine2.""Coupon Code"";"										
CouponHeaderTemp.INSERT;										
END;										
CouponHeaderTemp.Value := CouponHeaderTemp.Value + 1;										
CouponHeaderTemp.MODIFY;										
UNTIL PosTransLine2.NEXT = 0;										
										
rboPriceUtil.SetActiveCoupons(CouponHeaderTemp);										
END;										
										
PROCEDURE IsPosTransLineBlockedByOffer@1100409023(VAR pPosTransLine@1100409001 : Record 99008981;pBlockingType@1100409000 : 'Manual	Pri	"ce,"	Li	ne	"Disc. Offer,Total Disc. Offer,Tender Type Disc.,Loyalty Points,InfoCode') : Boolean;"					
VAR										
posTransPerDisc@1100409002 : Record 99008943;										
LineIsBlocked@1100409003 : Boolean;										
BEGIN										
//IsPosTransLineBlockedByOffer										
LineIsBlocked := FALSE;										
										
"IF pPosTransLine.""Deal Line"" THEN"										
CASE pBlockingType OF										
"pBlockingType::""Manual Price"" : LineIsBlocked := TRUE;"										
"pBlockingType::""Line Disc. Offer"" : LineIsBlocked := TRUE;"										
END;										
										
IF NOT LineIsBlocked THEN BEGIN										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pPosTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",pPosTransLine.""Line No."");"										
"posTransPerDisc.SETRANGE(""Entry Status"",posTransPerDisc.""Entry Status""::"" "");"										
IF posTransPerDisc.FIND('-') THEN										
REPEAT										
CASE pBlockingType OF										
"pBlockingType::""Manual Price"" : LineIsBlocked := posTransPerDisc.""Block Manual Price Change"";"										
"pBlockingType::""Line Disc. Offer"" : LineIsBlocked := posTransPerDisc.""Block Line Discount Offer"";"										
"pBlockingType::""Total Disc. Offer"" : LineIsBlocked := posTransPerDisc.""Block Total Discount Offer"";"										
"pBlockingType::""Tender Type Disc."" : LineIsBlocked := posTransPerDisc.""Block Tender Type Discount"";"										
"pBlockingType::""Loyalty Points"" : LineIsBlocked := posTransPerDisc.""Block Loyalty Points"";"										
"pBlockingType::InfoCode : LineIsBlocked := posTransPerDisc.""Block Infocode Discount"";"										
END;										
UNTIL (posTransPerDisc.NEXT = 0) OR (LineIsBlocked);										
END;										
										
EXIT(LineIsBlocked);										
END;										
										
PROCEDURE InsertPromotionDealEntry@1100409025(VAR pPosTransLine@1100409000 : Record 99008981);										
VAR										
Offer@1100409002 : Record 99001502;										
posTransPerDiscTmp@1100409003 : TEMPORARY Record 99008943;										
posTransPerDisc@1100409001 : Record 99008943;										
BEGIN										
//InsertPromationDealEntry										
"IF (pPosTransLine.""Promotion No."" <> '') AND Offer.GET(pPosTransLine.""Promotion No."") THEN BEGIN"										
"//LS7.1-05 pPosTransLine.""System-Exclude from Offers"" := Offer.""Block Periodic Discount"";"										
"pPosTransLine.""System-Block Periodic Discount"" := Offer.""Block Periodic Discount""; //LS7.1-05"										
"pPosTransLine.""System-Unchangable Price"" := Offer.""Block Manual Price Change"";"										
"pPosTransLine.""InfoCode Disc. Disable"" := Offer.""Block InfoCode Discount"";"										
										
posTransPerDiscTmp.INIT;										
"posTransPerDiscTmp.""Receipt No."" := pPosTransLine.""Receipt No."";"										
"posTransPerDiscTmp.""Line No."" := pPosTransLine.""Line No."";"										
"posTransPerDiscTmp.""Entry Status"" := pPosTransLine.""Entry Status"";"										
IF Offer.Type = Offer.Type::Promotion THEN										
posTransPerDiscTmp.DiscType := posTransPerDisc.DiscType::Promotion										
ELSE										
posTransPerDiscTmp.DiscType := posTransPerDisc.DiscType::Deal;										
"posTransPerDiscTmp.""POS Terminal No."" := pPosTransLine.""POS Terminal No."";"										
"posTransPerDiscTmp.""Offer No."" := Offer.""No."";"										
"posTransPerDiscTmp.""Block Manual Price Change"" := Offer.""Block Manual Price Change"";"										
"posTransPerDiscTmp.""Block Line Discount Offer"" := Offer.""Block Line Discount Offer"";"										
"posTransPerDiscTmp.""Block Total Discount Offer"" := Offer.""Block Total Discount Offer"";"										
"posTransPerDiscTmp.""Block Tender Type Discount"" := Offer.""Block Tender Type Discount"";"										
"posTransPerDiscTmp.""Block Loyalty Points"" := Offer.""Block Member Points"";"										
"posTransPerDiscTmp.""Block Infocode Discount"" := Offer.""Block InfoCode Discount"";"										
"posTransPerDiscTmp.""Member Attribute"" := Offer.""Member Attribute"";"										
"posTransPerDiscTmp.""Member Attribute Value"" := Offer.""Member Attribute Value"";"										
"posTransPerDiscTmp.""Tracking No."" := Offer.""Discount Tracking No."";"										
posTransPerDiscTmp.INSERT;										
										
"IF pPosTransLine.""Line No."" <> 0 THEN BEGIN"										
posTransPerDisc.INIT;										
posTransPerDisc := posTransPerDiscTmp;										
IF NOT posTransPerDisc.INSERT THEN										
posTransPerDisc.MODIFY;										
END ELSE BEGIN										
PosFunctions.SetPosTransDiscEntryBuffer(posTransPerDiscTmp);										
END;										
END;										
END;										
										
PROCEDURE DeletePromotionDealEntry@1100409030(VAR pPosTransLine@1100409000 : Record 99008981);										
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
BEGIN										
//DeletePromationDealEntry										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pPosTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",pPosTransLine.""Line No."");"										
"posTransPerDisc.SETRANGE(DiscType,posTransPerDisc.DiscType::Promotion,posTransPerDisc.DiscType::Deal);"										
posTransPerDisc.DELETEALL;										
										
PosFunctions.ClearPosTransDiscEntryBuffer;										
END;										
										
PROCEDURE CopyPromationEntry@1100409035(VAR pPosTransLineFrom@1100409000 : Record 99008981;VAR pPosTransLineTo@1100409003 : Record 9	900	898	1)	;						
VAR										
posTransPerDiscFrom@1100409001 : Record 99008943;										
posTransPerDiscTo@1100409002 : Record 99008943;										
posTransPerDiscTmp@1100409004 : TEMPORARY Record 99008943;										
BEGIN										
//CopyPromationEntry										
"IF pPosTransLineFrom.""Promotion No."" <> '' THEN BEGIN"										
"pPosTransLineTo.""System-Exclude from Offers"" := pPosTransLineFrom.""System-Exclude from Offers"";"										
"pPosTransLineTo.""System-Block Periodic Discount"" := pPosTransLineFrom.""System-Block Periodic Discount""; //LS7.1-05"										
"pPosTransLineTo.""System-Unchangable Price"" := pPosTransLineFrom.""System-Unchangable Price"";"										
"pPosTransLineTo.""InfoCode Disc. Disable"" := pPosTransLineFrom.""InfoCode Disc. Disable"";"										
										
posTransPerDiscFrom.RESET;										
"posTransPerDiscFrom.SETRANGE(""Receipt No."",pPosTransLineFrom.""Receipt No."");"										
"posTransPerDiscFrom.SETRANGE(""Line No."",pPosTransLineFrom.""Line No."");"										
"posTransPerDiscFrom.SETRANGE(DiscType,posTransPerDiscFrom.DiscType::Promotion);"										
IF posTransPerDiscFrom.FIND('-') THEN										
REPEAT										
posTransPerDiscTmp.INIT;										
posTransPerDiscTmp := posTransPerDiscFrom;										
"posTransPerDiscTmp.""Receipt No."" := pPosTransLineTo.""Receipt No."";"										
"posTransPerDiscTmp.""Line No."" := pPosTransLineTo.""Line No."";"										
"posTransPerDiscTmp.""Entry Status"" := pPosTransLineTo.""Entry Status"";"										
"posTransPerDiscTmp.""POS Terminal No."" := pPosTransLineTo.""POS Terminal No."";"										
posTransPerDiscTmp.INSERT;										
UNTIL posTransPerDiscFrom.NEXT = 0;										
										
"IF pPosTransLineTo.""Line No."" <> 0 THEN BEGIN"										
posTransPerDiscTmp.RESET;										
IF posTransPerDiscTmp.FIND('-') THEN										
REPEAT										
posTransPerDiscTo.INIT;										
posTransPerDiscTo := posTransPerDiscTmp;										
IF NOT posTransPerDiscTo.INSERT THEN										
posTransPerDiscTo.MODIFY;										
UNTIL posTransPerDiscTmp.NEXT = 0;										
END ELSE BEGIN										
PosFunctions.SetPosTransDiscEntryBuffer(posTransPerDiscTmp);										
END;										
END;										
END;										
										
"PROCEDURE CollectTransAddBenefits@1100409027(pReceiptNo@1100409007 : Code[20];pBenefitType@1100409000 : 'All,OnlyItemBased,NotItemBa"	sed	';V	AR	pT	ransDiscBenefitEntry@1100409003 : TEMPORARY Record 99001674);					
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
PeriodicDiscBenefits@1100409006 : Record 99001650;										
OffersTemp@1100409008 : TEMPORARY Record 99001453;										
OfferType@1100409005 : Integer;										
OfferNo@1100409004 : Code[20];										
LineNo@1100409002 : Integer;										
OfferCount@1100409009 : Integer;										
BEGIN										
//CollectTransAddBenefits										
LineNo := 0;										
										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pReceiptNo);"										
"posTransPerDisc.SETRANGE(""Entry Status"",posTransPerDisc.""Entry Status""::"" "");"										
IF posTransPerDisc.FIND('-') THEN										
REPEAT										
"//Promotion,Deal,Multibuy,Mix&Match,Disc. Offer,Total Discount,Tender Type,Item Point,Line Discount,Customer,Infocode"										
OfferNo := '';										
CASE posTransPerDisc.DiscType OF										
"posTransPerDisc.DiscType::""Periodic Disc."" :"										
BEGIN										
"OfferType := posTransPerDisc.""Periodic Disc. Type"" + 1;"										
"OfferNo := posTransPerDisc.""Periodic Disc. Group"";"										
END;										
"posTransPerDisc.DiscType::""Total Discount"" :"										
BEGIN										
"OfferType := pTransDiscBenefitEntry.""Offer Type""::""Total Discount"";"										
"OfferNo := posTransPerDisc.""Offer No."";"										
END;										
END;										
IF OfferNo <> '' THEN BEGIN										
IF NOT OffersTemp.GET(OfferNo) THEN BEGIN										
"OfferCount := PosTransOfferCount(pReceiptNo,posTransPerDisc.DiscType,OfferNo);"										
//LS7.1-06 -										
PeriodicDiscBenefits.RESET;										
"PeriodicDiscBenefits.SETCURRENTKEY(""Offer No."",""Step Amount"",Type);"										
//LS7.1-06 +										
"PeriodicDiscBenefits.SETRANGE(PeriodicDiscBenefits.""Offer No."",OfferNo);"										
"IF posTransPerDisc.DiscType = posTransPerDisc.DiscType::""Total Discount"" THEN"										
"PeriodicDiscBenefits.SETRANGE(""Step Amount"",posTransPerDisc.""Benefit Step Amount"");"										
IF pBenefitType = pBenefitType::All THEN										
"PeriodicDiscBenefits.SETRANGE(Type,PeriodicDiscBenefits.Type::Item,PeriodicDiscBenefits.Type::""Member Points"");"										
IF pBenefitType = pBenefitType::OnlyItemBased THEN										
"PeriodicDiscBenefits.SETRANGE(Type,PeriodicDiscBenefits.Type::Item,PeriodicDiscBenefits.Type::""Item-List"");"										
IF pBenefitType = pBenefitType::NotItemBased THEN										
"PeriodicDiscBenefits.SETRANGE(Type,PeriodicDiscBenefits.Type::Coupon,PeriodicDiscBenefits.Type::""Member Points"");"										
IF PeriodicDiscBenefits.FIND('-') THEN										
REPEAT										
LineNo := LineNo + 1;										
pTransDiscBenefitEntry.INIT;										
"pTransDiscBenefitEntry.""Line No."" := LineNo;"										
"pTransDiscBenefitEntry.""Offer Type"" := OfferType;"										
"pTransDiscBenefitEntry.""Offer No."" := OfferNo;"										
"pTransDiscBenefitEntry.""Offer Line No."" := PeriodicDiscBenefits.""Line No."";"										
pTransDiscBenefitEntry.Type := PeriodicDiscBenefits.Type;										
"pTransDiscBenefitEntry.""No."" := PeriodicDiscBenefits.""No."";"										
"pTransDiscBenefitEntry.""Variant Code"" := PeriodicDiscBenefits.""Variant Code"";"										
pTransDiscBenefitEntry.Description := PeriodicDiscBenefits.Description;										
"pTransDiscBenefitEntry.""Value Type"" := PeriodicDiscBenefits.""Value Type"";"										
pTransDiscBenefitEntry.Value := PeriodicDiscBenefits.Value;										
pTransDiscBenefitEntry.Quantity := OfferCount;										
pTransDiscBenefitEntry.INSERT;										
UNTIL PeriodicDiscBenefits.NEXT = 0;										
OffersTemp.INIT;										
"OffersTemp.""No."" := OfferNo;"										
OffersTemp.INSERT;										
END;										
END;										
UNTIL posTransPerDisc.NEXT = 0;										
END;										
										
PROCEDURE PosTransOfferCount@1100409041(pReceiptNo@1100409000 : Code[20];pOfferType@1100409003 : Integer;pOfferNo@1100409006 : Code[	20]	) :	I	nte	ger;					
VAR										
posTransPerDisc@1100409009 : Record 99008943;										
posTransLine@1100409008 : Record 99008981;										
TrackingInstance@1100409007 : TEMPORARY Record 2000000026;										
DiscOfferCount@1100409005 : Integer;										
BEGIN										
//PosTransOfferCount										
DiscOfferCount := 0;										
TrackingInstance.RESET;										
TrackingInstance.DELETEALL;										
										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pReceiptNo);"										
"posTransPerDisc.SETRANGE(""Entry Status"",posTransPerDisc.""Entry Status""::"" "");"										
"posTransPerDisc.SETRANGE(DiscType,pOfferType);"										
"posTransPerDisc.SETRANGE(""Offer No."",pOfferNo);"										
IF posTransPerDisc.FIND('-') THEN										
REPEAT										
"IF posTransPerDisc.""Tracking Instance ID"" <> 0 THEN BEGIN"										
"IF posTransPerDisc.""Periodic Disc. Type"" = posTransPerDisc.""Periodic Disc. Type""::""Disc. Offer"" THEN BEGIN"										
"IF posTransLine.GET(posTransPerDisc.""Receipt No."",posTransPerDisc.""Line No."") THEN"										
"DiscOfferCount := DiscOfferCount +  ROUND(posTransLine.Quantity,1.0,'>')"										
END ELSE										
"IF NOT TrackingInstance.GET(posTransPerDisc.""Tracking Instance ID"") THEN BEGIN"										
TrackingInstance.INIT;										
"TrackingInstance.Number := posTransPerDisc.""Tracking Instance ID"";"										
TrackingInstance.INSERT;										
END;										
END;										
UNTIL posTransPerDisc.NEXT = 0;										
EXIT(TrackingInstance.COUNT + DiscOfferCount);										
END;										
										
PROCEDURE PosTransMemberTrackingCount@1100409029(pReceiptNo@1100409000 : Code[20];pTrackingNo@1100409003 : Code[10];pCurrOfferNo@110	40	900	6	: C	ode[20]) : Integer;					
VAR										
posTransPerDisc@1100409010 : Record 99008943;										
posTransLine@1100409009 : Record 99008981;										
OfferNo@1100409008 : Code[20];										
TrackingInstance@1100409007 : TEMPORARY Record 2000000026;										
DiscOfferCount@1100409005 : Integer;										
BEGIN										
//PosTransMemberTrackingQty										
DiscOfferCount := 0;										
TrackingInstance.RESET;										
TrackingInstance.DELETEALL;										
										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pReceiptNo);"										
"posTransPerDisc.SETRANGE(""Entry Status"",posTransPerDisc.""Entry Status""::"" "");"										
"posTransPerDisc.SETRANGE(""Tracking No."",pTrackingNo);"										
IF posTransPerDisc.FIND('-') THEN										
REPEAT										
OfferNo := '';										
"IF posTransPerDisc.DiscType = posTransPerDisc.DiscType::""Periodic Disc."" THEN"										
"OfferNo := posTransPerDisc.""Periodic Disc. Group"""										
ELSE										
"OfferNo := posTransPerDisc.""Offer No."";"										
"IF (OfferNo <> '') AND (OfferNo <> pCurrOfferNo) AND (posTransPerDisc.""Tracking Instance ID"" <> 0) THEN BEGIN"										
"IF posTransPerDisc.""Periodic Disc. Type"" = posTransPerDisc.""Periodic Disc. Type""::""Disc. Offer"" THEN BEGIN"										
"IF posTransLine.GET(posTransPerDisc.""Receipt No."",posTransPerDisc.""Line No."") THEN"										
"DiscOfferCount := DiscOfferCount +  ROUND(posTransLine.Quantity,1.0,'>')"										
END ELSE										
"IF NOT TrackingInstance.GET(posTransPerDisc.""Tracking Instance ID"") THEN BEGIN"										
TrackingInstance.INIT;										
"TrackingInstance.Number := posTransPerDisc.""Tracking Instance ID"";"										
TrackingInstance.INSERT;										
END;										
END;										
UNTIL posTransPerDisc.NEXT = 0;										
EXIT(TrackingInstance.COUNT + DiscOfferCount);										
END;										
										
PROCEDURE PosTransMemberTrackingAmount@1100409032(pReceiptNo@1100409007 : Code[20];pTrackingNo@1100409006 : Code[10];pCurrOfferNo@11	4	90	0	:	Code[20]) : Decimal;					
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
OfferNo@1100409004 : Code[20];										
DiscAmount@1100409002 : Decimal;										
BEGIN										
//PosTransMemberTrackingAmount										
DiscAmount := 0;										
										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pReceiptNo);"										
"posTransPerDisc.SETRANGE(""Entry Status"",posTransPerDisc.""Entry Status""::"" "");"										
"posTransPerDisc.SETRANGE(""Tracking No."",pTrackingNo);"										
IF posTransPerDisc.FIND('-') THEN										
REPEAT										
OfferNo := '';										
"IF posTransPerDisc.DiscType = posTransPerDisc.DiscType::""Periodic Disc."" THEN"										
"OfferNo := posTransPerDisc.""Periodic Disc. Group"""										
ELSE										
"OfferNo := posTransPerDisc.""Offer No."";"										
"IF (OfferNo <> '') AND (OfferNo <> pCurrOfferNo) AND (posTransPerDisc.""Tracking Instance ID"" <> 0) THEN BEGIN"										
"DiscAmount := DiscAmount + posTransPerDisc.""Discount Amount"";"										
END;										
UNTIL posTransPerDisc.NEXT = 0;										
										
EXIT(DiscAmount);										
END;										
										
PROCEDURE MemberTrackingCountLimit@1100409031(VAR pPeriodicDiscountTmp@1100409000 : TEMPORARY Record 99001453) : Boolean;										
BEGIN										
//IsMemberTrackingCountActive										
"IF pPeriodicDiscountTmp.""Discount Tracking No."" <> '' THEN"										
"IF pPeriodicDiscountTmp.""Block Total Discount Offer"" THEN"										
EXIT(FALSE)										
ELSE										
EXIT(TRUE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE MemberTrackingAmountLimit@1100409033(VAR pPeriodicDiscountTmp@1100409000 : TEMPORARY Record 99001453) : Boolean;										
BEGIN										
//IsMemberTrackingAmountActive										
"IF pPeriodicDiscountTmp.""Discount Tracking No."" <> '' THEN"										
"IF pPeriodicDiscountTmp.""Block Total Discount Offer"" THEN"										
EXIT(TRUE)										
ELSE										
EXIT(FALSE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE TrackingCountLimitOk@1100409036(VAR pPeriodicDiscountTmp@1100409000 : TEMPORARY Record 99001453;CurrCountLimit@1100409001	: I	nte	ge	r;C	ompCountValue@1100409002 : Integer) : Boolean;					
BEGIN										
//TrackingCountLimitOk										
IF NOT MemberTrackingCountLimit(pPeriodicDiscountTmp) THEN										
EXIT(TRUE);										
										
IF CurrCountLimit >= CompCountValue THEN										
EXIT(TRUE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE TrackingAmountLimitOk@1100409040(VAR pPeriodicDiscountTmp@1100409000 : TEMPORARY Record 99001453;CurrAmountLimit@110040900	1:00	De	ci	mal	;CompAmountValue@1100409002 : Decimal) : Boolean;					
BEGIN										
//TrackingAmountLimitOk										
IF NOT MemberTrackingAmountLimit(pPeriodicDiscountTmp) THEN										
EXIT(TRUE);										
										
IF CurrAmountLimit >= CompAmountValue THEN										
EXIT(TRUE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE FindBestSpecialGrDiscLine@1100409034(VAR pPosTransLine@1100409000 : Record 99008981;VAR pPeriodicDiscLinesTemp@1100409002	: T	EMP	OR	ARY	Record 99001454;VAR pPeriodicDiscLines@1100409001 : Record 99001454);					
VAR										
PeriodicDiscount@1100409003 : Record 99001453;										
BestPeriodicDiscLines@1100409005 : Record 99001454;										
ItemUnitofMeasure@1100409008 : Record 5404;										
BestFound@1100409004 : Boolean;										
"""Disc%""@1100409006 : Decimal;"										
DiscAmount@1100409007 : Decimal;										
"""BestDisc%""@1100409009 : Integer;"										
BEGIN										
//FindBestSpecialGrDiscLine										
pPeriodicDiscLinesTemp.RESET;										
IF pPeriodicDiscLinesTemp.FIND('-') THEN BEGIN										
IF pPeriodicDiscLinesTemp.COUNT = 1 THEN BEGIN										
BestFound := TRUE;										
pPeriodicDiscLines := pPeriodicDiscLinesTemp;										
END;										
IF NOT BestFound THEN BEGIN										
"IF NOT PeriodicDiscount.GET(pPeriodicDiscLinesTemp.""Offer No."") THEN BEGIN"										
BestFound := TRUE;										
pPeriodicDiscLines := pPeriodicDiscLinesTemp;										
END;										
IF NOT BestFound THEN BEGIN										
IF PeriodicDiscount.Type = PeriodicDiscount.Type::Multibuy THEN BEGIN										
BestFound := TRUE;										
pPeriodicDiscLines := pPeriodicDiscLinesTemp;										
END;										
"IF (PeriodicDiscount.Type = PeriodicDiscount.Type::""Mix&Match"") AND"										
"(PeriodicDiscount.""Discount Type"" <> PeriodicDiscount.""Discount Type""::""Line spec."")"										
THEN BEGIN										
BestFound := TRUE;										
pPeriodicDiscLines := pPeriodicDiscLinesTemp;										
END;										
END;										
END;										
IF NOT BestFound THEN BEGIN										
REPEAT										
"IF PeriodicDiscount.Type = PeriodicDiscount.Type::""Disc. Offer"" THEN BEGIN"										
"IF pPeriodicDiscLinesTemp.""Deal Price/Disc. %"" <> 0 THEN"										
"""Disc%"" := pPeriodicDiscLinesTemp.""Deal Price/Disc. %"""										
"ELSE IF pPeriodicDiscLinesTemp.""Discount Amount Including VAT"" <> 0 THEN BEGIN"										
"DiscAmount := pPeriodicDiscLinesTemp.""Discount Amount Including VAT"";"										
"IF Store.""Currency Code"" <> PeriodicDiscount.""Currency Code"" THEN"										
"DiscAmount := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"",PeriodicDiscount.""Currency Code"","										
"Store.""Currency Code"",DiscAmount);"										
"IF (pPeriodicDiscLinesTemp.""Unit of Measure"" <> '') AND"										
"(ItemUnitofMeasure.GET(pPosTransLine.Number,pPosTransLine.""Unit of Measure""))"										
THEN										
"DiscAmount :=  DiscAmount * ItemUnitofMeasure.""Qty. per Unit of Measure"";"										
IF pPosTransLine.Price = 0 THEN										
"""Disc%"" := 0"										
ELSE										
"""Disc%"" := DiscAmount * 100 / pPosTransLine.Price;"										
END ELSE										
"""Disc%"" := 0;"										
END ELSE BEGIN										
"IF pPeriodicDiscLinesTemp.""Disc. Type"" = pPeriodicDiscLinesTemp.""Disc. Type""::""Deal Price"" THEN BEGIN"										
"DiscAmount := pPeriodicDiscLinesTemp.""Deal Price/Disc. %"";"										
"IF Store.""Currency Code"" <> PeriodicDiscount.""Currency Code"" THEN"										
"DiscAmount := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"",PeriodicDiscount.""Currency Code"","										
"Store.""Currency Code"",DiscAmount);"										
"IF (pPosTransLine.""Unit of Measure"" <> '') AND"										
"(ItemUnitofMeasure.GET(pPosTransLine.Number,pPosTransLine.""Unit of Measure""))"										
THEN										
"DiscAmount := DiscAmount *  ItemUnitofMeasure.""Qty. per Unit of Measure"";"										
DiscAmount := pPosTransLine.Price - DiscAmount;										
IF pPosTransLine.Price = 0 THEN										
"""Disc%"" := 0"										
ELSE										
"""Disc%"" := DiscAmount * 100 / pPosTransLine.Price;"										
END ELSE										
"""Disc%"" := pPeriodicDiscLinesTemp.""Deal Price/Disc. %"";"										
END;										
"IF ""Disc%"" > ""BestDisc%"" THEN BEGIN"										
BestFound := TRUE;										
"""BestDisc%"" := ""Disc%"";"										
BestPeriodicDiscLines := pPeriodicDiscLinesTemp;										
END;										
UNTIL pPeriodicDiscLinesTemp.NEXT = 0;										
IF BestFound THEN										
pPeriodicDiscLines := BestPeriodicDiscLines;										
END;										
END;										
END;										
										
PROCEDURE CollectDiscCalcSeq@1100409042(VAR pPosTransPerDisc@1100409003 : Record 99008943;VAR pDiscSeqBuffer@1100409002 : TEMPORARY	Rec	ord	9	900	1675);					
VAR										
DiscPercent@1100409000 : Decimal;										
BEGIN										
//CollectDiscCalcSeq										
"pDiscSeqBuffer.SETRANGE(Sequence,pPosTransPerDisc.""Sequence Code"");"										
"pDiscSeqBuffer.SETRANGE(""Function"",pPosTransPerDisc.""Sequence Function"");"										
IF NOT pDiscSeqBuffer.FIND('-') THEN BEGIN										
pDiscSeqBuffer.INIT;										
"pDiscSeqBuffer.Sequence := pPosTransPerDisc.""Sequence Code"";"										
"pDiscSeqBuffer.""Function"" := pPosTransPerDisc.""Sequence Function"";"										
"pDiscSeqBuffer.""Sequence Function"" := pPosTransPerDisc.""Sequence Function"";"										
pDiscSeqBuffer.INSERT;										
END;										
										
IF pPosTransPerDisc.DiscType = pPosTransPerDisc.DiscType::Total THEN										
"IF (pPosTransPerDisc.""Discount %"" = 0) AND (pPosTransPerDisc.""Total Disc. %"" <> 0) THEN"										
"DiscPercent := pPosTransPerDisc.""Total Disc. %"""										
ELSE										
"DiscPercent := pPosTransPerDisc.""Discount %"""										
ELSE										
"DiscPercent := pPosTransPerDisc.""Discount %"";"										
										
"CASE pPosTransPerDisc.""Sequence Function"" OF"										
"pPosTransPerDisc.""Sequence Function""::Highest :"										
"pDiscSeqBuffer.""Discount Amount"" := DiscPercent;"										
"pPosTransPerDisc.""Sequence Function""::Sum :"										
"pDiscSeqBuffer.""Discount Amount"" := pDiscSeqBuffer.""Discount Amount"" + DiscPercent;"										
"pPosTransPerDisc.""Sequence Function""::Line :"										
"pDiscSeqBuffer.""Discount Amount"" := pDiscSeqBuffer.""Discount Amount"" + DiscPercent -"										
"((pDiscSeqBuffer.""Discount Amount"" * DiscPercent) / 100);"										
END;										
pDiscSeqBuffer.MODIFY;										
END;										
										
PROCEDURE CalcDiscSeqPercent@1100409049(VAR pDiscSeqBuffer@1100409004 : TEMPORARY Record 99001675) : Decimal;										
VAR										
"""Disc%""@1100409001 : Decimal;"										
"""LastGrDisc%""@1100409002 : Decimal;"										
LastGr@1100409003 : Integer;										
BEGIN										
//CalcDiscSeqPercent										
"""Disc%"" := 0;"										
"""LastGrDisc%"" := 0;"										
										
pDiscSeqBuffer.RESET;										
IF pDiscSeqBuffer.FIND('-') THEN BEGIN										
LastGr := pDiscSeqBuffer.Sequence;										
REPEAT										
IF pDiscSeqBuffer.Sequence <> LastGr THEN BEGIN										
LastGr := pDiscSeqBuffer.Sequence;										
"""Disc%"" := ""Disc%"" + ""LastGrDisc%"" - ((""Disc%"" * ""LastGrDisc%"") /100);"										
"""LastGrDisc%"" := 0;"										
END;										
"CASE pDiscSeqBuffer.""Sequence Function"" OF"										
"pDiscSeqBuffer.""Sequence Function""::Highest :"										
"""LastGrDisc%"" := pDiscSeqBuffer.""Discount Amount"";"										
"pDiscSeqBuffer.""Sequence Function""::Sum :"										
"""LastGrDisc%"" := ""LastGrDisc%"" + pDiscSeqBuffer.""Discount Amount"";"										
"pDiscSeqBuffer.""Sequence Function""::Line :"										
"""LastGrDisc%"" := ""LastGrDisc%"" + pDiscSeqBuffer.""Discount Amount"" -"										
"((""LastGrDisc%"" * pDiscSeqBuffer.""Discount Amount"") / 100);"										
END;										
UNTIL pDiscSeqBuffer.NEXT = 0;										
"IF ""LastGrDisc%"" <> 0 THEN"										
"""Disc%"" := ""Disc%"" + ""LastGrDisc%"" - ((""Disc%"" * ""LastGrDisc%"") /100);"										
END;										
										
"EXIT(""Disc%"");"										
END;										
										
PROCEDURE UpdateTotalAmtDiscPercent@1100409037(VAR posTransLine@1100409000 : Record 99008981;pCalcTotalDiscPercent@1100409003 : Deci	mal	);								
VAR										
posTransPerDisc@1100409001 : Record 99008943;										
TotDiscPer@1100409002 : Decimal;										
BEGIN										
//UpdateTotalAmtDiscPercent										
"InitGlobals(posTransLine,FALSE);"										
										
posTransPerDisc.RESET;										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,posTransPerDisc.DiscType::Total);"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.FINDFIRST THEN BEGIN										
"posTransPerDisc.""Total Disc. %"" := pCalcTotalDiscPercent;"										
"posTransPerDisc.""Sequence Code"" := RetailSetup.""Total Disc. Manual Sequence"";"										
"posTransPerDisc.""Sequence Function"" := RetailSetup.""Total Disc. Manual Function"";"										
"posTransPerDisc.""Manual Selection"" := TRUE;"										
"IF (posTransPerDisc.""Discount %"" = 0) AND (posTransPerDisc.""Discount Amount"" = 0) THEN"										
"posTransPerDisc.""Entry Status"" := posTransPerDisc.""Entry Status""::Voided;"										
posTransPerDisc.MODIFY;										
END;										
END;										
										
PROCEDURE UpdateTransTotalDisc@1100409038(VAR posTransLine@1100409001 : Record 99008981);										
VAR										
posTransPerDisc@1100409000 : Record 99008943;										
DiscTrans@1100409002 : Record 99008981;										
TotaDiscPer@1100409003 : Decimal;										
TotaDiscAmo@1100409004 : Decimal;										
BEGIN										
//UpdateTransTotalDisc										
posTransPerDisc.RESET;										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,posTransPerDisc.DiscType::Total);"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",posTransLine.""Line No."");"										
IF posTransPerDisc.ISEMPTY THEN BEGIN										
"posTransLine.""Total Disc. %"" := 0;"										
"posTransLine.""Total Disc. Amount"" := 0;"										
"posTransLine.""Tot. Disc Info Line No."" := 0;"										
END ELSE BEGIN										
TotaDiscPer := 0;										
TotaDiscAmo := 0;										
IF posTransPerDisc.FIND('-') THEN										
REPEAT										
"TotaDiscPer := TotaDiscPer + posTransPerDisc.""Discount %"";"										
"TotaDiscAmo := TotaDiscAmo + posTransPerDisc.""Discount Amount"";"										
UNTIL posTransPerDisc.NEXT = 0;										
"posTransLine.""Total Disc. %"" := TotaDiscPer;"										
"posTransLine.""Total Disc. Amount"" := TotaDiscAmo;"										
IF (TotaDiscAmo <> 0) THEN BEGIN										
DiscTrans.RESET;										
"DiscTrans.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"DiscTrans.SETRANGE(""Entry Type"",DiscTrans.""Entry Type""::TotalDiscount);"										
IF DiscTrans.FINDLAST THEN										
"posTransLine.""Tot. Disc Info Line No."" := DiscTrans.""Line No."";"										
END;										
END;										
END;										
										
PROCEDURE UpdateTransTotalInfoLine@1100409043(VAR posTrans@1100409001 : Record 99008980);										
VAR										
posTransPerDisc@1100409000 : Record 99008943;										
DiscTrans@1100409002 : Record 99008981;										
TotaDiscPer@1100409004 : Decimal;										
TotaDiscAmo@1100409003 : Decimal;										
BEGIN										
//UpdateTransTotalInfoLine										
posTransPerDisc.RESET;										
posTransPerDisc.SETCURRENTKEY(DiscType);										
"posTransPerDisc.SETRANGE(DiscType,posTransPerDisc.DiscType::Total);"										
"posTransPerDisc.SETRANGE(""Receipt No."",posTrans.""Receipt No."");"										
IF posTransPerDisc.ISEMPTY THEN BEGIN										
DiscTrans.RESET;										
"DiscTrans.SETRANGE(""Receipt No."",posTrans.""Receipt No."");"										
"DiscTrans.SETRANGE(""Entry Type"",DiscTrans.""Entry Type""::TotalDiscount);"										
IF NOT DiscTrans.ISEMPTY THEN										
IF DiscTrans.FIND('-') THEN										
REPEAT										
DiscTrans.VoidLine;										
UNTIL DiscTrans.NEXT = 0 ;										
END ELSE BEGIN										
TotaDiscPer := 0;										
TotaDiscAmo := 0;										
IF posTransPerDisc.FIND('-') THEN BEGIN										
"IF posTransPerDisc.""Discount %"" <> 0 THEN"										
"TotaDiscPer := posTransPerDisc.""Discount %"";"										
REPEAT										
"TotaDiscAmo := TotaDiscAmo + posTransPerDisc.""Discount Amount"";"										
UNTIL posTransPerDisc.NEXT = 0;										
END;										
IF (TotaDiscAmo <> 0) THEN BEGIN										
DiscTrans.RESET;										
"DiscTrans.SETRANGE(""Receipt No."",posTrans.""Receipt No."");"										
"DiscTrans.SETRANGE(""Entry Type"",DiscTrans.""Entry Type""::TotalDiscount);"										
IF DiscTrans.FINDLAST THEN BEGIN										
"DiscTrans.""Discount %"" := TotaDiscPer;"										
DiscTrans.Amount := -TotaDiscAmo;										
"DiscTrans.""Entry Status"" := DiscTrans.""Entry Status""::"" "";"										
DiscTrans.MODIFY(TRUE);										
END;										
END;										
END;										
END;										
										
PROCEDURE ReverseTransDiscEntries@1100409045(VAR pTransHeader@1100409000 : Record 99001472;VAR pPosTransPeriodicDisc@1100409002 : TE	MPO	RAR	Y	Rec	ord 99008943);					
VAR										
TransSalesEntry@1100409009 : Record 99001473;										
BEGIN										
//ReverseTransDiscEntries										
TransSalesEntry.RESET;										
"TransSalesEntry.SETRANGE(""Store No."",pTransHeader.""Store No."");"										
"TransSalesEntry.SETRANGE(""POS Terminal No."",pTransHeader.""POS Terminal No."");"										
"TransSalesEntry.SETRANGE(""Transaction No."",pTransHeader.""Transaction No."");"										
IF TransSalesEntry.FIND('-') THEN										
REPEAT										
"ReverseTransLineDiscEntries(TransSalesEntry,pPosTransPeriodicDisc);"										
UNTIL TransSalesEntry.NEXT = 0;										
END;										
										
PROCEDURE ReverseTransLineDiscEntries@1100409044(VAR pTransSalesEntry@1100409000 : Record 99001473;VAR pPosTransPeriodicDisc@1100409	2	:	TE	MPO	RARY Record 99008943);					
VAR										
TransDiscEntry@1100409001 : Record 99001642;										
DiscSeqBuffer@1100409005 : TEMPORARY Record 99001675;										
TransDiscEntryBuffer@1100409008 : TEMPORARY Record 99001642;										
EntryNo@1100409003 : Integer;										
TotalAmount@1100409004 : Decimal;										
SeqDiscAmount@1100409006 : Decimal;										
LastSeq@1100409007 : Integer;										
OfferType@1100409010 : Integer;										
OfferTypeIndex@1100409009 : Integer;										
BEGIN										
//ReverseTransLineDiscEntries										
EntryNo := 0;										
TotalAmount := pTransSalesEntry.Price * (-pTransSalesEntry.Quantity);										
										
TransDiscEntry.RESET;										
"TransDiscEntry.SETRANGE(""Store No."",pTransSalesEntry.""Store No."");"										
"TransDiscEntry.SETRANGE(""POS Terminal No."",pTransSalesEntry.""POS Terminal No."");"										
"TransDiscEntry.SETRANGE(""Transaction No."",pTransSalesEntry.""Transaction No."");"										
"TransDiscEntry.SETRANGE(""Line No."",pTransSalesEntry.""Line No."");"										
										
//Promotion and Deal										
"TransDiscEntry.SETRANGE(""Offer Type"",TransDiscEntry.""Offer Type""::Promotion,TransDiscEntry.""Offer Type""::Deal);"										
IF TransDiscEntry.FIND('-') THEN										
REPEAT										
pPosTransPeriodicDisc.INIT;										
"InitReversTransLineDiscRec(TransDiscEntry,pPosTransPeriodicDisc);"										
EntryNo := EntryNo + 1;										
"pPosTransPeriodicDisc.""No."" := EntryNo;"										
"IF TransDiscEntry.""Offer Type"" = TransDiscEntry.""Offer Type""::Promotion THEN"										
pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::Promotion										
ELSE										
pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::Deal;										
"pPosTransPeriodicDisc.""Block Manual Price Change"" := TRUE;"										
pPosTransPeriodicDisc.INSERT;										
UNTIL TransDiscEntry.NEXT = 0;										
										
//Periodic Discount										
"TransDiscEntry.SETRANGE(""Offer Type"",TransDiscEntry.""Offer Type""::Multibuy,TransDiscEntry.""Offer Type""::""Disc. Offer"");"										
IF TransDiscEntry.FIND('-') THEN										
REPEAT										
pPosTransPeriodicDisc.INIT;										
"InitReversTransLineDiscRec(TransDiscEntry,pPosTransPeriodicDisc);"										
EntryNo := EntryNo + 1;										
"pPosTransPeriodicDisc.""No."" := EntryNo;"										
"pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::""Periodic Disc."";"										
"pPosTransPeriodicDisc.""Discount Amount"" := TransDiscEntry.""Discount Amount"";"										
IF TotalAmount <> 0 THEN										
"pPosTransPeriodicDisc.""Discount %"" := pPosTransPeriodicDisc.""Discount Amount"" / TotalAmount * 100;"										
"pPosTransPeriodicDisc.""Periodic Disc. Type"" := TransDiscEntry.""Offer Type"" - 1;"										
"pPosTransPeriodicDisc.""Periodic Disc. Group"" := TransDiscEntry.""Offer No."";"										
"pPosTransPeriodicDisc.""Block Manual Price Change"" := TRUE;"										
pPosTransPeriodicDisc.INSERT;										
"TotalAmount := TotalAmount - pPosTransPeriodicDisc.""Discount Amount"";"										
UNTIL TransDiscEntry.NEXT = 0;										
										
"TransDiscEntry.SETRANGE(""Offer Type"",TransDiscEntry.""Offer Type""::""Item Point"");"										
IF TransDiscEntry.FIND('-') THEN REPEAT										
pPosTransPeriodicDisc.INIT;										
"InitReversTransLineDiscRec(TransDiscEntry,pPosTransPeriodicDisc);"										
EntryNo := EntryNo + 1;										
"pPosTransPeriodicDisc.""No."" := EntryNo;"										
"pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::""Periodic Disc."";"										
"pPosTransPeriodicDisc.""Discount Amount"" := TransDiscEntry.""Discount Amount"";"										
IF TotalAmount <> 0 THEN										
"pPosTransPeriodicDisc.""Discount %"" := pPosTransPeriodicDisc.""Discount Amount"" / TotalAmount * 100;"										
"pPosTransPeriodicDisc.""Periodic Disc. Type"" := pPosTransPeriodicDisc.""Periodic Disc. Type""::""Item Point"";"										
"pPosTransPeriodicDisc.""Periodic Disc. Group"" := TransDiscEntry.""Offer No."";"										
"pPosTransPeriodicDisc.""Block Manual Price Change"" := TRUE;"										
pPosTransPeriodicDisc.INSERT;										
"TotalAmount := TotalAmount - pPosTransPeriodicDisc.""Discount Amount"";"										
UNTIL TransDiscEntry.NEXT = 0;										
										
//Customer Discount										
"TransDiscEntry.SETRANGE(""Offer Type"",TransDiscEntry.""Offer Type""::Customer);"										
IF TransDiscEntry.FIND('-') THEN										
REPEAT										
pPosTransPeriodicDisc.INIT;										
"InitReversTransLineDiscRec(TransDiscEntry,pPosTransPeriodicDisc);"										
EntryNo := EntryNo + 1;										
"pPosTransPeriodicDisc.""No."" := EntryNo;"										
pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::Customer;										
"pPosTransPeriodicDisc.""Discount Amount"" := TransDiscEntry.""Discount Amount"";"										
IF TotalAmount <> 0 THEN										
"pPosTransPeriodicDisc.""Discount %"" := pPosTransPeriodicDisc.""Discount Amount"" / TotalAmount * 100;"										
"pPosTransPeriodicDisc.""Block Manual Price Change"" := TRUE;"										
pPosTransPeriodicDisc.INSERT;										
"TotalAmount := TotalAmount - pPosTransPeriodicDisc.""Discount Amount"";"										
UNTIL TransDiscEntry.NEXT = 0;										
										
//Other Discounts										
//Built a Process Seq										
TransDiscEntryBuffer.RESET;										
TransDiscEntryBuffer.DELETEALL;										
DiscSeqBuffer.RESET;										
DiscSeqBuffer.DELETEALL;										
"TransDiscEntry.SETRANGE(""Offer Type"",TransDiscEntry.""Offer Type""::""Total Discount"",TransDiscEntry.""Offer Type""::""Line Discount"");"										
IF TransDiscEntry.FIND('-') THEN										
REPEAT										
"IF TransDiscEntry.""Offer Type"" <> TransDiscEntry.""Offer Type""::""Item Point"" THEN BEGIN"										
"CASE TransDiscEntry.""Offer Type"" OF"										
"TransDiscEntry.""Offer Type""::""Total Discount"":"										
"OfferType := DiscSeqBuffer.""Offer Type""::""Total Discount"";"										
"TransDiscEntry.""Offer Type""::""Tender Type"":"										
"OfferType := DiscSeqBuffer.""Offer Type""::""Tender Type"";"										
"TransDiscEntry.""Offer Type""::""Line Discount"":"										
"OfferType := DiscSeqBuffer.""Offer Type""::""Line Discount"";"										
END;										
OfferTypeIndex := POSOfferExtUtility.GetOfferTypeIndex(OfferType);										
"DiscSeqBuffer.SETRANGE(Sequence,TransDiscEntry.""Sequence Code"");"										
"DiscSeqBuffer.SETRANGE(""Function"",TransDiscEntry.""Sequence Function"");"										
"DiscSeqBuffer.SETRANGE(DiscSeqBuffer.""Offer Type Index"",OfferTypeIndex);"										
IF NOT DiscSeqBuffer.FIND('-') THEN BEGIN										
DiscSeqBuffer.INIT;										
"DiscSeqBuffer.Sequence := TransDiscEntry.""Sequence Code"";"										
"DiscSeqBuffer.""Function"" := TransDiscEntry.""Sequence Function"";"										
"DiscSeqBuffer.""Offer Type Index"" := OfferTypeIndex;"										
"DiscSeqBuffer.""Offer Type"" := TransDiscEntry.""Offer Type"";"										
"DiscSeqBuffer.""Sequence Function"" := TransDiscEntry.""Sequence Function"";"										
DiscSeqBuffer.INSERT;										
END;										
TransDiscEntryBuffer.INIT;										
TransDiscEntryBuffer := TransDiscEntry;										
TransDiscEntryBuffer.INSERT										
END;										
UNTIL TransDiscEntry.NEXT = 0;										
										
"TransDiscEntry.SETRANGE(""Offer Type"",TransDiscEntry.""Offer Type""::Infocode,TransDiscEntry.""Offer Type""::Line);"										
IF TransDiscEntry.FIND('-') THEN										
REPEAT										
"CASE TransDiscEntry.""Offer Type"" OF"										
"TransDiscEntry.""Offer Type""::Infocode:"										
"OfferType := DiscSeqBuffer.""Offer Type""::InfoCode;"										
"TransDiscEntry.""Offer Type""::""Member Point"":"										
"OfferType := DiscSeqBuffer.""Offer Type""::""Member Point"";"										
"TransDiscEntry.""Offer Type""::Coupon:"										
"OfferType := DiscSeqBuffer.""Offer Type""::Coupon;"										
"TransDiscEntry.""Offer Type""::Total:"										
"OfferType := DiscSeqBuffer.""Offer Type""::Total;"										
"TransDiscEntry.""Offer Type""::Line:"										
"OfferType := DiscSeqBuffer.""Offer Type""::Line;"										
END;										
OfferTypeIndex := POSOfferExtUtility.GetOfferTypeIndex(OfferType);										
"DiscSeqBuffer.SETRANGE(Sequence,TransDiscEntry.""Sequence Code"");"										
"DiscSeqBuffer.SETRANGE(""Function"",TransDiscEntry.""Sequence Function"");"										
"DiscSeqBuffer.SETRANGE(DiscSeqBuffer.""Offer Type Index"",OfferTypeIndex);"										
IF NOT DiscSeqBuffer.FIND('-') THEN BEGIN										
DiscSeqBuffer.INIT;										
"DiscSeqBuffer.Sequence := TransDiscEntry.""Sequence Code"";"										
"DiscSeqBuffer.""Function"" := TransDiscEntry.""Sequence Function"";"										
"DiscSeqBuffer.""Offer Type Index"" := OfferTypeIndex;"										
"DiscSeqBuffer.""Offer Type"" := TransDiscEntry.""Offer Type"";"										
"DiscSeqBuffer.""Sequence Function"" := TransDiscEntry.""Sequence Function"";"										
DiscSeqBuffer.INSERT;										
END;										
TransDiscEntryBuffer.INIT;										
TransDiscEntryBuffer := TransDiscEntry;										
TransDiscEntryBuffer.INSERT										
UNTIL TransDiscEntry.NEXT = 0;										
										
SeqDiscAmount := 0;										
DiscSeqBuffer.RESET;										
IF DiscSeqBuffer.FIND('-') THEN BEGIN										
LastSeq := DiscSeqBuffer.Sequence;										
REPEAT										
IF DiscSeqBuffer.Sequence <> LastSeq THEN BEGIN										
LastSeq := DiscSeqBuffer.Sequence;										
TotalAmount := TotalAmount - SeqDiscAmount;										
SeqDiscAmount := 0;										
END;										
"TransDiscEntryBuffer.SETRANGE(""Sequence Code"",DiscSeqBuffer.Sequence);"										
"TransDiscEntryBuffer.SETRANGE(""Sequence Function"",DiscSeqBuffer.""Function"");"										
"TransDiscEntryBuffer.SETRANGE(""Offer Type"",DiscSeqBuffer.""Offer Type"");"										
IF TransDiscEntryBuffer.FIND('-') THEN										
REPEAT										
"IF TransDiscEntryBuffer.""Sequence Function"" = TransDiscEntryBuffer.""Sequence Function""::Line THEN BEGIN"										
TotalAmount := TotalAmount - SeqDiscAmount;										
SeqDiscAmount := 0;										
END;										
pPosTransPeriodicDisc.INIT;										
"InitReversTransLineDiscRec(TransDiscEntryBuffer,pPosTransPeriodicDisc);"										
EntryNo := EntryNo + 1;										
"pPosTransPeriodicDisc.""No."" := EntryNo;"										
"CASE TransDiscEntryBuffer.""Offer Type"" OF"										
"TransDiscEntryBuffer.""Offer Type""::""Total Discount"":"										
"pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::""Total Discount"";"										
"TransDiscEntryBuffer.""Offer Type""::""Tender Type"":"										
"pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::""Tender Type"";"										
"TransDiscEntryBuffer.""Offer Type""::""Line Discount"":"										
"pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::""Line Discount"";"										
"TransDiscEntryBuffer.""Offer Type""::Infocode:"										
pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::InfoCode;										
"TransDiscEntryBuffer.""Offer Type""::""Member Point"":"										
"pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::""Member Point"";"										
"TransDiscEntryBuffer.""Offer Type""::Coupon:"										
pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::Coupon;										
"TransDiscEntryBuffer.""Offer Type""::Total:"										
pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::Total;										
"TransDiscEntryBuffer.""Offer Type""::Line:"										
pPosTransPeriodicDisc.DiscType := pPosTransPeriodicDisc.DiscType::Line;										
END;										
"pPosTransPeriodicDisc.""Discount Amount"" := TransDiscEntryBuffer.""Discount Amount"";"										
IF TotalAmount <> 0 THEN										
IF (pPosTransPeriodicDisc.DiscType = pPosTransPeriodicDisc.DiscType::Total) AND										
"(pTransSalesEntry.""Total Disc.%"" = 0) AND (pTransSalesEntry.""Total Discount"" <> 0)"										
THEN										
"pPosTransPeriodicDisc.""Total Disc. %"" := pPosTransPeriodicDisc.""Discount Amount"" / TotalAmount * 100"										
ELSE										
"pPosTransPeriodicDisc.""Discount %"" := pPosTransPeriodicDisc.""Discount Amount"" / TotalAmount * 100;"										
"pPosTransPeriodicDisc.""Block Manual Price Change"" := TRUE;"										
"pPosTransPeriodicDisc.""Block Line Discount Offer"" := TRUE;"										
"pPosTransPeriodicDisc.""Block Total Discount Offer"" := TRUE;"										
"pPosTransPeriodicDisc.""Block Tender Type Discount"" := TRUE;"										
pPosTransPeriodicDisc.INSERT;										
"SeqDiscAmount := SeqDiscAmount + TransDiscEntryBuffer.""Discount Amount"";"										
UNTIL TransDiscEntryBuffer.NEXT = 0;										
UNTIL DiscSeqBuffer.NEXT = 0;										
TotalAmount := TotalAmount - SeqDiscAmount;										
SeqDiscAmount := 0;										
END;										
END;										
										
PROCEDURE InitReversTransLineDiscRec@1100409048(VAR pTransDiscEntry@1100409001 : Record 99001642;VAR pPosTransPeriodicDisc@110040900	0:00	TE	MP	ORA	RY Record 99008943);					
BEGIN										
//InitReversTransLineDiscRec										
"pPosTransPeriodicDisc.""Line No."" := pTransDiscEntry.""Line No."";"										
"pPosTransPeriodicDisc.""Offer No."" := pTransDiscEntry.""Offer No."";"										
"pPosTransPeriodicDisc.""Member Attribute"" := pTransDiscEntry.""Member Attribute"";"										
"pPosTransPeriodicDisc.""Member Attribute Value"" := pTransDiscEntry.""Member Attribute Value"";"										
"pPosTransPeriodicDisc.""Tracking No."" := pTransDiscEntry.""Tracking No."";"										
pPosTransPeriodicDisc.Points := pTransDiscEntry.Points;										
"pPosTransPeriodicDisc.""Sequence Code"" := pTransDiscEntry.""Sequence Code"";"										
"pPosTransPeriodicDisc.""Sequence Function"" := pTransDiscEntry.""Sequence Function"";"										
END;										
										
PROCEDURE InsertReturnTransLineDisc@1100409046(VAR pPosTransLineSource@1100409003 : Record 99008981;VAR pPosTransLine@1100409000 : R	eco	rd	99	8	981;VAR pPosTransPeriodicDisc@1100409001 : TEMPORARY Record 99008943);					
VAR										
PosTransPeriodicDisc@1100409002 : Record 99008943;										
BEGIN										
//InsertReturnTransLineDisc										
pPosTransPeriodicDisc.RESET;										
"pPosTransPeriodicDisc.SETRANGE(pPosTransPeriodicDisc.""Line No."",pPosTransLineSource.""Line No."");"										
IF pPosTransPeriodicDisc.FIND('-') THEN										
REPEAT										
PosTransPeriodicDisc.INIT;										
PosTransPeriodicDisc := pPosTransPeriodicDisc;										
"PosTransPeriodicDisc.""Receipt No."" := pPosTransLine.""Receipt No."";"										
"PosTransPeriodicDisc.""Line No."" := pPosTransLine.""Line No."";"										
"IF (-pPosTransLine.""Quantity Discounted"") <> pPosTransLine.Quantity THEN"										
"PosTransPeriodicDisc.""Discount Amount"" := ROUND(pPosTransPeriodicDisc.""Discount Amount"" *"										
"pPosTransLine.Quantity / (-pPosTransLine.""Quantity Discounted""),PosFuncProfile.""Amount Rounding to"");"										
PosTransPeriodicDisc.INSERT;										
UNTIL pPosTransPeriodicDisc.NEXT = 0;										
END;										
										
PROCEDURE SelectItemPointOffer@1100409054(VAR currline@1200070000 : Record 99008981;TmpItemPointOfferLine@1100409014 : Record 990014	54)	;								
VAR										
PeriodicDiscount@1200070002 : Record 99001453;										
LocTrans@1100409006 : Record 99008980;										
locTransLine@1100409003 : Record 99008981;										
TransDisc@1100409004 : Record 99008943;										
PosTransLineTemp@1100409001 : TEMPORARY Record 99008981;										
PosMMEntry@1100409005 : Record 99008983;										
"OfferType@1100409000 : 'Periodic Disc.,Customer,InfoCode,Total,Line,Promotion,Deal,Total Discount,Tender Type,Item Point,Line Disc"	oun	t';								
BEGIN										
//SelectItemPointOffer										
TmpPeriodicDiscount.RESET;										
TmpPeriodicDiscount.DELETEALL;										
CLEAR(TmpPeriodicDiscount);										
										
"PeriodicDiscount.GET(TmpItemPointOfferLine.""Offer No."");"										
OfferPosCalc.RESET;										
"OfferPosCalc.SETRANGE(""Receipt No."",currline.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::""Item Point"");"										
OfferPosCalc.DELETEALL;										
OfferPosCalc.RESET;										
OfferPosCalc.INIT;										
"OfferPosCalc.""Receipt No."" := currline.""Receipt No."";"										
"OfferPosCalc.""Periodic Disc. Type"" := OfferPosCalc.""Periodic Disc. Type""::""Item Point"";"										
"OfferPosCalc.""Group No."" := TmpItemPointOfferLine.""Offer No."";"										
"OfferPosCalc.""Trans. Line No."" := currline.""Line No."";"										
"OfferPosCalc.""Offer Line No."" := TmpItemPointOfferLine.""Line No."";"										
IF OfferPosCalc.INSERT THEN;										
										
"currline.""System-Unchangable Quantity"" := TRUE;"										
"currline.""System-Unchangable Price"" := TRUE;"										
currline.MODIFY;										
"InsertTmpOffer(PeriodicDiscount.""No."");"										
gItemPointOfferSelected := TRUE;										
RegisterPeriodicDisc(currline);										
gItemPointOfferSelected := FALSE;										
END;										
										
PROCEDURE CalcItemPointOffer@1100409050(VAR CurrLine@1100409000 : Record 99008981);										
VAR										
PeriodicDiscount@1100409025 : Record 99001453;										
PerDiscType@1100409012 : Record 99008943;										
PeriodicDiscountLine@1100409024 : Record 99001454;										
posTransLine@1100409023 : Record 99008981;										
tmpPeriodicDiscountLine@1100409022 : TEMPORARY Record 99001454;										
PosTransLineDisc@1100409026 : Record 99008981;										
InfoUpd@1100409021 : Boolean;										
discDiff@1100409020 : Decimal;										
discDiffPr@1100409019 : Decimal;										
prevLineDisc@1100409018 : Decimal;										
prevInfoDisc@1100409017 : Decimal;										
CheckMM@1100409016 : Boolean;										
MMGRoup@1100409015 : Code[20];										
PerDiscPer@1100409014 : Decimal;										
PerDiscAmo@1100409013 : Decimal;										
DiscOfferOk@1100409011 : Boolean;										
TotAmount@1100409010 : Decimal;										
DealPriceDisc@1100409009 : Decimal;										
lokOfferPosCalc@1100409008 : Record 99001561;										
lQty@1100409007 : Decimal;										
lDiscQty@1100409006 : Decimal;										
DiscAmount@1100409005 : Decimal;										
ItemUnitofMeasure@1100409004 : Record 5404;										
CurrCountLimit@1100409003 : Integer;										
CurrAmountLimit@1100409002 : Decimal;										
MaxDiscAmount@1100409001 : Decimal;										
BEGIN										
//CalcItemPointOffer										
"PeriodicDiscount.GET(TmpPeriodicDiscount.""No."");"										
tmpPeriodicDiscountLine.DELETEALL;										
										
"IF PeriodicDiscount.""Discount Tracking No."" <> '' THEN BEGIN"										
"IF PeriodicDiscount.""Block Total Discount Offer"" THEN"										
"CurrAmountLimit := PeriodicDiscount.""Amount to Trigger"" -"										
"PosTransMemberTrackingAmount(CurrLine.""Receipt No."",PeriodicDiscount.""Discount Tracking No."",PeriodicDiscount.""No."")"										
ELSE										
"CurrCountLimit := TmpPeriodicDiscount.""No. of Times Applicable"" -"										
"PosTransMemberTrackingCount(CurrLine.""Receipt No."",PeriodicDiscount.""Discount Tracking No."",PeriodicDiscount.""No."");"										
END;										
"MaxDiscAmount := PeriodicDiscount.""Maximum Discount Amount"";"										
										
"OfferPosCalc.SETRANGE(""Receipt No."",CurrLine.""Receipt No."");"										
"OfferPosCalc.SETRANGE(""Periodic Disc. Type"",OfferPosCalc.""Periodic Disc. Type""::""Item Point"");"										
"OfferPosCalc.SETRANGE(""Group No."",PeriodicDiscount.""No."");"										
										
IF OfferPosCalc.FINDSET THEN REPEAT										
"posTransLine.GET(CurrLine.""Receipt No."",OfferPosCalc.""Trans. Line No."");"										
"GetPerDiscLine(PerDiscType,posTransLine);"										
										
"//LS7.1-05 IF posTransLine.""System-Exclude from Offers"" THEN BEGIN"										
"IF posTransLine.""System-Exclude from Offers"" OR posTransLine.""System-Block Periodic Discount"" THEN BEGIN //LS7.1-05"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",'');"										
posTransLine.CalcPrices;										
END;										
										
"IF posTransLine.""Entry Status"" = posTransLine.""Entry Status""::"" "" THEN BEGIN"										
PosFunctions.IncTrackingInstanceID;										
"IF PerDiscType.""Periodic Disc. Group"" <> '' THEN BEGIN"										
InfoUpd := TRUE;										
"CheckMM := PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Mix&Match"";"										
"MMGRoup := PerDiscType.""Periodic Disc. Group"";"										
										
"IF (PerDiscType.""Periodic Disc. Type"" = PerDiscType.""Periodic Disc. Type""::""Disc. Offer"") AND"										
"(PerDiscType.""Periodic Disc. Group"" = PeriodicDiscount.""No."")"										
THEN BEGIN										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END										
ELSE BEGIN										
IF Priority(posTransLine) > TmpPeriodicDiscount.Priority THEN BEGIN										
InsertTmpOfferFromSpecLine(posTransLine);										
"TmpPeriodicDiscount.GET(PeriodicDiscount.""No."");"										
										
"IF (PerDiscType.""Periodic Disc. Type"" <> PerDiscType.""Periodic Disc. Type""::"" "") OR"										
"(PerDiscType.""Periodic Disc. Group"" <> '') THEN BEGIN"										
"PerDiscType.""Periodic Disc. Type"" := PerDiscType.""Periodic Disc. Type""::"" "";"										
"PerDiscType.""Periodic Disc. Group"" := '';"										
PerDiscType.MODIFY(TRUE);										
END;										
END										
ELSE BEGIN										
"lQty := ROUND(posTransLine.Quantity,0.001);"										
"lDiscQty := ROUND(posTransLine.""Quantity Discounted"",0.001);"										
IF lQty > lDiscQty THEN										
SplitLine(posTransLine)										
ELSE										
InfoUpd := FALSE;										
END;										
END;										
IF InfoUpd THEN BEGIN										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
END;										
										
"IF CheckMM AND (PerDiscType.""Periodic Disc. Group"" = '') THEN"										
"AddOtherOffersFromMMRelease(posTransLine.""Receipt No."",posTransLine.""Line No."",MMGRoup);"										
END;										
										
"IF (PerDiscType.""Periodic Disc. Group"" = '') AND"										
"(TrackingCountLimitOk(TmpPeriodicDiscount,CurrCountLimit,0)) AND"										
"(TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,0))"										
THEN BEGIN										
"PeriodicDiscountLine.GET(PeriodicDiscount.""No."",OfferPosCalc.""Offer Line No."");"										
										
"IF PeriodicDiscountLine.""Deal Price/Disc. %"" <> 0 THEN"										
"DealPriceDisc := PeriodicDiscountLine.""Deal Price/Disc. %"""										
"ELSE IF PeriodicDiscountLine.""Discount Amount Including VAT"" <> 0 THEN BEGIN"										
"DiscAmount := PeriodicDiscountLine.""Discount Amount Including VAT"";"										
"IF Store.""Currency Code"" <> PeriodicDiscount.""Currency Code"" THEN"										
"DiscAmount := CurrencyExchRate.ExchangeAmtFCYToFCY(PosTrans.""Trans. Date"",PeriodicDiscount.""Currency Code"","										
"Store.""Currency Code"",DiscAmount);"										
										
"IF (posTransLine.""Unit of Measure"" <> '') AND"										
"(ItemUnitofMeasure.GET(posTransLine.Number,posTransLine.""Unit of Measure""))"										
THEN										
"DiscAmount :=  DiscAmount * ItemUnitofMeasure.""Qty. per Unit of Measure"";"										
										
IF posTransLine.Price = 0 THEN										
DealPriceDisc := 0										
ELSE										
DealPriceDisc := DiscAmount * 100 / posTransLine.Price;										
END ELSE										
DealPriceDisc := 0;										
IF DealPriceDisc > 100 THEN										
DealPriceDisc := 100;										
"IF NOT tmpPeriodicDiscountLine.GET(posTransLine.Number,ROUND(DealPriceDisc * 1000,1)) THEN BEGIN"										
tmpPeriodicDiscountLine.INIT;										
"tmpPeriodicDiscountLine.""Offer No."" := posTransLine.Number;"										
"tmpPeriodicDiscountLine.""Line No."" := ROUND(DealPriceDisc * 1000,1);"										
"tmpPeriodicDiscountLine.""Deal Price/Disc. %"" := DealPriceDisc;"										
"tmpPeriodicDiscountLine.""No. of Items Needed"" := posTransLine.""Line No."";"										
tmpPeriodicDiscountLine.INSERT;										
END;										
										
"posTransLine.""Item Point Offer Member Points"" := PeriodicDiscountLine.""Member Points"" * posTransLine.Quantity;"										
"ItemPointOfferLineNo := PeriodicDiscountLine.""Line No."";"										
"InsertTransDiscPerType(posTransLine,TRUE,PerDiscType.""Periodic Disc. Type""::""Item Point"",TRUE,PeriodicDiscount.""No."");"										
"posTransLine.""Discount Triggered"" := TRUE;"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
"posTransLine.""Quantity Discounted"" := 0;"										
"GetTransDisc(posTransLine,TRUE,0);"										
"prevLineDisc := posTransLine.""Line Disc. %"";"										
"prevInfoDisc := posTransLine.""InfoCode Disc. %"";"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Line,'');"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::InfoCode,'');"										
"posTransLine.""InfoCode Disc. Disable"" := TRUE;"										
"posTransLine.""Customer Qty Used"" := 0;"										
"InsertTransDiscPercent(posTransLine,0,PerDiscType.DiscType::Customer,'');"										
lQty := posTransLine.Quantity;										
"IF NOT TrackingCountLimitOk(TmpPeriodicDiscount,CurrCountLimit,ROUND(lQty,1.0,'>')) THEN"										
lQty := CurrCountLimit;										
"posTransLine.AddQtyDisc(lQty,DealPriceDisc,PeriodicDiscount.""No."");"										
IF MemberTrackingCountLimit(TmpPeriodicDiscount) THEN										
"CurrCountLimit := CurrCountLimit - ROUND(lQty,1.0,'>');"										
										
posTransLine.CalcPrices;										
										
IF (MaxDiscAmount <> 0) AND										
"((tmpPeriodicDiscountLine.""Discount Amount"" + posTransLine.""Discount Amount"") > MaxDiscAmount)"										
THEN BEGIN										
"PerDiscPer := (MaxDiscAmount - tmpPeriodicDiscountLine.""Discount Amount"")  /"										
(posTransLine.Price * posTransLine.Quantity) * 100;										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
END;										
"IF NOT TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,posTransLine.""Discount Amount"") THEN BEGIN"										
PerDiscPer := CurrAmountLimit / (posTransLine.Price * posTransLine.Quantity) * 100;										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
END;										
										
"InsertTransDiscAmount(posTransLine,posTransLine.""Discount Amount"","										
"PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
										
"tmpPeriodicDiscountLine.""Standard Price Including VAT"" += posTransLine.Price * lQty;"										
"tmpPeriodicDiscountLine.""Discount Amount"" += posTransLine.""Discount Amount"";"										
tmpPeriodicDiscountLine.MODIFY;										
"posTransLine.""InfoCode Disc. Disable"" := PeriodicDiscount.""Block Infocode Discount"";"										
"IF (prevLineDisc <> 0) OR ((NOT posTransLine.""InfoCode Disc. Disable"") AND (prevInfoDisc <> 0)) THEN BEGIN"										
										
"InsertTransDiscPercent(posTransLine,prevLineDisc,PerDiscType.DiscType::Line,'');"										
										
"posTransLine.VALIDATE(""Item Disc. Group"");"										
										
END;										
posTransLine.MODIFY(TRUE);										
"tmpTransLineToUpd.""Receipt No."" := posTransLine.""Receipt No."";"										
"tmpTransLineToUpd.""Line No."" := posTransLine.""Line No."";"										
IF tmpTransLineToUpd.INSERT THEN;										
										
IF MemberTrackingAmountLimit(TmpPeriodicDiscount) THEN										
"CurrAmountLimit := CurrAmountLimit - posTransLine.""Periodic Discount Amount"";"										
END;										
END										
ELSE BEGIN										
"PosTransLineDisc.SETRANGE(""Receipt No."",posTransLine.""Receipt No."");"										
"PosTransLineDisc.SETRANGE(""Line No."",posTransLine.""Disc. Info Line No."");"										
"PosTransLineDisc.SETRANGE(""Entry Type"",PosTransLineDisc.""Entry Type""::PerDiscount);"										
IF PosTransLineDisc.FINDFIRST THEN										
PosTransLineDisc.DELETE;										
END;										
UNTIL OfferPosCalc.NEXT = 0;										
										
IF tmpPeriodicDiscountLine.FIND('-') THEN REPEAT										
"discDiff := ROUND(tmpPeriodicDiscountLine.""Standard Price Including VAT"" * tmpPeriodicDiscountLine.""Deal Price/Disc. %"""										
"/ 100,PosFuncProfile.""Amount Rounding to"") - tmpPeriodicDiscountLine.""Discount Amount"";"										
										
"IF (discDiff <> 0) AND (TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,0)) AND"										
((MaxDiscAmount = 0) OR										
"((MaxDiscAmount <> 0) AND ((tmpPeriodicDiscountLine.""Discount Amount"" + discDiff) < MaxDiscAmount)))"										
THEN BEGIN										
"IF NOT TrackingAmountLimitOk(TmpPeriodicDiscount,CurrAmountLimit,discDiff) THEN"										
discDiff := CurrAmountLimit;										
"posTransLine.GET(CurrLine.""Receipt No."",tmpPeriodicDiscountLine.""No. of Items Needed"");"										
discDiffPr := (discDiff / (posTransLine.Price * posTransLine.Quantity - discDiff)) * 100;										
										
"GetTransDisc(posTransLine,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscPer := posTransLine.""Periodic Disc. %"" + discDiffPr;"										
"InsertTransDiscPercent(posTransLine,PerDiscPer,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
posTransLine.CalcPrices;										
										
"GetTransDisc(posTransLine,FALSE,PerDiscType.DiscType::""Periodic Disc."");"										
"PerDiscAmo := posTransLine.""Periodic Discount Amount"" + discDiff;"										
"InsertTransDiscAmount(posTransLine,PerDiscAmo,PerDiscType.DiscType::""Periodic Disc."",PeriodicDiscount.""No."");"										
										
posTransLine.MODIFY(TRUE);										
IF MemberTrackingAmountLimit(TmpPeriodicDiscount) THEN										
CurrAmountLimit := CurrAmountLimit - discDiff;										
END;										
UNTIL tmpPeriodicDiscountLine.NEXT = 0;										
										
"CurrLine.GET(CurrLine.""Receipt No."",CurrLine.""Line No."");"										
END;										
										
PROCEDURE AutoPromptFormItemPointOffer@1100409074(CurrLine@1100409000 : Record 99008981;VAR TmpItemPointOfferLine@1100409001 : TEMPO	RAR	Y R	ec	ord	99001454;PromptAtScan@1100409007 : Boolean) : Boolean;					
VAR										
PeriodicDiscount@1100409002 : Record 99001453;										
PosTrans@1100409006 : Record 99008980;										
Store@1100409005 : Record 99001470;										
PointBalance@1100409003 : Decimal;										
TotAmount@1100409004 : Decimal;										
DateToUse@1100409009 : Date;										
TimeToUse@1100409008 : Time;										
BEGIN										
"PosTrans.GET(CurrLine.""Receipt No."");"										
"IF PosTrans.""Member Card No."" = '' THEN"										
EXIT(FALSE);										
										
TmpItemPointOfferLine.RESET;										
TmpItemPointOfferLine.DELETEALL;										
"IF NOT PosFunctions.GetActiveItemPointOfferLines(CurrLine,TmpItemPointOfferLine,PromptAtScan) THEN"										
EXIT(FALSE);										
										
"IF NOT Store.GET(CurrLine.""Store No."") THEN"										
CLEAR(Store);										
rboPriceUtil.ClearCouponAndMemberInfo;										
"IF ValidateOfferMemberInfo(PosTrans,0) THEN"										
SetMemberInfo;										
SetCouponInfo(PosTrans);										
										
PointBalance := PosFunctions.GetMemberPointBalance;										
"PointBalance := PointBalance - PosFunctions.PointsUsedInTransaction(PosTrans,CurrLine.""Line No."");"										
IF TmpItemPointOfferLine.FINDSET THEN REPEAT										
"PeriodicDiscount.GET(TmpItemPointOfferLine.""Offer No."");"										
//LS7.1-02 -										
"IF PeriodicDiscount.""Use Trans. Line Time"" THEN BEGIN"										
"DateToUse := CurrLine.""Trans. Date"";"										
"TimeToUse := CurrLine.""Trans. Time"";"										
END ELSE BEGIN										
"DateToUse := PosTrans.""Trans. Date"";"										
"TimeToUse := PosTrans.""Trans Time"";"										
END;										
//LS7.1-02 +										
"IF PeriodicDiscount.""Amount to Trigger"" <> 0 THEN BEGIN"										
"PosTrans.CALCFIELDS(""Gross Amount"",""Line Discount"",""Income/Exp. Amount"");"										
"TotAmount := PosTrans.""Gross Amount"" + PosTrans.""Line Discount"" + PosTrans.""Income/Exp. Amount"";"										
END										
ELSE										
TotAmount := 0;										
										
"IF NOT (((PeriodicDiscount.""Customer Disc. Group"" = '') OR"										
"(PeriodicDiscount.""Customer Disc. Group"" = PosTrans.""Customer Disc. Group"")) AND"										
"(TotAmount >= PeriodicDiscount.""Amount to Trigger"") AND"										
"rboPriceUtil.PeriodDiscFiltersPassed(PeriodicDiscount,CurrLine.""Store No."",CurrLine.""Sales Type"","										
"CurrLine.""Price Group Code"") AND"										
"(Store.""Currency Code"" = PeriodicDiscount.""Currency Code"") AND"										
"rboPriceUtil.DiscValPerValid(PeriodicDiscount.""Validation Period ID"",DateToUse,TimeToUse) AND //LS7.1-02"										
"rboPriceUtil.CouponFilterPassed(PeriodicDiscount.""Coupon Code"",PeriodicDiscount.""Coupon Qty Needed"") AND"										
"rboPriceUtil.MemberFilterPassed(PeriodicDiscount.""Member Type"",PeriodicDiscount.""Member Value"") AND"										
"rboPriceUtil.MemberAttrFilterPassed(PeriodicDiscount.""Member Attribute"",PeriodicDiscount.""Member Attribute Value"") AND"										
"rboPriceUtil.MemberLimitationFilterPassed(PeriodicDiscount.""Discount Tracking No."") AND"										
"(PointBalance >= TmpItemPointOfferLine.""Member Points""))"										
THEN										
TmpItemPointOfferLine.DELETE;										
UNTIL TmpItemPointOfferLine.NEXT = 0;										
										
IF PromptAtScan THEN										
"TmpItemPointOfferLine.SETRANGE(""Prompt at Scan"",TRUE);"										
										
IF TmpItemPointOfferLine.FINDFIRST THEN										
EXIT(TRUE)										
ELSE										
EXIT(FALSE);										
END;										
										
PROCEDURE ClearPosTransLineOfferBlocked@1100409051(VAR pPosTransLine@1100409001 : Record 99008981);										
VAR										
posTransPerDisc@1100409002 : Record 99008943;										
BEGIN										
//ClearPosTransLineBlocked										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pPosTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",pPosTransLine.""Line No."");"										
"posTransPerDisc.SETRANGE(""No."",0);"										
IF posTransPerDisc.FINDFIRST THEN										
posTransPerDisc.DELETE;										
END;										
										
PROCEDURE SetPosTransLineOfferBlocked@1100409047(VAR pPosTransLine@1100409001 : Record 99008981;pBlockingType@1100409000 : 'Manual P	ric	"e,L"	in	e D	"isc. Offer,Total Disc. Offer,Tender Type Disc.,Loyalty Points,InfoCode');"					
VAR										
posTransPerDisc@1100409002 : Record 99008943;										
BEGIN										
//SetPosTransLineBlocked										
posTransPerDisc.RESET;										
"posTransPerDisc.SETRANGE(""Receipt No."",pPosTransLine.""Receipt No."");"										
"posTransPerDisc.SETRANGE(""Line No."",pPosTransLine.""Line No."");"										
"posTransPerDisc.SETRANGE(""No."",0);"										
IF NOT posTransPerDisc.FINDFIRST THEN BEGIN										
posTransPerDisc.INIT;										
"posTransPerDisc.""Receipt No."" := pPosTransLine.""Receipt No."";"										
"posTransPerDisc.""Line No."" := pPosTransLine.""Line No."";"										
"posTransPerDisc.""No."" := 0;"										
posTransPerDisc.INSERT;										
END;										
CASE pBlockingType OF										
"pBlockingType::""Manual Price"" : posTransPerDisc.""Block Manual Price Change"" := TRUE;"										
"pBlockingType::""Line Disc. Offer"" : posTransPerDisc.""Block Line Discount Offer"" := TRUE;"										
"pBlockingType::""Total Disc. Offer"" : posTransPerDisc.""Block Total Discount Offer"" := TRUE;"										
"pBlockingType::""Tender Type Disc."" : posTransPerDisc.""Block Tender Type Discount"" := TRUE;"										
"pBlockingType::""Loyalty Points"" : posTransPerDisc.""Block Loyalty Points"" := TRUE;"										
"pBlockingType::InfoCode : posTransPerDisc.""Block Infocode Discount"" := TRUE;"										
END;										
posTransPerDisc.MODIFY;										
END;										
										
PROCEDURE PreProcessItemPointOffer@1100409052(VAR pCurrLine@1100409000 : Record 99008981);										
VAR										
TmpItemPointDiscLine@1100409001 : TEMPORARY Record 99001454;										
BEGIN										
//PreProcessItemPointOffer										
//LS7.1-04 New Function										
										
"IF (PosTrans.""Member Card No."" <> '') THEN BEGIN"										
IF CheckQRItemPointOffer(pCurrLine) THEN										
"pCurrLine.""Prompted for IPO"" := TRUE;"										
"IF NOT pCurrLine.""Prompted for IPO"" THEN"										
"IF AutoPromptFormItemPointOffer(pCurrLine,TmpItemPointDiscLine,TRUE) THEN"										
"PosCtrl.PostEvent('RUNCOMMAND','ITEM_POINT_OFFER','','');"										
END;										
"pCurrLine.""Prompted for IPO"" := TRUE;"										
pCurrLine.MODIFY;										
END;										
										
BEGIN										
{										
LS7.1-01 StK #24979# 24.09.13 - Discount issue on Retail Sales Order fix										
"LS7.1-02 StK #25698# 26.09.2013 - Add field ""Use Trans. Line Time"", used to validate offers based on trans. line time instead tran"	s.	hea	de	r t	ime.					
LS7.1-03 StK #25699# 26.09.2013 - Offer Info. Line performance fix.										
"LS7.1-04 StK #25699# 27.09.2013 - Make offer pre load configurable, start using queries."										
LS7.1-05 StK #24471# 13.11.2013 - Block periodic offer fix.										
LS7.1-06 GH  #26609# 27.01.2014 - optional benefit filtering fixed.										
LS7.1-07 StK #25127# 03.02.2014 - Mix&Match Unchangable offer fix.										
}										
END.										
}										
}										
										
